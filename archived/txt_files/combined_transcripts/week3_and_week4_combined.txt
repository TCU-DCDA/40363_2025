# Week 3 and Week 4 Combined Transcripts

## Week3.000_UFDesignLecture_otter_ai.txt

0:01  
Okay, so in our learning about HTML and CSS the first two weeks, try to keep the conversation our audiences needs. So that's mostly been focused on scan ability, so being able to read quickly web content that'd be too tiresome to read sort of carefully, line by line in the Z pattern, right?

0:23  
So I would say, I don't think it's too much to sort of claim that the way we're approaching

0:31  
our development of our websites and the content that those sites will contain is driven by kinds of empathy, so not our needs, not our desires, not our wants,

0:41  
and that our esthetics purely, but the needs of someone else, the concerns of someone else. So that's why we're looking into week three, into what's called responsive design, which is also known as mobile first or user first design. So the terms, actually, I want to define them separately, but they're very interdependent. They complement each other really well, but we're talking about designing for multiple devices, largely mobile devices, in order to meet the users where they are most likely to consume our content. Okay,

1:16  
so responsive design is design that is responsive. What that means is, the content of a web page will respond to the screen dimensions. That is, the content is poured into, right? So it has a certain has certain behavior that will sort of respond to the container that will sort of hold and display the content. So big screens, if it's 21 inches wide, or if it's 13 inches wide, or if it's three or four inches wide, it'll still look not the same, but still be arranged in a very usable, friendly way, for the for the for the user, right? So that's responsive design. So the response the content responds to the container that it finds itself in.

2:01  
That's important because, and this stat blows my mind

2:07  
that the majority, the clear majority, of web content is being consumed on mobile devices, so not on laptops, non desktop machines, but on mobile devices. If we want our content to be read, we have to have it showing up well, effectively, attractively in smaller devices, not beautiful screens like a laptop or desktop might have, but on a functional and usable touchscreen that we find on iPhones and Samsung phones and things like that on smartphones. So the practical implication of all this, or the practical application rather, of all this, is that we need to keep mobile devices first and foremost in our design planning. So the assumption here is that as we imagine our new site, we imagine it as a mobile site first that then changes and re sort of rearranges itself as it goes into larger, larger and larger screens. So it's not a technical sort of concern so much coding wise, there's some additional CSS to play with, but it's more the creative like we need to start with this very small canvas first and design something look good there, good there, first, and then move from there and imagine reimagining site in larger and larger spaces. So this makes much the same practical points, that the foundation of your site is the mobile content, like the core, basic, fundamental mobile experience. So the content that's essential for someone who's coming to the site quickly or unlimited with a limited device.

3:40  
And so the basic features, the basic functions, the basic but essential content, is what you should primarily focus on as you as you build out to your site, as it goes, as the screen grows to be the size of a tablet. You can add further enhancements or different features as it grows even larger to a laptop or a desktop screen, and you have room still for further enhancements. You're not leaving with the coolest thing you know how to develop. Website wise, you're starting off with the most essential info you want to share. So prioritizing content over functionality. So this makes the same points. So you can sort of see the example to the right. So on the desktop version has an image, has additional bullet items, has a more, more complete navigation system that's visible. There's room for that kind of additional, those additional features, but, but there should still be a very usable, very intuitive interface for the mobile user first, and that's what we see on the left. So another way of characterizing this that's, I think, separate from but still compatible with the first two definitions we just offered of responsive and mobile first design is user first design. We're doing all this because we want you.

5:00  
Users to read our content.

5:03  
So I really appreciate this phrase. This is an approach that prioritizes actual user needs, behaviors and constraints. So what they need,

5:15  
the behaviors of their own behaviors as well, in terms of reading and such, in terms of the F pattern and layer cake pattern, and also their constraints. So constraints may be physical limitations. Constraints may be have they may only own a smartphone and not have a laptop to look at your site on,

5:34  
but also the internet speed, right? We all, we might be in a very fast Wi Fi right now, not everyone has that same privilege, right? So a site that has a bunch of lovely images that are all 20 megabytes in size, it might look okay on my speedy Wi Fi, but would take forever to load into my smartphone that's on a 3g network, for example. So there are constraints that we need to keep in mind, both physical limitations of the user, but also the constraints they have economically, in terms of the devices they can afford, how many devices they can afford, and the Internet access they have after the at their disposal. All those are things that we need to keep in mind as we've designed primarily for the user who will likely be using a mobile device, and so therefore it needs to be easily viewed on the smaller screen.

6:34  
So notice how the hand illustration, kind of the roughing out the rough draft idea that's being illustrated to the left is imagining, really first the mobile version, what the next first version will be, which will be the mobile implementation that then sort of is reimagined as next iteration, as displaying with more features, more elements and a larger screen.

6:58  
So the three definitions of responsive mobile first and user first design, we can add three more concepts that will kind of lead us into the coding, sort of applications, or the coding techniques that will develop this week to

7:15  
make sites that work well across different digital environments. So one, the first one is more conceptual, so thinking of our content as fluid, as flexible. But also then we'll look at how that's sort of set up in a surprisingly simple way, technically with CSS, through what's called a media query, or a set of media queries. So the fluid design idea is you

7:38  
think about pouring water from a bottle to a large glass, to a small glass, to a bowl and to a vase. So each container, each different container, would have its own shape and volume available, and the water would sort of adapt itself to the shape of the next container. So the assumption in this illustration here is that each volume of water is the same, but you notice how it is taking, taking the shape of the container, so all the same content, but it's sort of, it's is designed, through its nature, to be fluid, so that it sort of adapts to and sort of comfortably fits in no matter what container it's poured into. So we've already prepared for that

8:24  
with some of the image sizing and percentages, percentages that we set up so far.

8:31  
So by setting our image, our images in line as we insert them, as we tag the image content to with 100%

8:40  
the working by percentages is working with with our anticipating a mobile experience. So we've already laid some groundwork by working with percentages, instead of fixed numbers like pixels,

8:51  
to make sure that our content even early on, before we get too deep into responsive design, that things are still being set up, initially flexibly that will be even, even more and more flexible and even more more fluid as we move forward.

9:05  
In terms of the coding knowledge required is actually pretty straightforward. It assumes, of course, as you already do, that you have some understanding of what CSS does in terms of redefining defaults for the browser, right? So the default the browser, without further instructions, will display things based on a set way that you can politely adjust with your own CSS. So font color, heading, color, font size, image, padding, all that sort of stuff can be set up through our CSS to override and sort of personalize and make more accessible our content.

9:43  
So we're still using CSS as we know how to use it, so to override browser defaults, but it's thinking more expansively about what CSS can do and thinking about the conditions in which our changes will be

9:59  
utilized.

10:00  
Yes. And by that I mean we have different screens, different screen sizes, different screen dimensions. So a large font on a big screen, so a font that appears larger than big screen might be too big for a mobile device. So as the screen scales down, we have to have the font, a font size for a title or a banner scale down with it, or the margins might be nice, nice and necessary for a large screen, but as we get to a smaller screen, those margins maybe be less necessary, because that would pinch the content too, too narrow to be read easily by pouring the content into a different flask or different beaker, or differences the test tube or changing the conditions in which the content is being viewed, right? So the CSS needs to be modified with each changing circumstance. And it's not that's not dozens to worry about this usually two or three different conditions to accommodate for.

10:58  
So I'll wrap this 10,000 foot overview of responsive design here with some final quick thoughts that we're designing with the mobile devices first, because that's what users will, first and foremost, likely use to access our websites, right? So you want to optimize the site display wise,

11:26  
file wise, so that it's it performs at its best possible way, in its best possible way on a mobile device. So to optimize for mobile, that means we need to think, we need to keep things simple and more focused in our design planning at this early stage,

11:44  
again, we're not showing off our skills. We're accommodating other people's needs, right? We're not showing off what's cool to us. We're thinking about what other people might need from us in a more empathetic way, right? So I think as we started this presentation, there's strategy involved, of course, because people are we want, we want our content to get into people's hands, into their devices. So we need to meet them where we're well, where the where they likely live online anyway, and that's likely through a mobile device, right? And once they find us in a mobile environment, we give them what they need. First and foremost, if they're interested, when I go to a full site, they can find more features and more functionality and the cool, the cooler tech stuff there, but have the site be simple and attractive and inspiring to spend to spend more time with your brands, with your information, with your content, with your calls to action encourage that that interest there to sustain their interest to go to a different device and look at more more features and on a larger screen. Okay, we will see how this works technically in the next set of videos.

Transcribed by https://otter.ai

## Week3.011_ResponsiveDesign_otter.ai.txt

0:06  
Okay, let's jump right into week three and the coding experience that comes with it three. We'll jump even more specifically to the Resources page of the Week Three module, and even more specifically to the responsive design tutorial. So it's like the one from last week, but with this week's project, we're starting from scratch in terms of new files. So I will be pulling code, and you may pull code from this to modify for your third week project to go back to VS code. I've already archived, as I asked you to do before we started these videos. I've already archived week two. So I week one, week two archives here. I have an empty index file here for a new homepage for this the third week project, and a new style sheet that's also empty. We'll copy and paste and build code together with this tutorial. So I'm assuming that you've been through the responsive design, mobile friendly design and user friendly design video, which gives a context for why we should think in these terms, why responsive is not just a good strategy, but it's also an act of empathy in terms of reaching the your user, your site visitor, where they likely consume their content, which is not both online, obviously, but also on a mobile device more often than not. So

1:34  
let's go ahead and jump into first seeing a new site that's promising but also not responsive. See what's going on that's keeping it from being responsive, and then we'll look at a version that will then become more more responsive, to really demonstrate what CSS can do to further enhance and further expand what HTML can do by itself. So go into the to the tutorial page itself. Let's go to part one, step one, HTML setup and grab the code here. Okay, so from Doc, type HTML down through the closing HTML tag, so all of it in this first box. So paste that here. Some garbage that I collected I didn't mean to capture. I'll go ahead and get rid of that here. Okay, so the heads should be pretty familiar to you. The body section is the usable content. The navigation is different than ours from last week, but set up in this similar fashion with an unordered list and list items for each link. So one thing that's different, that's different here from last week's setup, is that we have a section tag. So assuming the main will have several sections of content that'll be divided, probably topically. So you can use the section tag to define those, those sub topics. In addition to headings and subheadings, you can, you can actually put them into sub containers as well. Okay, so one thing I'll need to do is update what I have for line 27 with an image from my image images folder. What wish this fresh for this, for this exercise, so type in I for images, and then choose a file that you want to insert here. So go ahead and make the changes here. So this, the images folder should be the same for you, probably, but the file name will be different. Obviously, all tag will be different once the project is done very HTML, very htmlly, even from this simple preview, image is too big. Content is dwarfed by the image, and also image is not responsive, or the site is not responsive, the image is not resizing. So we this is we've encountered this before, right? So let's keep on pressing along then with our tutorial on the CSS that it contains. So the additional code of contains it will make some further, further refinements.

4:29  
That's sad. Step two, see if that enhances anything in any sort of meaningful way. So we'll add that to the CSS file. Should it make us It should make some difference. So actually it does some good. So here's the page at various widths, but the image is still not responsive, so the CSS is making it more attractive, but the image is still not all that well sized. That. Not as huge as it was, but still not responsive. It's just been scaled back a little bit. This is arranged a little more a little more thoughtfully, like with our navigation for exercise two, homework, two, project two, then there's a unordered list and the navigation that's set to flex that on Sol. This is pretty distributed, pretty familiar code, so CSS is working, but the responsiveness is not really super great. So one thing that this tutorial asked us to do is to use the inspection tool, which you can get to in Chrome. So here was the there's the practice page in Chrome. I'm right clicking and going down to inspect, and that opens up a panel here. And so what you can do is play with different resolutions or different screen sizes to sort of see how responsive or poorly responsive it is. So for for iPhone 14, which is not, not that old of a phone, I have a 15. So this is one generation before my phone. It looks pretty crappy. Let's look at a Samsung. Yeah. So it's not responding. It's responding to a point, but it's not responding especially well. It's a nice feature to have if you are doing mobile or user first design.

6:55  
So what we need to do is have it be a little more adaptive to the container that it finds itself in, right? So the content we're talking about the box model box, we don't think of boxes as liquid, but boxes can be stacked and restacked to fit for the available space better, right? So they can that are, so they can be rearranged and RE and RE positioned so that they fill the space better. So like liquid in that regard, so that so the box is better, better accommodate the space that they have available to them. So let's start talking about the magical, mysterious media query. So if you have, if you've had any experience with Python or JavaScript or other computer languages, you probably know something about conditional statements, which is a pretty fundamental component of a lot of computer languages, where media query basically says, once a certain condition is met, redefine these CSS rules, or change these CSS rules in this way. So when a condition is met means for our purposes, so the screen goes from, say, 1200 pixels wide to 768 pixels wide. Half this elements from the CSS change to accommodate that smaller space. So the statement begins at media. What follows is the condition, which is usually phrased in this way, so you Max with 600 pixels, for example. So when, when this condition is mess, when the screen goes down to after goes down to 600 and below the h1 font size will be, will be set to 24 pixels, which is smaller than, I guess, smaller than we have here. Before we get into the stuff down here, let's just try this one example. So the under Basic structure, there's the first real example for each one. Let's try that and put that into place and see how that affects the presentation. So going to the very bottom the style sheet and pasting in the code. So let me do a proper preview on a proper browser, so certainly larger than 600 pixels. Let's see, did I refresh it? There we go. Okay, and refresh my browser. So larger than 600 pixels, we have a large, larger font. Less than 600 pixels, we have a smaller font, right? So that's a media query in action. It's a media query that's affected the H once. So the condition is not met with a wide browser or a wide screen, the condition is being met with a smaller screen, not being met, being met. So that's a media query in action. So notice, if we can so this is the original statement for how each one is defined. So both the font size, but also the spacing around the font. So you don't need to repeat the whole thing. You just copy and paste the one value that's the one property and value combination that's changed. So let's add to that and see if we can make some more interesting magic happen. You so this is a more more complete, more robust, more real world example of CSS in action. So I'm copying the whole block here. I'm getting rid of the media query from from before, and then paste again. Will I just copy it again? So here, this is a more standard width, but now we was, we set it up in a more predictable way, or more sort of uniform, universal ways. So again, the font size will go from 36 to 24 well, in addition to that, the navigation list, so we'll go from a column will be turned into a column, and otherwise it'll be A row, right? So let's, look at that.

11:30  
So, so the navigation also is changing now, so the font size of the h1 changing, but also the orientation of the navigation list, because, if we have this is a relatively short navigation systems of just four links, but if we had 567, you can sort of see how they'd be clipped off and cropped out pretty quickly if they didn't reposition right. So that's a matter of leaving everything pretty much alone. So the flux is being defined here. This is a flux box because of this display property here. But now we're setting the flux direction. So when the navigation list gets down to below 607 68, then the direction of that flux box should be in a column. So notice, we hear what we have here too. This is a pretty universal statement too. So the width is set to 200% and as is the max width. So let's see that in action. So it goes only so big, so it doesn't go beyond its maximum size. But also it once it gets down to 768, or stays with the the width of the of the browser resizes to the width of the browser. So three things are happening here so far that we're seeing the each one's changing. The orientation of the navigation is changing, and the sizing of the the image is changing too, right? And so we do the the preview of this, of the various mobile devices

13:38  
that's much better than we saw before, much better than what we saw before. So the XR looks as good as iPhone 14, which looks probably as good as the Samsung Galaxy, right? So we just, we just increase considerably exponentially the number of users who can access our site and where they can access our site so they have to be tethered to a desktop or have the money for an expensive laptop, they can have an expensive iPhone instead, or a more quote, unquote affordable smartphone, and still have access to our site in a way that's not not initially off putting. This could be improved, but it's certainly better than the original version we first saw. Let's see what else is being changed by the CSS. So padding has changed from 40 to 20, so you need less padding as the as the section gets smaller and paragraph size went from 12, went from the defaults has not been fined, went from the default setting to 18. So let's see if we can see that action. So.

15:05  
So the paragraph settings is the bottom of the screen, so it's the default here, and it gets actually a little bit larger, like I said, true, or does that content? Okay? Because the smaller phone would would make this a small font, hard to read. So let's let's try this. Let's try this. We're going to change the paragraph sizing, font sizing, to 20. I'm

15:45  
so not too hard to read there, but even learn from here. So it can go in both directions. It doesn't have to get smaller as the screen gets smaller. You can set it up however you need to. That's that's sensible and user friendly. Okay, back to the to the tutorial.

16:15  
So we did our manual testing. We should probably go ahead and do our GitHub backup. So we made some changes, early responsive testing, commit those related files, push that to origin, to back up that work in our GitHub repository, and so the tutorial also includes the uncommon mistakes, so things that you might forget to include. So we don't typically start a CSF statement with a with a at symbol, but you do in CS with a media query. So it's at not just the word media, but at media followed by parentheses, usually with a value like Max, hyphen with colon, 768, pixels. This is pretty standard. And then what follows is the is the tag or the selector property and value that we're familiar with from CS CSS last week. So one mistake is to leave off the and sign here. Another mistake is to leave off the parentheses here,

17:39  
also where where you place the media queries in the larger style sheet matters. So what I did was I paste so this is from line 44 up is what I copied from the original tutorial. So the original CSS we started playing with was what I have from 46 down. Is the entire media query, re revaluing these tags or applying responsive values to these tags. So we want to have our defaults defined first before we change them again once the certain condition is met after the after the browser resizes. So order does matter, so it's usually media queries are say, let's say for the bottom of the of the CSS style sheet.

Transcribed by https://otter.ai

## Week3.021_Flexbox_otter_ai.txt

0:05  
So we've talked about the need for responsive design. We've talked about how responsive design is user friendly, how responsive design puts the user first, makes the content accessible primarily, and perhaps even initially, through a mobile device, so someone moves from the mobile version to tablet versions or to desktop versions of the site was site layout will adjust responsively to potentially add more features and functionality, but the essential information should be available clearly, plainly, accessibly through mobile view. So when we think about mobile first design in the context of the box model, we have two choices, two primary choices to consider at this stage, the first of the Flexbox model, which we'll get into today, and then the next video will likely cover then the grid layouts. So what I offer here is the wireframe view of a mobile site, and it's rearranged desktop version. The assumption here is that the content is the same in each colored region, but they're laid out differently given the width of the browser available, so there's more space and desktop. So the orange boxes arranged differently. There's less space in mobile, so the orange boxes are stacked into a column, right? So this is a further illustration of the value of the box model we've been talking about all semester long. Boxes aren't fluid, but they can be stacked and rearranged to respond to the container that they're being placed into. Okay? So I'll be pulling from this tutorial the way I have the past tutorials, and we should have some results pretty quickly. And again, I'm once again, sort of struck in a positive way by how much can be accomplished with a

1:53  
relatively few lines of code.

2:01  
So I'm going to start with GitHub Desktop, and I'm going to go to the local folder first. So I'm going to stay outside GitHub for a second, and outside VS code for a second to go specifically to the files on my laptop. So I have from past instruction week one, week two, archived in these rows of folders, and I go ahead, while I'm here and create a new folder called

2:27  
week three.

2:33  
Then inside that folder, we're going to create another folder

2:38  
on flex box. I'm and

2:43  
then to prepare for future work, I'll make a folder called red. And so with those changes in mind, I'll open up in Visual Studio code. So now that I'm back to Visual Studio. I have my way Three folder here, and then I have my sub folders here. So today we'll focus on this folder here. We'll put the content just, probably just two files, indexes a style sheet into this folder here. So with this folder selected, click on the new file, icon, type in index that HTML, make sure you're including the extension, and do well one more time to do style, singular dot CSS, so leave them both empty for now and uh.

3:46  
So the goal is to build, build a site that will have two usable versions, one that will be one desktop view on one mobile view. So we have our files created. They have our rationales discussed. So let's go ahead and grab this first step, one block of code, which is the entire HTML. We will be working with,

4:18  
18 lines of HTML, so not very much at all that will look like crap, not in the good way, not the CRP way, but look, look pretty boring in preview, right? So just those five, five boxes, right? So we have the inside the body box, we have the header box, we have the main box, then we have a section. And inside the section box, there's three soap boxes, three card boxes. So just for reference, when I use the word card, I'm referring to these elements here. So. Yeah, so navigation is the purple hero graphic, or banner is blue, and then the cards are the orange. But nothing much to look at, very little to look at. There's nothing engaging here at all. But let's go ahead and begin. So we're thinking mobile first. So we want to, we want to create this version first, before we add the code to have this emerge after certain conditions are met in the browser, right going to step two. Then let's grab the CSS. There is a bit more to grab, but not that much I'm

5:45  
so grab that. So

5:47  
this is the mobile styles first right, the base styles for the mobile sites, for foundational styles for the larger site. Paste that into your flex box styles dot css file so we've added 53 lines of CSS here, and then the changes are immediate, traumatic and kind of satisfying, but let's go ahead and explain what's going on. So this defines the body, the background, color and font, so nothing too profound. This defines the header, so the purple bar here, so I prefer, for example, does this see the immediate change I prefer for d1, 979, for my purples,

6:42  
the heights been set to 60 pixels by that from the tutorial. We can change that if we want to 10am maybe make it eight. Let's make it five. So margin bottom is the space, space pushing that this white space in between is being created by this box here, by the header box. So the margin bottom is the space beneath the border radius is in the curve of the corners. Right. If you want to make make it a more curve, we add to this the border radius number here

7:26  
I like my banners on my head square. So I'll go ahead and back this up to something a bit smaller, but there still go around this too. It's a little more little not quite so Pokey, not quite so jabbing, little more delicate than a squared rectangle. The heroes want to define what's the same way. So we'll make the hero section, but we'll make it maybe 10 EMS, maybe maybe 15, just to kind of have the spaces sized differently so they'll remind us more of what their function is. Well, the same thing with the margin bottom, same thing with the border radius. We also had our previous banners or here set up in flex the line item center and justify content center. Arranges this text here horizontally and vertically. The centers are in both directions. So for example, if we change justify content to rights, the whole text box moves off to the right. Okay, anything else should be pretty clear. Text is the foreground color. The background color is blue, the foreground color is white, the font weight is bolded. Okay, so this is where we get into the beginnings of the coding for the flex box.

8:57  
So notice

9:00  
the cards themselves, the three cards that we have, the three orange cards, one, two and three that we have here, are actually inside of a larger box called section, and it's called cards container, specifically class cards container. So the these are not floating, floating individually. They're put into a larger box that's that's largely invisible to us, but it is a container for the cards that we that we do see here. So there's a box, invisible box around this that's beneath the main box with the hero section, which is beneath, then the navigation box, or the header box. Okay, so look at how that is styled. Displays also this to the flex because we're working on Flex boxes, and flex is good to help things rearrange, either into a row or a column. So So here we have a column. I. Of boxes. Here we have a row of boxes. So the flex CSS is allowing us to move back and forth between these two depending on the width of the browser. So the Flex is good for arranging boxes, either either into a row or into a column or back and forth. So set up as a flex box here, but the initial sort of mobile, sort of orientation of those boxes is a column, so the flux direction of the box is a column. So to go back to our example, I could put it into row here.

10:39  
Doesn't look very good,

10:43  
but the flux direction is was determining if it's either a row or column. So we want for the mobile view to appear as a column. We'll set that here. So one last thing to observe in Curt set of properties here is there's a gap set between the boxes. So notice there's spacing between that's not set up by margin. In this case, it's set up by a gap in the larger card container, the larger Curt container, then it has gaps between elements.

11:19  
Okay, so the gap here is the spacing between. And there's nothing new here, new different colors, different heights, same border radius, same aligned and justified contents. So this is just defining the box itself. So the real sort of magic that's about to happen, or that's starting to happen, is based on what we're seeing here, right? And really specifically what's happening

11:47  
in this line here.

11:52  
Okay, so let's go ahead and reduce the the gap between back to 1am just to make it a little more responsive still. So this will be the navigation. Let's go ahead and change that here while we're talking about it.

12:20  
So for the header, class equals header, and change that to navigation, just for clear visual reminder.

12:31  
For the main class, I will put banner image and

12:40  
text

12:43  
then for card one, I will put

12:47  
topic one, topic Two, topic three,

13:00  
that way we know more what function, what content should go eventually into these spaces. Okay, so looking looking nice in a mobile environment. We can go to Preview, we can do the inspection that we've done before, but we can sort of see it's working well on the iphone four pro Max orientation looks good in Samsung, looks good at galaxy, and also it doesn't look bad in more of a desktop orientation. One thing that would be gained by by having having things go from a column to a row, in this broader view, is that we could sort of see what was going on with topics two and three without having to scroll, so we could get a sense, maybe what's going on in these other topics that they're both side by side instead of on top of each other, right? So let's demonstrate that pretty quickly.

14:12  
So going to believe step three of and it's just one batch of code here which also belongs in our CSS file at the very bottom. Again, the order of the CSS doesn't matter. Some media queries should come lower at the bottom of the page instead of the top of the page. We're just dealing with one break point, and the only thing that's changing is the that is the what's happening in the card container. So let's turn off the gap for a second. So I'll do a command for us. Let's just turn off that the gap is for a second. So I'm commenting out the code just for a moment to sort of, sort of see what happens if we they've always, they've always changes the flex direction and. And then this feature of the card, which we'll discuss in a second. So go here, over here, do a preview.

15:17  
Nothing's changed here, because we haven't changed the mobile CSS, but something should have changed if we broaden the browser here. So breakpoint, breakpoint, breakpoint, the same, breakpoint. So we talked a moment ago about how this could potentially, in desktop view, push the important content below the bottom of the screen. This will probably bring that information up more eye level.

15:56  
Let's

15:58  
demonstrate that with inspection. I so here's the more of a tablet size or desktop size. Here's the iPhone 14 size.

16:21  
So this brings the content higher on the page, which will help us to sort of see for scanning you want to jump to a specific subsection of your site, this will allow us to find that subset section more quickly. So this is also part of scan ability, also part of your user experience, also part of multiple mobile friendly design they're all rolled together into one, a happy, functioning set of code. So look as a review. If we're thinking column, we're thinking mobile, and if we're thinking row, we're thinking desktop.

17:00  
Gaps at space between flex items. So this has been pegged as flex. This has been pegged as flex. This has been these all have impacted flex or tagged as flex. Then, then the spacing between the flex elements is determined by gap, not by my margin, but by gap. So let's play with the flux one. We haven't discussed this part of it yet, which is part of the desktop CSS. So as the as the text says here, flex one, which is the addition to the card. Addition to this telling here in the mobile view determines the or helps to ensure that the cards are of equal within the desktop. So that goes to the desktop view, and they have now three cards side by side, they're all going to be the same width, so so they're responsive and relative to the width of the browser, but they're going to be the same as each other, right? So one will one or two won't stretch wider than the other one in the middle, for example. Okay? Media Queries we've discussed before, but just a quick study of the syntax, and because we're dealing with mobile first, we're dealing with a breakpoint that's defined as the minimum point, and this is a very common breakpoint. So we could add a breakpoint in between for tablets, but we won't for this tutorial. Okay, so.

Transcribed by https://otter.ai

## Week3.031_GridLayout_otter_ai.txt

Hey. So I thought I would begin today's tutorial. Instead of going straight into the tutorial itself, I thought we'd look at some examples from the wild. So these are examples that came up and discussion from last week. So here's not the Patagonia homepage. By the Patagonia sub page, they have a section called stories, but you sort of notice how they have features similar to what we've we've been playing with so far. So top navigation,

then a large, striking, interesting, windswept banner, image, Hero graphic right with text, text on top.

And then we see what's arranged into what we call then the flux box tutorial, cards, right, individual cards. And then, so they're they have thumbnails, they have text, they're interactive, but we see the kind of the layout being similar to the rows the way we sort of thought about and played with the flux box tutorial. So this is, you know, what was, what we're doing. There is very much part of design these days, right? And it's a very useful way of getting a lot of content up pretty high on the page in a desktop view, so it is responsive. So we can go ahead and do an inspection of the other responsiveness with the Inspect tool. I

Okay, so we have the, I just resize things to be, you know, sort of laptop, laptop size.

So we have the banner image

and the cards and set into rows with the thumbnails and text inside each one.

So pretty clean. There's also notice the rounded edges in the corner. So we talked about that as well.

We have then gaps between the elements that are giving some breathing room between them, so it doesn't look too too cluttered, even though there's a lot of information here. So if we give go to a smaller phone layout, so iPhone 14,

we have in the card stacking, right? So, like what we did yesterday with Flux box, we have sort of what seems to be flux box and not an action

in this mobile this iPhone mobile view. And

one thing I realized that we could also do, because with phones, we have the option to go

landscape or portraits, right? We have differentiation to play with, and things should respond to those, those changes as well

you can there's a little phone icon with little arrows on top and bottom in different directions, you can rotate the view.

Something interesting happens here, actually.

So I went from a three card row

to a column, which is what we did previously with the Flexbox tutorial.

But notice what happens here, and this is leads us into today's discussion. If we flip, flip even the mobile device, let's see

if we flip the iPhone 14, which

is currently arranged as a column, and what could be Flexbox at the moment, we go here

and we have two rows, right? So we're dealing both with things are arranging based on the available space of the window in both rows and count columns simultaneously. So it's not just a row or column, but it was a combination of both. So it's almost two dimensional, where flex boxes one dimensional, either a row or a column. Grid layout, which we'll get into today, allows us to combine both columns and rows in the same in the same container. So when we go back to this more extract view of things

with the Flexbox tutorial, we started off with a column layout for mobile view. Because we're doing mobile first. We're thinking conceptualizing mobile first before then we sort of think about how things might rearrange sensibly and productively with a wider desktop view, right? So, orange column, orange row. But when you get into additional elements, older articles or older content or things are less important to for the viewer to see first, which would be the orange stuff here

we have then

a row here, like it took a gray row, like this, orange row, both four boxes instead of three. But then those four boxes arranged into both a column and row both, right? So we have columns and rows both going on here.

So this, this tutorial, is available through the.

Too well as as are the previous ones from last week and this week.

Flexbox, again, is quote, unquote, one dimensional. So it works either with rows or columns, but not both simultaneously with grid. You can work in two dimensions. So it's you can work both and with rows and columns in the same design.

So flex boxes for simple distributions raises for more structured and complex layouts.

Okay, so let's go ahead, go ahead and get things set up the way we have before.

So I'll start with our friend the purple cat.

I don't need to, but you may need to do a commit to save the most recent files that you've edited. So go ahead and save your local changes so that this phrase here the local changes appears, and then let's go ahead and open up our current repository inside Visual cube Studio code,

so I'm opening up into the flex box tutorial from last time, which is fine. We can keep we can keep this for reference again, remember just how simple the code is, both with the HTML, but also even relatively so with the CSS. The same will be true today with grid. Okay, so I'm going to close the Flexbox folder so I won't confuse myself. I'm going to open up the grid folder and then add in the same two files, the standard two files of index, dot HTML,

and the same thing in the same folder, style, dot css, weekly folder, grid subfolder, style, dot CSS here,

Week Three folder, grid folder, index, dot HTML file here, but otherwise, keep them empty for time being.

We'll go to Step one, and we'll pull the basically HTML setup, so also a very small number of lines

to grab,

make sure we're inside our our grid, index file,

paste in step one.

So here we have 17 lines. So even fewer lines the body box, instead of a main we have what's called a grid container, which is going to have probably its own CSS attached to its own CSS class attached to it, which we'll examine in a moment.

Header box is probably the navigation. Go

ahead and change that there for for clarity. Hero is banner,

image

and features and gallery hold leave the same.

So go ahead and preview this, and we'll have something

underway, but not gripping at all.

So again, to emphasize just what CSS does to HTML, the HTML is here as well as well structured. It makes a lot of good sense.

It doesn't do much without the help of CSS, right? So CSS is a huge player in this conversation.

We'll grab the simple mobile base styles,

which isn't that much, but it will make a nice difference.

So I'm going over to the style sheet here, so make sure you're in the right file, right? So I started in the HTML file as I should have, as I needed to, but now I'm going to the CSS file instead to paste in what I get from step two.

So nothing's happening here, even though a lot of success has been put into place.

I'll pause for a second and have you look just at the HTML code for a second.

And there's a problem that we can correct, but there's a problem.

So what is the problem?

Okay, so you'll notice that what we what we copied from here, from the the

code available here

is working fine,

but it's semantically incomplete. So the tutorial is, is is on track, but is missing a key element. So follow me here, and we always had this to come back to, but

this should make a nice difference first, let's go ahead and kill what's available here.

Here.

And let's start outside of that. The default templates for an HTML page that we've done previously haven't done in a while. So you type in exclamation point tab,

we get the more complete template. So what we copied before that gave us the body tag content, but did not give us this, which is very important for things to display properly in the browser. So we can put the code back in from here, from step one. So I'll take that and replace the body tags with what was the step one here.

So that should help, but that may not be enough, and I'll ask you to reflect if there's still a problem. Okay,

so nothing has changed during the preview, the simple preview, even though we do have a more semantically complete HTML page. So let me go back to hearing again and do a little sort of quiz.

What's missing here? The styles are in place. The styles are not. There's no errors coming up here in terms of the styles being poorly, poorly formatted.

There's no problems to identify here. So what's the issue? I would ask.

Okay, so one thing, the thing that didn't come with the generation of this content,

that we still need is to link this

external style sheet to the HTML page.

So this this page doesn't know to reference this file. It's the file is ready to go, but this doesn't know it needs to be calling in things from that file yet. So inside the head tag. So I'm just going to go just beneath the title

here, I'm going to type in link.

Now, we've done this before. REL

equals quote, unquote style sheet.

End, quote,

HR, EF equals,

and if we preview that, we have a much different creature here.

So is missing this important connection from or between files. But again, do the do a preview,

and it looks like yesterday, but we have the additional sort of gallery gray boxes here. I imagine it's still not responsive. It's not responsive yet because there's no media queries in place yet.

I'm so the review of the CSS should be pretty straightforward, okay, so, because we're so

instead for this page, instead of a main section inside the body,

we have a a div, this class grid containers, we have a box, box that's basically a big name grid container,

and that begins just before the opening body tag, or just after the opening body tag and before the closing body tag. So all the visible content is in the body and furthermore, on this on this page, all the visible content is also inside the first sub box called Grid container. So grid container then is styled pretty simply

as a grid instead of flex. The display is set to grid because we're working with the more complex row and column combo. So we have to say this, this box will be a grid container, as opposed to nothing or as opposed to a flex container. The

spacing between grid and flex elements is not called margin. It's called gap. That's a point we made before. Okay, so that's all that's being defined here.

So then we have header, Hero features, and gallery has the next boxes that are being styled here. Let's see there other places. So the header boxes here.

So again, I'll read, I'll call header navigation,

I'll call hero banner,

and I'll leave the features and items or gallery that as it

is so these three or from, sorry, four boxes are being defined here.

Header hero features gallery.

Header hero features gallery, so background colors of

to default if others don't, other codes don't work.

Padding is this, in this case, is the space

left and right, top and top and bottom, the cushion.

Inside the box. So the space between the word navigation and the word banner, I'm sorry, the word navigation, top navigation, bottom, the space here, or the space here, or the space here, is a cushioning, a padding, a bubble wrap, basically of 20 pixels on on each side, and Texas line in the center. So it's being centered vertically by the padding. In this case, it's being centered horizontally by text align. So we have the color set to default here for all four, they're all the same color. The other colors fail. But then each one is giving given its own color, and

that's all. It's happening in the next four lines,

that background color and foreground color two.

So I prefer again, my TCU purple, my purse, TCU purple, 4d, 1979,

now that we have, then the features box,

which then has just three kind of generic sub, sub div sub boxes inside of it. And the same thing, we have four generic sub sub boxes inside the gallery box. Okay, let's look at the syntax here. So we have

display grid set up here, right? So this is a grid container, right? That's why it's called container.

But we need to confirm that the other elements inside this larger, this larger grid container, are also should be displayed in the grid technique, or the grid layout approach. It's lines 21 and 27 so the one fr, let's, let's explain that first, then we'll compare that to what's going on in line 27 so grid, template, column. So things, set things up into a column

with the available space. Fill that with one what's what's called one, fractional units. So basically, this one, this one fr here, is equal to sizing it 100% of that, of that containers, the larger containers width.

So we have here, then in for a gallery,

one fr, one Fr. That's not two fr for two fractional units, but one fractional unit plus one more fractional unit. I can see how this will be a little bit confusing. It took me some time to get my mind around it. Okay, so kind of to make the point maybe a little bit clearer. So say I change one fr, one fr to two fr, one Fr.

So one box taking up the whole spaces, two boxes combined taking up the whole space.

But they're different. They should be different sizes.

So now item one and item three are twice as wide as item item two and item 422,

those have been divided into three fractional units. Two of them are item one. One of them is item two to the to the fractional units here, or item three. One fractional unit is item four. To make that point even further,

let's try this. Let's just get really kind of weird. So

this is basically 1/3 or 2/6 of this fractional space. This is 4/6 of the fractional space,

or two thirds, 1/3 two thirds. So that might help a little bit. But I think probably changing this to just this to like 10, for example, shouldn't change anything.

It's maybe perhaps theoretically divided into 10 units, but it's all just one big sort of all that is being used for this one box. So take some practice. Take some playing.

Let me return this to the original values. I

So again, this is how things are displaying in the mobile view, right? So we're designing with this with this view in mind first.

Well, we want things to rearrange themselves once we get to

this view.

Okay? So we need to define the break points, which is where the media query start, makes the changes, creates the conditions to change things, from layout one to layout two, where the mobile design will then rearrange itself into the desktop design. And that is grabbed from the tutorial.

And the media query is pretty short, because really only two of the four of the four divs are being redesigned for the desktop view,

so going to the bottom of the page. So media queries go at the bottom, not the top. Paste in this.

Make a quick note. I'm.

Okay, so we have the media query which we looked at before, right? The minimum width, not maximum. Minimum hyphen width is 768, which is a standard, standard break point.

We're redefining simply the grid column arrangements of

the feature box and the gallery box, and

we'll talk about the syntax here in a second, but

let's go ahead and preview that,

so we may already notice the difference here.

So original mobile view,

so new

desktop view,

original mobile view, break points, new desktop view.

And again, what this is doing is trying, is trying to get the as much information as you can higher in the screen, right?

So we're sort of limited by mobile devices to have to scroll a lot because there's images to scroll past or scroll through our videos to look over

before I get to the next block of written content. So that's part of the expectation here. But

if we can, we have the space to do so, as we do on a laptop or desktop, we should try to get

as much information as we can above the fold, which is above, before we before we start scrolling down beneath what's visible at the bottom of the screen. So this will help do that. So this is now in a column in the mobile view.

The orange boxes are boxes are in a row.

This is both rows and columns

for the gallery items

that's been flattened then or arranged simply into a single row in the desktop view to kind of bring that to lift that content higher and on the screen.

Okay, so notice we just are redefining the features in gallery

and just the grid template columns layout. So we went from one FL, one of our

in the mobile view, or like for the feature section,

we're going to the repeat three comma one fr, which is

a more complex way of saying the same thing as we this

is a more concise way of saying what they Probably should have done instead.

One fr,

one fr, I Yeah.

Okay, so to be a little more parallel to this, so we started off in the mobile view

with a

single column of one box per row.

Here we have a single row

of three equally sized boxes,

right? So it's basically doing what the grid was the Flexbox could do, but we're doing it all inside the grid method, which is, you know, helps it be a little more concise instead of having to combine both.

So what is what that we had here originally says the same thing. So we had repeat three one Fr. Here

is the same way of saying, one fr, one fr, one fr, so one fractional unit

followed by two more fractional units of the same size.

So then the same thing is happening here. We'll leave this in text. So this is basically the same as saying one fr, one fr, one fr, one fr, so one of our repeated four times. So what starts off as two

FRS, fractional units here should go into one row of four fractional units. So

so what I would suggest you do, I won't do it now, but what I suggest you do is to add boxes

play with the number of FRS per

per display, per layout, so per mobile layout versus per

desktop layout.

And then play with the width the numbers here relative to each other. So you can bet you can play with sizing

by changing the value of one of the FRS you.

Yeah. So right now in the mobile view, this is the this is the feature section. Mobile view of the boxes are all the same size, but if you want to, you can have

the middle, the middle, the second box of the feature section be three

times as big as the other two boxes. So it's being divided into

five, five units. Three fifths of the of the unit

belong just to the width of the feature two box.

So I'll go ahead and return this to the original. I'm

okay, so that's that's pretty much it for this tutorial, right? We've looked at an example,

a couple examples from Vogue and Patagonia out in the world, the who are very different audiences, very different sites in terms of the content, but are using a similar underlying sort of structure

that's not so far off from what we have here,

right? So this is kind of a, not a universal form, but kind of a general sort of we're looking at, kind of the design in a meta level, so kind of a higher, higher view of the commonalities between the web page designs. So these wire frames help to illustrate one of many sort of broader templates that are that are commonly in use today. And so

what we'll start playing with in the next set of videos is we have a page now that's been roughed out.

We have the boxes then being assigned different purposes or different functions. So navigation, Banner, image, you know, primary content, secondary content, perhaps most time sensitive, most current content, interesting, but maybe a little little more dated content here, possibly. So there's a hierarchy that this helps to suggest it's a

matter of consistent user experience, because they're going to expect navigation at the top. They can expect a strong visual impression being made with by a banner.

Then we have room to imagine. Then where do our things go? Okay, so we've moved from this broader design to then how should we handle the elements, textual elements and visual elements that go inside these boxes?

So one way I talked about was image sizing, but to also text sizing, text formatting will be part of our next set of videos.

Thanks. You.

Transcribed by https://otter.ai

## Week4_0_otter_ai.txt

Speaker 1  0:04  
Steve, hey friends and neighbors. Just a few quick things to touch on as we begin our  Work for Week Four and the final project of the course. So if you'll give me one moment, what I've been available to you is my version of essay that I wrote shortly after my brother died as the content of the larger essay broken into sub pages with images embedded in each page. Navigation is responsive, as we've said it before. So it goes from a row to a column on mobile, it has the features of the both flex and grid put to a purpose for my purpose. So we have the navigation here that is reproduced in my example, by the by the feature buttons here, these are more just images for decoration and context, but they don't they're not linked to anything currently. So I think this is certainly more sophisticated than what we did for week one by a good bit, right? So the contents, I feel pretty good about. The navigation is making sense. The images are also contextually relevant, but visually, it still doesn't look so professional. So I will through the course of the videos of this week, I will, I will go through through three major improvements, one, to the navigation itself, to make it more, even more responsive. I'll improve the way that the images are handled and the way their size, know the text is handling sized, and then ways to check for accessibility concerns that we may we may have missed. And thirdly, then we can go do some file management and file preparation in our local folders to get that ready to go. Okay, so question, pressing the file shown finder button will take you here to your local view your local folder. So this is grown quite a bit since you last had a peek at it, but this is then the files for my sample site I just shared with you. So what I want to do next is preserve these for further refinement for week four, then also then archive the current version in week three. So I have week three here. So I'm going to just do is copy highlight all the files currently in the root folder. So I'm doing Command C to copy all the files that I have highlighted. Can I go into the Week Three folder and then Command V to paste? So I have two duplicate versions right now, but now we can update these files here to reflect the week four refinements. Okay, so we need to have two copies, so one archive version in week three, and then one editable version will use for week four, which is available here. Okay, so let's, let's get into even more advanced, responsive navigation, right? So.

Transcribed by https://otter.ai

## Week4_1_nav_otter_ai.txt

0:00  
You. Okay, so let's get started on the week four tutorial one, and it should be enhancing responsive navigation, because we've already have responsive navigation in place to a degree, but it's an older way of doing responsive navigation. We have a more contemporary way that uses what's called the hamburger, right? So you'll see that in this materialize in this video. Just one thing to keep a note, we'll have to do what's called more frank encoding. Instead of getting a whole structured html page of content that will copy into our own projects, we'll need to sort of assemble and replace things more piecemeal, right? So going slowly, going carefully, step by step, is really kind of important to make sure things are functioning properly before you go on to the next step. Make a small change test. Making the next small change test as we quote, unquote, Franken code, or piece together outside code into our current project, right that you're gathering the outside code, the code that you're gathering here. So you'll notice that this does not get a full HTML page because you already have one set up for your home page. But this gives us a way of rebuilding our navigation. We're not starting from scratch the way we have before. We're modifying what we have currently with what the code sections of code we're finding here. Okay, so really move very slowly. Control Z, or Command Z, will take you back a step, or two or three or four, if you need to undo some changes you've made. And you also things go really south in your local files, you always have your repo, your archive version and Week Three to to refer to you as well, to call back on prior versions of your site. Okay, so let's open up the project in VS code.

2:00  
Okay, so we have, we have the archive version here in week three. We'll ignore Week Four for now, and then we'll play with these files here, right? So we have, and the other your files will be named differently than mine. You'll, you should have an index file as your homepage, like I do, should also style that CSS file. Okay, so let's start with our homepage, and let's update the navigation. We're really just updating my lines, 14 through 24 so 10 lines. So I'm gonna so these are the links that I have for my current version of the Week Three projects. So my current draft, basically, of my remediation project. What I'm going to do is clip out the nav and the UL opening tags and then the UL and the closing tags. So I'm just leaving the list item, Link, HTML content here. Okay, so let me go. Let me tab down below. Tab down further to make some room for the new nav section. Situation. Okay, so I'm grabbing the code here from the tutorial, and I'm pasting that in the blank space I have here. I'm

3:26  
deletes what's came out the list items that are from the what we just copied. So I'm deleting this item content from what I just pasted in, and then going to replace it with the content that I had from before. And if I have duplicate versions, I can just get rid of the ones outside the ul tags. So copy this, cut it out, and then paste this between the ul tags. Okay, so this part right here, so you can see the screen is not vastly different. We have the UL has it as it has a class called Nav menu attached. The navigation itself has a main, main nav class attached. And then there's other things called ARIA labels in place, right? So an already label here are over here. So our audio labels are for accessibility purposes. Are used for accessibility purposes. So when screen when screen readers and encountering a form, a form element. So you can think about a Contact Me form, or some sort of feature like that. You use an ARIA label to identify what that feature is supposed to accomplish, right? So, so let's before we. We deal with the CSS. Let's look at what things let's review how things are looking so far. Okay, so some additional content came over with the copy and paste from the tutorial. There is the my website, and then there's this, this checkbox, which we don't ultimately want, right? This is not professional looking and just redundant and not helpful. So that's taking that's happening inside the nav, just below them, the main nav tag. So the div class equals logo, right? That content there. I'm gonna go ahead. Go ahead and clip that out for now, the white square should go away once we start adding CSS, so we'll see if that, if the CSS will be borrowed, takes care of the white of the white square. I'm

6:03  
so we'll copy this, and then we'll double check to make sure it's not redundant with what we have already in place. So let's go ahead and copy this, which is thinking in terms of mobile first. So it's a good thing, it's a helpful thing. So that'll be going to our CSS file. So I'm going to paste it at this very top, and then we'll check to see if anything's redundant.

6:42  
I'm okay, so doing after a quick scan to make sure there's no redundancies that will be conflicting down the road, I don't see any. Let's see if the body has been defined elsewhere. For example, I'll just do a quick page Command F to see if the word body is showing up. Martin wants it doesn't. Let's see if main nav does. I'm main itself will, but main nav shows up just once. Okay, so this is probably not redundant, so we made a small change. We've added some, a few lines of CSS. Let's see if that makes made any difference to our so it's changed the background to gray, which is a problem, but we will address that. Okay, it's putting the it's moving things to the right. Still has a little check box will work to further deal with so the background color is coming here. Is here from the main nav. So let's change that. I'm gonna change that to my primary colors, which is hashtag for d1, 979, just one hashtag that helps. Okay, the easy fix so you may have to change your background color here, depending on which how your original Week Three project was set up.

8:08  
So let's continue. So I'll make some more space between why just pasted in and what I had from before, and we'll add in some more CSS from the tutorial. Step Three will create the hamburger as promised. So I'll put that below the first paste of the day, and we'll see what happens. There. Still may not be taking place yet, but we'll we'll see what happens.

8:42  
Oh, okay, so the pesky little square turned into a hamburger. It's just a element that's doing nothing right now, nothing happens when I click on it, but the toggle, the toggle square, the checkbox that we had here is now what's called a hamburger, right? So we are step making baby steps towards this being a drop down menu for for the navigation bar. Okay, so this is what we just pasted in, hide the check box. So that was taken care of by the by the display, none in the main toggle, create the burger icon itself.

9:34  
So now we need to add some of it more to have it actually combine this content inside this element that have the animation of the opening and closing, so a bit more

9:56  
basic net again, beneath one of the two blocks I pasted earlier. In this tutorial.

10:07  
So now we have a hamburger and no navigation at all. Or do we? We have it showing up behind the patient. Okay, so I will make that. I'll fix this really quickly, but this is it is functioning as just the elements going behind, behind the banner image. So it's dropping down, but it's being blocked by the hero graphic. So don't be too scared. So we talk about two dimensions. We talk about the x and y axis of two dimensions, right? So, vertical, horizontal, we've discussed we're so we're talking about X and Y axes in that in that context, well, because we're also dealing with possible layers of content, text on top of images. For example, we're talking about sort of a 3d space, not super deep or rich or broad space, but still, there's if you talk about drop shadows, if you're talking about layers, layering text on images. We're talking about going into the Z axis, so we're going towards the viewer, so the pictures in the background, text is in the foreground. You can say that the Texas is moving towards you on the z axis. So by adding a large number here to the Z index in the nav menu, we're basically pulling it, playing it well, well in front of the background picture, which was dipping, dipping behind in the the original tutorial, the original example. So here's my navigation, right? So it was there. It's been there all along. It's just it was being it was going behind the image, instead of in front of the image. From this off. It goes behind the image. Turn this back on, it should now go in front of the image. Okay? So the number doesn't need to be as big as 1000 so 100 would probably still have the same, effect.

12:28  
But we just added, we just positioned the drop down navigation animated, animated feature, the drop down piece of it, we pulled it forward towards the viewer a little bit, so just to make sure it doesn't compete with or go behind the background image in the hero itself. Okay? So it's working, and it's working in mobile, which now notice how that really declutters the space, and so then it's an element that people will be familiar with from other web use, right? So it's not a new feature entirely for for most, if not all, of us, we know what to do when we when we encounter one of these. So it's a little button that's a clear feature that's that's allows us then to sort of open up or close back down the the navigation for the mobile view, but we don't need that same feature here. It's not bad to have it here. It's not awful. We still know what to do, but this could be filled in more sensibly. So let's have this return to more of this kind of navigation in the purple box with the next bit of CSS. Let's move to step five, and then we'll get things to work differently on desktops and other kinds of tablets. So we'll set up the media query section. Okay? So just paste that. Actually paste that at the bottom of the page. So we already have a media query section, so let's go ahead and paste it beneath our at the very bottom, beneath our previous media query section. And let's test that, and we'll discuss what's going on. So we have it spelled out more fully in the desktop view, but then we get down to a certain width, which is probably 768, we have the hamburger show up. Still works, I hope, yep, still works in the homepage doesn't work on the sub pages yet, because we have to make these changes in the sub page as well. But in the homepage is. Working nicely. Okay, so let's go ahead and make that change then. So the CSS is all in place for this tutorial. We went through step five, or onto the key takeaway. So we've got the code we need from this tutorial, which now wasn't very much, and we're all pretty familiar with a couple exceptions, like ARIA labels and Z index and a few things we haven't touched on before, but not too bad overall. And so let's then, while we're here, the CSS is fine, let's go ahead and grab just the nav section of the of the home page of The index page. So I'm going from lines 1538, I'm so copy that from that we just got working on our index page, and replace that on each of the sub pages. So just in just the nav content.

16:21  
So base definition now work, and it is So go on to the Next page. I'm

17:22  
the same this sub page. So all the pages should work now in terms of the hamburger navigation on mobile, which is the primary view right the original view we're designing from here out. So notice we started developing this first before we went on to this responsive feature.

17:49  
So we will spend the next video on images and typography. So I'll meet you there. You.

Transcribed by https://otter.ai

## Week4_2_images_otter_ai.txt

0:06  
Hey, crew just picking up where we left off last time when we developed

0:12  
an even more responsive navigation into a hamburger with our Week Three remediation. So this is all in preparation for week four. I

0:24  
so one pointer in general. So a digression, but it's all in the interest of having the confidence to code your best final project

0:33  
if you go to any website. So I'll use mine as an example. But this will work probably for most websites, if you right click, and instead of going to inspect, as we have before, go to you go to View Page Source. Instead, you

0:47  
can see, initially the HTML for that page.

0:52  
So if there's a feature of a page, you don't quite understand how is, how is constructed, you can, you can take a peek at the back end by right clicking on the on the

1:02  
anywhere on the page going to view page source,

1:08  
and that'll work for any page that you go to.

1:16  
But what's nice is that you can also then look at the CSS too, because it's also linked here.

1:23  
So we talked about Frank encoding last time. So my week three remediation is changing quite a bit into week four. So it's not how it will How is not in this final draft as as as you currently have access to it,

1:38  
but you're welcome to

1:41  
to to Franken code. Pieces of my code into your project at this point, if that's helpful to you, but there's a piece that I've done that doesn't quite match what you've done and you like what I'm doing. You may you may do a view page source

1:58  
and grab the code you need. Okay, it's common practice.

2:09  
So if we take a peek at the my site from the end of the last video, the navigation has been refined so that it becomes a hamburger

2:20  
and the mobile view

2:23  
still operating as a function navigation but but

2:28  
less cluttered in this bar when the screen is narrow on a mobile device, we're thinking about mobile first as always.

2:36  
So that's working. Well, that's been one nice, further evolution of our Week Three remediations.

2:47  
So this video will focus focus primarily on images.

2:52  
So part of what's keeping my site from looking more professional

3:01  
is the lack of alignment. Here. So we have alignment at the top and in the columns. That's that's okay, but the the alignment would look even better if it was top and bottom align throughout, right? So we have two sizes of cards here, three different size cards here, right? And it'd be not nice if all six cards were the same size. So what's causing this discrepancy between the cards is the way the images have been sized and placed, so they're in there sort of with their natural aspect ratio. And that's right. So if you look at the the way the images are inserted, they're doing what we've done before, which is, which is the beginning of a good practice. So we set the image images to 100%

3:44  
width,

3:46  
and that works well by itself in certain contexts,

3:51  
but it's obviously not really doing the trick here for these cards. So the idea is to get the cards all the same size. The woods are being handled pretty well there,

4:04  
but the heights are erratic. That's a ding against my professional appearance. Let's see what we can do from the tutorial to see if we can rectify this problem on the homepage. Okay, so I have the tutorial called up. The URL is linked in detail with the URL, so I have the product already opened up in VS code, so make sure you're in the same place. So there's a universal kind of image, image statement that we need to add that's that you'll see again and again and again, that's really is very time saving in the big picture. So I'm going briefly to my cell CSS file and go to the top of my page, and I'm going back to my tutorial

4:42  
and grabbing the essential the essential rule in step one, I'm

4:48  
going to paste that maybe third from the top, so beneath Asterix, and then body, and then now image,

4:58  
and notice another comes.

5:00  
With it makes all images responsive by default. So to kind of read through the CSS itself, everything in the entire site that's that's tagged IMG, set everything every time that the IMG appears. Make sure that content is has the value of 100%

5:14  
with this property, and set the basically set the height automatically in relationship to that

5:21  
to the width it's taking inside that box. Okay, so what we've been doing

5:28  
with our images

5:30  
throughout the whole our whole time working with images so far was that we've been doing this

5:38  
right?

5:40  
So for now, go ahead and knock those out.

5:44  
So these are the the card images of the homepage

5:51  
here. So this is basically replacing what we're deleting from the feature section I'm

6:00  
uh,

6:04  
let's try something I had to do, Command F,

6:07  
I'll type in with

6:12  
equals 100%

6:21  
then I'll replace it

6:25  
with just a space. So every time this occurs on the page, want to get rid of all of them at once. So every time that occurs on the page, we'll just hit we'll just

6:36  
replace it with a space.

6:40  
So that's all of them, okay, so go find, then replace that you have with Microsoft Word, or we'll work here too. So I just did a

6:51  
command, F for find.

6:55  
I typed in what I wanted to find, so the search term basically, then I replaced it. I opened the arrow, replaced it with a space to get rid of that element throughout the whole page, right? So make sure you have the whole phrase you want to delete typed out properly before you replace it with anything else. Okay, okay, so that shouldn't change the view of our page considerably.

7:21  
Problems will still persist. Yeah. So it just has been,

7:27  
we've outsourced

7:30  
the image sizing itself to the CSS, which is what CSS is for, right to control a house if something is handled throughout the whole site. So we have it's more efficient that way. And also, one thing that will help, I think, which is creating part of the erratic sizing of the heights, is the

7:50  
text. That's the first sentences of the sub pages that these are linking to. I don't

7:57  
know if that's necessary, the headings, subheadings will help,

8:03  
but I'm not sure if the the text itself is is all that and all that enticing.

8:09  
And you may not have this already in place, but I do so going to go ahead and kill the paragraphs in each card, and

8:18  
that should help part of the sizing issues, not all the part.

8:26  
And again, be careful about what you're cutting out so it's going from P to P slash P and nothing more.

8:36  
So that's helping. But some images are landscape.

8:41  
Some images are more portrait, and that difference in aspect ratio is making making a sloppy mess here, still even so the text is is helping

8:52  
to make a little more consistency, but still not enough. Okay, so let's see if we can change the sizing of the images themselves to to be a more consistent size. So let's see if we can find some strategies to resize these images here so that they're more consistently no matter what their original format is, they'll still be consistently sized across all all six cards in this example.

9:22  
So there's basically a foolproof way of handling this

9:27  
that is a bit of labor, but totally worth the labor in terms of a professional outcome for your site.

9:34  
So what I've done here, what I've done prior to the video, which I suggest you do on your own time,

9:42  
after I go cover this next bit of instruction, pause the video, and then create the thumbnails, and then come back and then put the thumbnails in place. But I have my I have at least five of the images here. One I couldn't I couldn't convert very easily, but I've made square versions. I.

10:00  
Of each of each image,

10:04  
except for the Billie Holiday picture. So different sizes still, but they're all square, so when they're in a smaller container, they all will scale to the same size. If you know Photoshop, you can do in Photoshop, if you if you know how to use preview as a Mac user, you know that you can do it with preview. I made my changes using Canva.

10:28  
Photopea is a free, online sort of version of Photoshop, even though it's not WW product. If you know Photoshop, you can use photopia for free and use the same skills. Basically, I haven't tried Squish, remove, or the other one, or the other ones here. But Canva is very simple. It took me five minutes, less than five minutes, to recess these

10:50  
images. So what I what I did then, was I put them into a folder called thumbs, so I know precisely where they are and what, what where and what they are when I see the folder.

11:03  
But then I put the put these folder, this folder,

11:07  
I'll copy this folder inside my images folder.

11:11  
It should work, that should work as a drag and drop.

11:18  
So now there's a sub directory, subfolder called thumbs that has then thumbnail versions of

11:26  
the images that are here and the the or the feature cards.

11:34  
Okay, so let's so in turn, that is not new. We have we have a new subdirectory to pull the image from but otherwise

11:43  
the syntax will be very similar to what you've done before. Let's go to the top.

11:49  
So I go into the sheet

11:53  
music.

12:01  
So it'd be, in this case, it'd be images slash thumbs, because that's going through a second sub directory.

12:13  
But we can insert the image the way we have other one, the way we have previously. I

12:23  
so we'll do the clef image.

12:36  
So there's I have five images to replace. The sixth one is not

12:41  
ready yet, but I'll fix that. But also I think it'll help to prove the point by not having it in place quite

12:49  
yet. So we'll see how that looks the last one shouldn't we don't have available yet?

12:54  
Okay, that's a fair bit better,

12:58  
because the other times the images were cropped, so heads were and faces were chopped out by cropping them myself, as I have for these images. It's not not the Billy Holiday picture, but the other five images, I have control as to what gets preserved and what gets cropped out. So the way it was cropping before this image of this choir, there are faces that are half cropped, which is kind of not cool to do. It's not sort of polite to the human subjects that you have in your photograph. So I see I have some people here with their shoulders. We can identify them otherwise, but there's no faces that have been dropped out,

13:34  
right?

13:37  
And then this was this piece had the title of the song cropped out is just the the the

13:45  
musical staffs, which is fine, but this is this helps to kind of put this into context too. It's more it's a reference inside the essay itself.

13:54  
So this is much cleaner as line. It aligns vertically and horizontally, top and bottom, except for this one image that's not been been addressed. So this is much cleaner, much more professional,

14:09  
and I think an improvement, and so it's still responsive.

14:16  
So they become stack cards. You

14:23  
and this, even though this picture, this black one picture, is much larger than the color pictures,

14:29  
they don't look that. They don't look differently sized here, because they're being controlled by the CSS in a nice way.

14:35  
So again, I hope you've paused the video at this point. I hope you've created thumbnails for your cards so you have that really nice control over the sizing. Control over sizing gives them more professional appearance, more refined, more polished appearance, which I think is really important.

14:58  
Moving to step five, I.

15:00  
I've already done some of this work previously in terms of cleaning up the textual clutter,

15:04  
just to kind of keep those boxes smaller, but also a little more tight, a little more easily seen as a group, instead of just individual things that are pushing down the elements below.

15:16  
So what I'll do here

15:19  
is make another refinement, just to kind of which is more semantically correct than what I have currently.

15:27  
So right now we have

15:30  
square that I have my square image, except for the last one, which I still

15:34  
need to work on. We have a reference to the page that these are linking to, which is nice. So it's kind of a more graphically enhanced version of the navigation above,

15:49  
but I think these are the text here. Are tagged as h3 when they should probably instead be tagged as h2 and they're a little bit too close to the image above. So create some space from the age two, from the subtitle, subheading text and the picture, I make the subheading text itself larger.

16:08  
So first, let's make the text larger, which is, you know how to do. So let's see.

16:15  
Let's try this. Age three shows up. How many times?

16:19  
12 times. So six images, six links. That's right. Okay,

16:24  
so we'll change, we'll, we'll replace h3 with h2 it's

16:36  
a little more, little more legible, little more

16:42  
I'm easily read. Okay,

16:48  
so this is step five. I'm referring to right?

16:53  
So I'm changing the h3

16:56  
to h2

16:57  
but also I want to add a little bit of spacing

17:01  
on top of the

17:05  
page two

17:08  
to create some distance between the text and the image above it.

17:17  
So this is also part of the Features section I'm I'll add it here just above the thumbnail section.

17:31  
See if that helps at all. It is working. Okay. Again, you sort of see the issue is actually made worse with the holidays picture, but it's fine with the remaining cards.

17:47  
Okay, so Well, let's do one more thing while we're here. It's not a matter of image selection or image sizing, exactly, but it's a matter of having the larger image region look more attractive than I have here. Orange and purple may be fine together, but I don't care for to my context. I don't think this should be more closely aligned with purple than something quite so contrasting as orange.

18:12  
So what I will probably do is try to change the Curt the feature card background color

18:18  
and see what options I have there. So feature,

18:25  
the feature, div, background color.

18:28  
Click on this.

18:35  
Find a shade of purple that is more pleasant. I'm

18:46  
so all I did was find the features div, and then my CSS,

18:52  
five background color property changes value by using the color picker. Here I'm

19:00  
and

19:04  
that's a little less. That's not great, but I don't know it's better. And let me go ahead and do this too. Let me go ahead and change

19:13  
the homepage image. It was me about 18 years old, a lot more hair, lot darker beard. Let's go and replace that. So there's nothing that you can that you wouldn't know how to do. But let's go ahead and go to the hero CSS,

19:28  
which is here,

19:32  
and let's replace it with another one I have in my folder, which

19:38  
I think is a cooler picture, is more much more recent, though not totally recent. The picture

19:46  
itself, I think, is a better choice, more interesting composition, all this, all this sort of stuff,

19:55  
because we're thinking mobile first. One thing I've observed is that it's.

20:00  
That of doing a text wrap. Oh, that's that's fine for the desktop view, but this becomes tricky when we're talking about mobile, mobile design, if we're thinking mobile first, this doesn't work very well.

20:12  
So just to make that point again, text wrap, text image, we understand that sort of phenomenon in Microsoft Word, and that's fine for Microsoft Word, because as a static medium, it doesn't it's not fluid. It doesn't change from printing to printing.

20:29  
But websites change all the time. It's on the devices that they're being displayed on, right? So this kind of arrangement of text and image doesn't it works fine for desktop, perhaps, but does not work especially well for mobile, and we're thinking mobile first.

20:47  
So what works better? So again, this is the text. This is the image. What Works better

20:53  
and mobile, but also works fine with desktop, is to

20:59  
have the image between the image between paragraphs, that way. There's no restocking necessary this. It'll it'll size and scale accordingly, but still be the same stacking of boxes or mobile as well as for desktop. And there's a much more mobile friendly approach, right? Which, which I think we should be consistent with, and try to implement with our with our project as well. So let's capture the CSS first, and then we'll,

21:32  
we'll adjust the HTML to accommodate it.

21:38  
So we'll create, we'll, we'll put in place some image classes so so images that will behave differently given different situations, classified differently because they're being used in different different kinds of PERT and different contexts on the

21:54  
site. So I'm capturing, skipping over this for now, and capturing the CSS first, so we'll see no immediate change, but it'll be

22:03  
helpful. So I think we'll go just below the universal image statement we started the video with

22:12  
and paste it in there.

22:16  
So we're creating three classes.

22:21  
Content image, large content, image, medium content, image, small. So we're kind of setting up we're setting up parameters for

22:31  
we're going to classify images differently based on how we want them to display our sub pages. So

22:38  
that's not going to make any changes immediately to our site itself.

22:46  
But if we classify, we go the HTML

22:52  
and we

22:55  
and we grab

22:57  
what's between the figure tags,

23:00  
and I'll borrow that syntax, but I'll change it for the different page. I'll use it on a different page. So this is the for the brothers playing together

23:11  
page, but I'll go ahead and

23:14  
do jazz understanding.

23:18  
So we're replacing the image that I have inserted Here

23:24  
with the same image

23:33  
and alt tag and

23:40  
so

23:43  
let's preview that page.

23:49  
So it's still kind of big, but notice how the whole score the whole page achieving, now appears on the screen once we begin scrolling. Instead of scrolling over more of the of the image we're getting, we scroll straight to the text. So it's not ideal still, but this, it is an improvement.

24:08  
So a more square, more landscape picture would probably fit better here. This is that this is so dramatically portrait in orientation and aspect ratio. It's not the best choice for this. It should be crops or of a different landscape orientation instead,

24:24  
but it still does work better.

24:27  
But then let's, um, let's add

24:31  
some images in between two with with different classifications. So this is being classified as content image large, which refers to

24:41  
this CSS here,

24:45  
and notice this is but there's a drop shadow that's being added to it for a little bit, little bit of depth and dimension. Was not flat on flat a little bit of spacing, a little more,

24:56  
little bit of texture almost introduced with this.

25:00  
Shadow.

25:02  
But let's add another image. So I'll try different page.

25:09  
So I'll try playing together.

25:12  
There's a reference in the page to

25:19  
hand position, so let's, let's put it, let's put an image

25:23  
here in between paragraphs. That's more of a medium, medium, medium class.

25:33  
So here's the hand, the hand position reference. So how the hand holds the guitar neck, the bass guitar neck.

25:42  
So do an image in search the way we know how.

25:46  
So we don't want the width.

25:50  
We do want the alt tag

26:00  
and we want the content Image class to be medium.

26:12  
So imagine again, that will look very much the same

26:17  
on mobile. So no restocking necessary, because it's already in a stack, mobile, friendly first, which is important.

26:25  
Okay, all right, so one thing that that I'm actually missing from the CSS code or the HTML code that the tutorial offers

26:36  
is the

26:39  
larger figure phrasing. So let me actually do this. Let me grab this here.

26:49  
Because notice there's the additional tagging of what's called fig caption, which is basically a caption for that figure, a caption for that image, right?

27:01  
So let's go ahead and capture this and see how that looks relative to what we just did. So

27:09  
this is what I just pasted in.

27:14  
So preview that.

27:19  
So the images just appear the same because they're they're classed the same, but this has an additional description, so it's not an alt tag, it's, it's, it's just readable text, but

27:33  
it's just a little little more bit of information in the immediate proximity to the Images describing right? So good use of proximity, little bit, little bit of additional detail that you'll need to, have to belabor or elaborate on in the paragraph itself. This is good.

27:51  
This is better.

27:53  
This does the job.

27:56  
This is more complete. And this is the code that you can get from the tutorial, so that I got from Step five, and

28:06  
then the media query is associated with this step.

28:11  
We should go in the CSS file, go ahead and put at the bottom of the media query section.

28:20  
This is all media queries. I believe it should

28:40  
be so nice and responsive,

28:45  
looking more and more professional.

28:48  
Homepage is improving. This will address this in the next video.

28:54  
Sizing more consistent, not perfect. Here.

28:58  
Color is to be worked on further,

29:05  
but it's becoming more professional, so

29:09  
okay, we'll work. We'll work on additional refinements, especially typology, working with text in our next video, i.

Transcribed by https://otter.ai

## Week4_3_type.txt

0:05  
Hey, friends and neighbors, welcome to the final stretch from further steps down the rode towards the final stretch or the final the finish line. We have our site as we left it, as we left it last time, as we worked on our images and our thumbnails and all that good stuff for responsive image design, but now we're going to work on typography. So we'll work first on the the h1 and the hero graphic and the paragraph of the hero graphic. We'll make improvements along the way in terms of legibility, in terms of professional look, in terms of all that good stuff. Okay, so one thing to keep in mind, we have a tutorial here as before, but what we'll do in this case is be a little more. We'll take smaller steps and not and not grab all the content at once. So yeah, the ability to copy the content here and one click for this tutorial. Don't do that, please. We need to get rid of some code before we paste in their new code. So we don't want to create overlaps, redundancies or conflicts by adding this new content here. We want to replace some content instead of adding to something entirely. Okay, so I'll prompt you what to grab when, but don't be doing a full so don't be doing this right here on this tutorial. It's a nice feature in general to have for coding on a website, not appropriate for this tutorial. Okay, so let's go ahead and look again. We have h1, and P, so a heading, text and paragraph, text as styled specifically for the hero graphics. That's what's being determined here. So what I suggest you do before you begin anything is find your own references to each one, hero h1 on your pages. So I'm doing Command F on my control. If I do search, type in Hero dot, hero h1 and sort of see how often that comes up on your page. For me, it's coming up twice. One has to do with the positioning to the right of the content, so being right justified, basically, the other one has to do with font sizing, right and so both hero one and both hero hero h1 and hero Peter, side by side here, which is nice in our example here, they're both what we want to replace in this next step. So I'm gonna leave the leave the positioning statement alone. So don't touch this. I'm just highlighting this to indicate we're not we're not leaving the position relative in the text align right. We're leaving that alone instead we're getting rid of the font sizing and bottom margin CSS for hero one and hero p here, so simply clip out and delete entirely that section. Okay, so now grabs the basically the top half of all of the of the first step of the current tutorial. So the comment is fine the hero, h1 h2 make sure you're getting the closing Curt bracket or the closing curly brace. To copy all this here to the top, just the first half, and paste that into the space we just vacated here. Let's look at the effect of the new CSS before we talk about what, what's it's doing. So it's already larger. It's larger still than before. Both the h1 and the P are both larger, but notice it is responsive. So it wasn't responsive before, but it is now. It was sized helpfully in both cases, but it wasn't responsive to the browser with here. So we're using a new kind of approach that we haven't encountered before or haven't talked about before, but it's actually very time saving once you get the hang of it. So we're using what's called clamp in both cases. So in the parentheses here we have we have three different numbers, three different measurements. Think about one ram, one REM as being the standard default default font size. If the standard font size is. Uh, 12 pixels, for example. So that'd be one REM equals 12 Pixels. Then two REM would be 24 pixels. It'll be twice the size of this, of the of the standard font size. So then four, four REM would be four times 12 would be, what, 4848 pixels. So this is a range here. So it's going from from twice the default font size to four times the default font size. It won't grow indefinitely. It'll stop after a certain point and not get larger. Okay, the number in between, then that's basically saying try to keep it at 5% of the browser with so but, but don't go larger than four REM, or don't go smaller than two REM. As not 5% the whole statement. It's 5% that each character, each character should be, should be no larger than 5% of the browser width. So it's not the whole word that's taking it taking up five VW, five 5v or which are 5% of the screen. It's each letter. So this by itself should be no should be ideally 5% this by itself should be ideally 5% and the same thing that applies, then to the font, the Paragraph Font size. So not a paragraph throughout, but just the paragraph that's appearing in the hero tag. Give that three so 3% instead of 5% per character, but don't dip below 1.2 times the default font size, and don't go larger than two times default size, so little more to process. But what this does in the big picture, and the more you use it, the more beneficial it becomes, is that you don't need to have a separate media query. You're just kind of saying, this is the media query here, right? This is like saying that gives you a range to gives the browser a range to work within so instead of two separate CSS statements above the media query and below the media query, we have the one statement handling both both extremes of that range. So it's more fluid, right? Because it knows what to do in between, which is kind of cool. So that's what's happening, both here and here. So let's go on to the next part of step one. Let's do this other P by itself. So let's see where this because right now, the paragraph text that we have should resume, should rearrange, in terms of the browser with but the sizing itself doesn't change. So notice how the browser resizes the the hero content, but the content is not being resized. It's being relineated but not resized. Let's

8:10  
affect the paragraph styling for for all the content in the whole site that's tagged as P and make it responsive as well. And that's we're also using clamp, right. Okay, so I do right here first that's going to copy the peak curly bracket. Go back to my code and do this fine as a final place for that. So I have this here, which basically is an old version that I want to replace by this. And again, it's using clamp to make it the font responsive. So I'll clip out the global paragraph sizing and paste in what I have, just this one part of step one here. Then I go to do my review, and I as if it does, does begin to resize once it gets down to a certain size, right? So, nice and big, increasingly small. Okay? So the same, same principle in place that we, that we put, that we use for the hero P and the hero h1, we're setting up a range of values with an ideal in between. Okay, this one probably doesn't apply wholesale, so we'll for this last step of step less part of step one. I'm going to leave this alone actually, so I'm going to basically skip this last step entirely. So again, it's important. The baby step so we can go, we know not to introduce code. We don't. So we simply don't need, okay,

10:10  
so one improvement that we can make next, which will affect both the main content but also the sub page content and positive way, in a consistent way. There's some padding going on in this paragraph here, but it's not the margins like we set up for the homework two for your second week exercise, which was much something, much more attractive, right? Okay, so let's go on to first section of step two and just get the first statement. Okay, so copy that here first, but then let's do a search for.sa hyphen text, and that shows up twice. So this is background color and padding, so let's leave that alone. So for essay text, the max width and the margins have not been set up previously. So this will be new CSS for this sheet, so nothing needs to be replaced on the essay text side of things for main, let's see what we have for main, and this will show up several times. Okay, so we do have instructions for margin and max width for the main page. Okay? So this is what we want to replace, but we can replace this. So make sure it says max width, margin, padding line, right? So there's a lot of mains being referenced to seven total. Make sure you're using the right one. The one is just main by itself. That says the Max was 800 pixels. Let's kill that and then replace that with what we just copied and see what happens. Wow, that's a big difference. That's a nice difference. So the so we have all expense in a second. We have nice, healthy margins that do should rescale so they're smaller here, larger here, keeping the reading pathway manageable. So if it's stretching the whole width of the screen, might become harder and harder to read on big screens, but this kind of keeps a nice little column in the middle for the content. But also we should see the same sort of effects consistently across the sub pages too. So notice how the text is showing up in the same same column. Yeah, yeah, that's a nice consistency.

12:48  
Okay, so what's happening here is kind of interesting, but again, it's super efficient in terms of eliminating a need or reducing a need for the secondary media query. So So for both essay text, which is the content here, the content here on the homepage, and for then the text in the main section, which is the body content of the sub pages. So this is the main content here. This is the essay text content here have the maximum width of a line of text be 65 characters. So the optimal line length is 65 characters, so letters, but also spaces and punctuation too. So not just not just alphabetic letters, but also punctuation and even spaces too. So and then, once that has been set up, then automatically adjust the left just left and right margins accordingly. So automatically scale that. So here the assumption is these lines are not going to get longer or much longer, but over the ballpark of 65 we still adjust our margins accordingly. So it's also responsive. Then it's automatically adjusting based on how many lines or how many characters are being used per line. And then what's nice here, because these two, these two tags have been combined into one. All the body tags, all the important body tax is being styled the same. Back to our front end tutorial. So we have then the p tag revisited here. So we changed the paragraph CSS to make the font size responsive, which we did in step one, so we don't want to replace this now with what's here. In step two, we wanted to just simply add to it what's not currently being used. So line heights already been established. We don't need to copy this. Here. So we want to copy just the margin bottom, which will create nice sort of space between paragraphs. So I'm adding a third line then to what currently is in place. So it'd be a small change, but it would be a helpful change to make the text even more reader friendly. Okay, so one more here, and let's sort of see what's what's being said for the for body in general. So this is just for the major body box, which the visible content of the page. So again, it's not a matter of setting up, replacing what's there. We're going to add to what's there. So all the body CSS is introducing is just a choice of font family which may be different than mine, which but you can use what you want to there. What I'll do here then is just copy what's between the curly brackets,

15:58  
which will purportedly improve contrast of text to the background. Well, looking pretty good, looking pretty, pretty readable. If you skip this step, I won't be I won't be upset. We won't worry about this one. It seems a nice, nice feature, but it's a concept we don't need to talk about right now. So

16:31  
okay, so on to step three, and we have some more probably replacing to do more so than adding whole new sections. So dot nav, searching it for dot nav, hyphen menu for specifically the a the anchored link content. We have no declaration about the font size. Let's see what this looks like first. So let's go ahead and let's see in the font size. So now grabbing the entire statement and replacing with what's there, replacing what's there, we're just getting the the font size clamp statement. Okay, so in this case, we just added this one line, line 130 for me, using the same clamp logic for font size. So go another go no smaller than nine, 9% 90% of the default size. Go no larger than 1.1% times the font size, and ideally keep the characters 1.5% of the viewer width. So the size has been reduced here a little bit, but not in a way, the compromise legibility, because the purple and white still works pretty well here, but that also should then affect the mobile so it should get smaller as we go larger, smaller, quite smaller still, but still legible. Let's do the same thing for each twos. So let's go. I don't have h2 outside this one references and V. I'll go ahead and add it to what the heck, since it doesn't exist, I'll add it to what's there. So I'll go here. I'll go near the top. That's maybe where I read it, just below where I redefine the the P,

18:53  
well, do the same thing for each three. I'll go ahead and do the whole those two next sub steps. Okay, so a lot of these changes that we're making are not immediately apparent, but they are improving the improving the overall, sort of global display of the content.

19:18  
So these two are becoming larger or smaller. The streets, if we use them, will become larger and smaller. So let's see what we can do with the captions, which is the text, the text beneath. So let's see what happens here. So that's how the caption text is showing up currently. Let's see what comes up with caption. So

19:49  
so this should be this caption. Here, this, this the equivalent in our CSS, is the fig caption, the figure caption. So this is the figure cap. Capture underneath the media query. So we'll take this out entirely. Let's see. Let's just take out the font size part of it, so we're reducing the complexity there. We'll find the other reference above.

20:29  
We'll get rid of what's here,

20:39  
and we'll replace it with the larger, more comprehensive statement here.

20:50  
So let's see what that does here. So nothing is available there, but let's see what happens if we turn this off. I'm

21:04  
so this, this version should not be, probably not going to be responsive. It's not changing size, but if we added the thing back in place that should be responsive now, well, subtly So, but still a little bit it's getting smaller. It's getting larger. Okay, so we're getting close, not too much more to consider, okay? Display text then we can skip. We're not going to worry about that. Okay, so we'll do the same thing for the responsive Spacing section in step four, just quickly, same method. We'll look for the what's going on, going on by not here by itself, not hero shows up six times. We'll see if it shows up separately. So we have in the hero just by itself. We have padding right here. So let's change that to here, and it's replacing, I'm sorry, just the one line, the one line from here, from this tutorial. We'll replace the last line here. So the turn this off for a second to show the it's a little more spacing between one more spacing both top and bottom, and left and right. So without the new CSS, with the new CSS, right? Okay, so you'll notice next example, we're dealing with padding, which is the bubble wrap inside the inside the container, we have two clamp statements, right? So the first clamp statement affects the top and bottom, so adding this range top and bottom, and the second is left and right. So instead of having padding top, batting padding bottom, having this value and then having a next line saying, padding left, padding right. Have this value. You just say, you just combine it in this way. So the first, the first value is top and bottom, the padding that goes on top and bottom, the second value is the padding that goes on left and right. So let's see what we have without features to to affect the gap. So that would be the statement here. So if we're dealing with pickle, if we see pixels, that means what's being set up as an absolute, fixed sort of dimension. So not not pixels are not a fluid there's their sets. They're determined. So let's change that one line here. Make sure you in the right place, and change the gap statement here. And just to remind ourselves what the gap is doing in the display, the grid display, we'll

23:59  
turn this on and off so it's the space between the cards. So that's that's cleaner, slicker, more organized looking than this is okay. So this next one we're skipping. So if you're if you've closed your CSS, I know you haven't watched the videos over this section here. We'll then we'll check check out next to see if we can make improvements there. So feature hyphen link. Okay, let's go ahead and skip this too. Again. The Baby Steps are important to make sure we're not creating redundant or overlapping, or worse, conflicting CSS. But also the space ups are important because we then we won't be adding unnecessary CSS too, because there are important one size that I skipped.

24:59  
This. So because the instruction here has been specific to the needs of our site, not to the details of the actual letter of the tutorial, when I add the secret, a secret sort of session here to sort of see if you're following along with the tutorials closely. So here's a secret approach that I don't know will work for everybody. So I'll need to hear, for those of you who discover this, the secret secret content, I'll have you report back to me if it works or not. But we have a feature here. We have not explored that. I think it's time in the course to explore. So we have some a lot of CSS here. It's working nicely for our final product project we're not done yet, still wanted to play with. So I'm going off script here in a way that will add improvements to those who are sticking with me with them through these videos, as a special treat for those who who had the stamina and fortitude to see through all the course content. So the gap has been set up in the cards here, through the line we just added and features, right? But what I don't like, especially in the context of the nice margins here for the essay text section, so there's no white buffer zone left and right of the cards or the card section of the feature section. So I'm going to add one line here. I don't have the code in tutorial, but only the screen out to let you copy it. And that adds some responsive margin, left and right, top and bottom to to the feature section. So even narrows got margin, even wide has got margin. So the line you want to focus on, but type in yourself manually, it's an addition to the dot features, the dot features, CSS is this right here, and you

27:14  
can put, you can put those values, but those the syntax, the logic should be the same, and that's going to answer so The gap, the line above the gap line creates the spaces between the cards, and then the the margin, then sets space between the edge of the of the browser window to the set of cards, in general, left and Right, top and bottom. One more easter egg, which is a super secret easter egg, which is an experimental one. I'm not sure it'll work equally well for all students, because I have a different kind of account than you all have. There's this kind of mouse icon here, which you, I'm sure you played with before. Notice before that will open up copilot, which is a feature and GitHub that's relatively new but allows for AI assisted coding. So let's do some cleanup. Let's use, so set, I believe your model set to 3.5 if you have the option here, choose, you can use, you can use whatever you want to. But if you have the option, choose agent. So this can be used in a variety of capacities. But right now, because we've been working with CSS, CSS primarily on this tutorial, throughout this last few weeks of the course, really, there's a lot of content here. Is doing some very wonderful, some very cool things for our site. But also it's getting a little bit unwieldy as a copying pasting is going on. So we try to try to clean that up a little bit today by being a little more intentional, but there's probably still some redundancy that we can capture That's right. So the issues that that my copilot agent will will identify may not be the same ones that you'll see, but I want to show you the kinds of prompts you might use to help clean up your CSS, and by cleaning it up, makes it more easily read and more easily maintained down the rode with your I would choose have The CSS file visible here in the code code pane. Set the agents to the cloud 3.5 so I'm telling you, making no changes.

29:35  
Review my CSS or redundancies.

29:47  
Okay? Agent code can get kind of bold and brazen and make decisions for itself sometimes, so I'm reeling that in by saying making no changes, so don't, don't change anything. Just identify if there's any redundancies in my CSS. You. Hit return and see what comes up.

30:12  
Okay, so again, what's my feedback here may not be identical to yours, because you've been coding your own project. I've been coding my own projects, so our choices along the way have diverged at some point, inevitably, which is totally fine. If our sites are to our satisfaction, it's not a problem. But our code doesn't need to be identical at this point. It probably certainly won't be by this point. But the prompt that I I want you to play with, this prompt here making no changes, review my CSS for indices and sort of see review what it says, right? So I have duplicate image styles that have sort of creeped in over time. I have multiple margin declarations.

31:09  
I have some media statements that have been redundant and stuff, okay, and there's there's more. So this is totally your option. There's good reasons to value what AI can do. There's reason to be suspicious of what AI can do. So what you can do, if there's one thing that you want to you can have it. The what is finding is numbered. So this, this, like my number one is, is, is clearly a conflict, right? This is competing CSS here. Let me go ahead and say resolve number one. Let's see what happens. The red will be what will be deleted, the green will be what will be added instead in this place. So the changes are here to be made, but you you have the you have the option to accept them or to keep them or to reject them, so to keep them or undo them. So because this is past my test, I'll go ahead and hit keep. Then it cleans up my code for me. So then I'll go back to the previous section and then look at number two. Okay. It says my margin bottom for my P is unnecessary. So I'll go I'll say, go ahead and resolve two. So uh.

32:45  
So there are checkpoints that you should take seriously. It'll you can ask it to pause or not make changes and just identify potential issues, which I just did to start the session off. But then also, then I had the option then to review the suggestions that they made, but also then actually accept or reject the coding changes it's willing to make for me. So this sounds good to me, so go back and review three. I'm

33:21  
going to skip three and then go to four in my case. So this is probably one problem that has occurred for you too, possibly that you have multiple at media statements. So I'll say a resolve for my step four and yours might be different. So Don't type in four if yours is number number three. So again, AI can be super efficient and super helpful, and it can be super wrong or super not get what you're asking it, or it's good to explore how it can possibly help you, but it's like an over eager intern sometimes where it really means well and wants to do more than you're asking it to impress you, but it's doing something that you don't want ultimately. So admire his talents, make use of his talents, but also give it some review before you accept his output, so that you're sure that what is suggesting you do or doing for you is what you actually want to have done. So mine seems to have hung up. It could be a network issue. Could be a number of issues going on, so I'm going to pause, pause the request, ask if it's been hung up. So you just kind of stuck. Basically, I let's see if that gets a so just asking for more time.

34:55  
There we go. So it's consolidating the app, media statement.

35:08  
Yes, so there's a good bit of stuff here that is redundant, so I'm going to go ahead and keep that. Okay, so there's more I could do, but I think that that kind of proves the points again, the changes that I'm seeing, that I'm making, will not be the changes that you likely need to make, which is fine, you know, make the changes. It'll be helpful to your CSS, not to my CSS. So don't follow my instructions here, my or my precise props to the letter, but you get the idea of how I'm approaching it. That's I'm trying to model the approach more. So thank you. Precise instructions here. I.

Transcribed by https://otter.ai
