Steve, hey everybody. We have some important stuff to discuss, but it'll make the fun more fun as we move forward. We needed to talk about file management and the tools at our disposal that will help us with file management. Websites are wonderful. They're informative, they're entertaining, they're engaging, visually, emotionally, all kinds of all kinds of ways. But they become as they become more interesting and sophisticated, they become more complicated in terms of the number of files necessary for the for the website to display properly. Okay, so we need to kind of prepare ourselves now for the growing sort of coolness or sophistication of our sites, and that can be done through a sensible strategy of file management. So thankfully, the tools are free and available to us to both manage our files locally and remotely and discuss what those terms mean in a few minutes, but also then give us a way to actually launch and launch our website live and share it with anybody on the internet, if we so choose, right? So that's that's the end goal for the project. So the tools we'll use will give us the capacity to do that, and it'll all be for free for the short term anyway. So, so what we'll need to do, though, is use a tool called GitHub, right? So good at GitHub will be the lot the the hosting platform that will through, through which we'll launch our sites, but also be the tool that we use to manage our files, both on our desktops that are in development, but also the files that we launch for the live site itself, so the local files and the remote files for our site, but also help us track the changes that we've made. So web authoring is a kind of writing. Writing involves drafting and redrafting our ideas, our concepts, our designs. So GitHub gives us a way to the tool that we use called GitHub will give us a way to do all the above. So manage files, track the changes to our files and make our to manage our files, to make it, make changes to our files and to make our files public, so to share them, basically the publish or to share them, right? Okay, go to github.com, G, i, t, h, u, B, which is a industry standard, sort of a tool for collaborative work in coding spaces, right? So even though you're building your own website, we're collaborating because you'll get peer feedback, my feedback, so you'll have people who need to have access to your site or to your files, so we can sort of see the good work you're doing and help you troubleshoot along the way. So that's a good, a good platform for that, for that very, that very purpose. So click on the My icons in the way the sign up button. I'm going to create an account for my wife, since I already have an account for myself,

I would suggest you use your TCU address. There might be some benefits down the road if you do so, but your choice, as long as you'll remember it, also make sure you use a password that you'll remember.

The username should be professional, so you might have something clever or funny or cool or whatever for your Instagram or Facebook or whatever accounts you're using on social media. That's fine. No, no problem with that. But this is well, this project could potentially become part of a larger professional portfolio. So keeping the name, the username professional, will also be compatible with that ambition. Okay, this should be chosen for you, but if not, choose the proper region or territory, and then is your choice if you want to receive emails from GitHub or not, okay, go to continue prove through a visual puzzle that you're not a robot. So we're looking for the special law to be be in the clause of the of this game right here. So we see a camera here, so that's not it has a gnome, that is a hand, that's a game controller, that's a canoe, that's a spatula. Okay, so I'll hit Submit to prove another robot. They're convinced I'm not a robot. So then a email is being sent to this address for me. Your own address should appear here. That will then give you a launch code. If the launch code works, then you should be prompted to sign in directly, again, using those very credentials,

use the password I just created. I Okay, so if you see this, you're in, I would suggest spending some time with the GitHub tutorial here. It's not part of the requirements of the course, but certainly good for the learning curve getting hip to the GitHub environment. Okay, so once you have landed here, then you want to go, to go to the screen button and create a repository.

So the repository is, will be the version of your project that you're saving in GitHub servers, so that you're backing out basically and GitHub servers, right? So one clear benefit of GitHub is that you have a way of a cheap, cheap being free. So it gives you a way to back up your project, so that the only version that exists is not simply what's on your desktop, so your desktop craps out. You have then what's in the GitHub repository to pull back and reinstall the project. So for the repository name, I'd leave the owner as you that's the only option that you probably have. I would name it simply, 60970, the description, you can just say whatever you want.

I would leave this chosen selected as public. Part of the advantage of GitHub is the file sharing, collaborative features. So you'll want to share this work publicly with with your audience. Eventually, you'll want to share it with the classmates and with me, much, much more immediately, for feedback and praise, of course, but also for trouble troubleshooting. So keeping it public will make sure we all have access that we need. Okay, but with that in mind, make sure that you post here and save here in this repository only files you want to be public, so not personal information, not pictures you don't want to have online, all that sort of stuff. So it's not it's not a general sort of cloud storage is meant specifically for the files related to this project that you want to go live eventually, I had a readme file. We'll we'll add that. We'll talk about that. When the time comes, I had to get ignore you can ignore that. Ignore this, this, leave this as it is, and choose a license, choose MIT, and you can review what that means in a bit, but it's it's pretty low stakes, but important. So create the repository, and we have now a public folder those good host servers that you have the you have the ability to put content into. So that's one advantage, but another really nice feature that's related to all this is that the files that we store here will largely be shared through the website we put here, that we develop and publish here, right? So we can use this as the host for our live website, which will grow and grow and grow and grow and become more beautiful as the term goes along. So to get to that, get that sort of stuff set up. Let's go down to pages, link so that the tool, the feature, the function that we'll be using is called GitHub Pages, which is the service, the hosting service that we'll use to publish our websites live. We will deploy from a branch that's set by default. Change the branch from none to main, and leave the root, the root folder here. So what we've what we've done here, basically that this is the terminology straight we by creating this folder, this repository, we're creating a root directory, right? So the foundational directory for this project, okay, so let's test that that space out. So go back to our repository itself. We could review what's currently in place, which is not much, because we just, we just started it, but the license content is here.

But let's go to create a new file, so as add a file and let's name that file. Name. Your file index, I, N, D, E, x, so it's really important. And also make this point a lot to keep file names without any spaces at all. So no file space name, this file name all one word, so no spaces and file names and no capital capital letters, so spaces are critical, and so avoid that at all costs. Capitalizations are beneficial to avoid if you possibly can.

Okay, so we're gonna call this first follow. We're about to create index, and we'll then I'll pop some code in here, so give me one second, so I'll zoom in so you can sort of see it better. Hopefully that works. It does. So go ahead and pause the video. I'll keep it running as I talk, but sort of type out and take maybe a screenshot with your camera, with your phone camera, or just pause the video and type in the code here, go ahead and save or transcribe what you see on the screen here into your newly Created index file, and we will then test to make sure that the GitHub pages we just created and the light the launch, kind of launch of the our first website is working. I'm going to move on by assume that you've paused long enough to transcribe the content here. So not much hand coding in this class, but the be enough for you to get the hang and have you pay closer attention to the syntax. But once you've done, once you entered in the the lines of HTML here, and this is all HTML, it's not CSS. Yet, we'll hit commit changes to save updates to your GitHub repository is called committing. So it's a temporary commitment, so you are set, you are truly sending and making public, in this case, the the changes you've just made, but you can always update it. So it's not as if it's a permanent like once and for all your you can't change anything. It's a you are saying, yes, go ahead and put this live, but there's the assumption that you'll make make further changes live at a later date. Okay, so you click here to confirm that the say the changes were saved and then there. So okay, so the next phase will be then to test the GitHub Pages, sort of view of things on the live servers to make sure things are working there. And we'll get to that next. So after the steps you just followed, the next step would be to see if the HTML file that we just hand coded actually has made its way online. So we need to set up what's called GitHub pages. So GitHub Pages is the is the simple but very, very cost, effective and free version or hosting service that GitHub makes available to projects like ours, right? So to set up GitHub Pages, we need to go to our repository, go to the Settings tab here. Leave all this in the right column alone, but then go to pages I've already made. I've already I was testing this earlier, so things are already sort of chosen for me properly. So I'm not going to change anything at my end, but you'll need to make a few changes at your end. The sources should. I'll just also read deploy from a branch. So leave this alone. If it's already set to that branch, make sure you set that that branch to main, and then leave roots as roots. So the root directory is the is the repository we created. That's the root which will house all the content for the project itself eventually, and then hit Save. And then you can go back to the repository itself to get the web of the web address. So we go down to the repository itself. We go, here we go to deployments. We click, that, we can copy and paste or click this blue link, and we see some web content, not interesting, not pretty, but still it is. The page is working properly. If you see this, okay. So let's, let's look at the code itself that we just hand coded. So in the tab here, this is our, the page that's live says my content adaptation project, right? We find that code here, or the I'm sorry, that sentence, that phrase here, between what's called the title tag. So it goes, it goes between the title tag than a. Gmail page will appear as readable content in the tab of that page. We'll talk more about tagging as we move forward. We have a phrase, academic work adapted, etc, between 2h one tags. So first level tags, the largest sort of title, sort of subtitle tag, we'll see, and we see that text reflected here. So the largest text on the page so far, one last element is the site presents my research, etc. So this sentence here, we find that tagged here, right? Tagged by P is when p is short for paragraph. So we'll talk more about tagging again in the next set of videos. But just wanted to get the idea before you that this content here has been formatted to be distinguished from and cut to contrast, as we will discuss, importantly, the contrast this phrase here, which because they have somewhat different functions, different meanings in the page, I so we've, we've got our GitHub account. We've created a repository in our GitHub account. So now we need to build a bridge between our GitHub accounts and the folders there remote, the remote folders that are there currently that we just created, which is called this, that's our remote directory or remote repository, we need to make a bridge, build a bridge between this space here and our laptops or our desktops, our machines, our devices. So we do that with the magical Github desktop. So a little more software to install, but very simple to use. We can use the account we just created. So just get how I'm sorry, desktop.github.com, that should take you to the right place. Download for your operating system. I'm on a Mac, so I'll do that for the Mac. Should when you double click, this should appear in your folder. Make sure this purple cat icon is you move it properly to your application folder so now you can find it here. Should be alphabetical. Want to open it up from the internet, sure we trust the source is tried and true, and let the Curt purple cat dance for a second dance, Cat Dance. So what's showing up here may be different than yours, because I used this earlier today to set up the practice without my demonstration. So you'll probably see the see a prompt to sign into github.com do that if you're prompted, but through through the browser or through the software itself, log in to your GitHub account. You just created.

The menus that appeared before you will look different, but you want to sign in@github.com which we just did, and you'll eventually get to this screen, which will should be identical to what you'll see once you once you log in, would you want to authorize Github desktop to work with? Get with the service we just started a moment ago. Authorize the desktop. What's going on, there we go. Okay, okay, so then we'll see this. Let's Get Started screen if things are working properly. So just give me a moment to orientate yourself here. So we have this repository here, and notice that we have some options here, but notice what it says down here, which will which I think is helpful. It says you can drag and drop an existing repository folder here to add it to the desk, to desktop. Okay, so not over here to the desktop, but to this box here. I'm assuming. I'm assuming. So let's try that.

Okay, so what's happening here is it's taking the taking my GitHub repository that we made earlier in this video. That's the pathway to it. Is putting is creating a new folder called GitHub, GitHub inside my Documents folder, which is a folder that a lot of Mac users will have and be familiar with so we'll make a new folder inside that, call 6970, so we're going to clone what's there currently in the in the original repository and clone it to our clone it identically to our desktop. So if that works, then you should then see, you should see this, view here. So some things happened. I couldn't read because it happened so quickly, probably on my best interest. But I'm going to open up my Documents folder to see if it showed up there. So I'll do that. Do that again. So again, I'm a Mac user, so it'll be different for PC people, but it should, should be a similar procedure. So. So open up my Documents folder, and so I find that there is, in fact, a GitHub folder here. This is 6970 folder here. And then there's the there's the files that I have created so far. So now, at this moment, this is our local folder, the one that we have here is the local folder that parallels identically at the moment, the remote folder that's available through GitHub. So as we make changes here, we add files, add images at whatever here, well then we will then push them to to this. So we'll be looking at this a lot. So I'm going to cut things short here now, because we'll be using this a lot. You'll get more practice as we go. But now this is a bridge. This has built a bridge and created, actually, a local space for the GitHub repository. So let me try to illustrate some elements here. I so this

is part of the learning curve. So there's going to be, then the local version on your desktop, in this case, inside the Documents folder. This is saved only to my hard drive. Here I'm going to save these files are accessible through the hard drive. Here we got them from then let me go to here.

To the left in the browser window is the remote view of our GitHub folder where we first started. The site we use, then Github desktop to be a kind of a tool that we use, then to work back and forth between two folders. So this is, this is, this is the bridge. This is the link between this folder here that has these files here, and then this folder here, which has the local version here. So as we add, as we add files here, they will be added to and basically effectively backed up by by being saved here in the in the remote repository. So I'll become clear as we go. We'll have a lot of practice pushing content from from the right, in this case, to the left, and it'll be using desktop to manage that conversation between the two, between the remote and the local version of the folder. Okay, that's it for now. We will, of course, discuss much more you.

Transcribed by https://otter.ai
