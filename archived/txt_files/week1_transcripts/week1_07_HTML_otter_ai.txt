So today, as promised, we'll get into HTML, specifically what it is, what it does, and how approachable it ultimately is.

Okay, HTML is the language that builds the internet. That builds the interwebs, as they call it. It's a markup language. So by marking up, we mean formatting. It's the way of formatting content that we plan to deliver through a browser. So we mark it up and format it slash, mark it up so it displays with certain formatting features appropriately, as we intend on the browser. So that's the ML part. The HT is hypertext. Hypertext is digital text that is interactive, potentially interactive and dynamic, right? So text from a book, as I happen to have on here, is familiar, accessible, but static. Web content is changing more frequently, more rapidly, but also it can behave differently than print text. So it has a hyper text, hyper, hyper or dynamic quality to it. So the HT is hypertext, the ML is Markup Language. We've seen a version of this before. In the basic template we build the basic index file we built in our GitHub tutorial. So don't be daunted. But one thing I want you to begin to appreciate, it takes some practice, certainly, but you'll soon begin to appreciate how readable this is, right? You'll be able to read it fairly quickly. So what you can't read here for the first time, we're reading much better by the end of this tutorial, and you'll be reading much better by midterm, and then you'll be reading even better by the end of the semester, right? So, like any foreign language, you have to kind of immerse yourself in that language to become competent and proficient in that language. The same thing then for computer languages like like HTML.

So a really valuable sort of concept I've come across recently, but it really helps to explain a lot of what HTML does is that it's a collection and nesting of boxes. So a collection of boxes that are nested inside of each other. So we see, we see collection of boxes here, right? Each one here corresponds, then with the code we see here. So here's the HTML box, here's the head box, here's an embedded Title box inside the head box, here's a body box, here's a paragraph box, and nested inside the paragraph box is an anchor box or a link to, in this case, a website in Canada. So the boxes are created here. The boundaries of the boxes, or the boxes open and close or begin and end are created here by what's called tags. So and most, for the most part, you'll see the tags come in pairs. So HTML comes in a pair, body comes in a pair, P comes in a pair, a comes in a pair, title comes in a pair. So for the most so there's some context. Exceptions here, but for the most part, we're seeing the written content, in case, by tags which are putting it that content into a specific kind of box. So the tags come of two varieties there. There are what's called pair tags and what's called Empty Tags. Most of the tags that you'll be in, that you'll be using come from this category. There's more than just the four listed here. We've seen these four on the examples above, but there's a lot more until that will become conversant with. But most of the tags that we that we encounter and we'll put into practice will be with a paired variety. So you can so you can sort of see the boxes in place here, and the nesting of boxes inside of boxes also here. So the main box, the major box, which all web pages will have, will start with an HTML tag. Inside that box at the top will be the head, the head the head section. So the head section mostly contains content that's not necessary for the viewer to see, but it's important for the page to display properly. So the head, the content of the head is largely invisible to the reader, but it's functioning behind the scenes. Yeah. The body is what's visible to to the reader. So whatever you want your reader to see. So in terms of embedded video, in terms of pictures, in terms of text, terms of headings and subheadings, all the above will come to come in their appropriate tags, between the body tag here and then the last two tags, typically of a page or the body, the closing body tag in the East and the closing HTML tag. So notice the opening the opening tags and the closing tags. So the opening tag is open, carrot tag name close caret. The closing tag is open, Curt, forward, slash, closing tag, or tag name, closing carrot. Another way of conceptualizing this is the box. If the box concepting is not making sense to you, you also think of these as on switches and off switches. So this p here turns a pair turns a paragraph on terms of formatting for a paragraph on this, P here, turns the formatting for paragraph off. This, a here, turns a formatting for a link on the a here, the slash a here, turns the formatting for for a link off. Tag name on switch, slash tag name, I'll switch tag name, on switch. Tag Name, slash, slash tag name, off switch. Tag Name, open the box, slash tag name, close the box. So either concept will work, then the box, the box concept will carry us further, I think, in terms of other kinds of design concerns we'll get into when it comes to mobile mobile design, but for now, with the on switch, Off switch sort of metaphor makes friends for you, then then it certainly will get us fairly well into our journey. Okay, so let's actually then begin our journey into HTML, and we'll do so in a place you don't first anticipate. We'll begin with GitHub Desktop. We'll begin with that tool that bridges the online repository to our local files. If you already have things properly set up from past videos, then you should upon launching the purple cat, our friend, the purple cat. You'll should see your current repository listed here, the one that's currently open. You may have eventually have more to show here, but the 6970 zero repository should appear here. But the changes have happened. Go ahead and commit them or save them to the repository, the remote repository, that's fine. Otherwise, clean this up, because it's all current. So remember that what the buttons do to the rights. So the show and finder button opens up the local version, the local folder, the folder that's that's simply on your desktop or simply on your laptop, on your hard drive, the view on GitHub, then opens up the remote repository@github.com and Github desktop then is the bridge between the two. So things that we changed today that it will start appearing here in the local folder we will sort of push through and manage and then send, eventually here to the remote repository and they will they currently are identical to each other, but as we develop the project locally, I will need to push then using the desktop, the Github desktop, to push them here. But also was a nice one stop shop. Thing to do is that you can also then open up this folder inside the Visual Studio code on one click. So it doesn't just open up. It doesn't just simply open the software. It opens the software to our project, or opens up the project in our in the software directly, immediately, without us having to dig through menus to get there. Okay, though. So the way it's coming up for me right now, maybe for you too, because it's probably as I left it when I shut the session down last time. But we have the file view, the file view here, we have the code view here, and then we have, at the moment, we have then opened up the simple preview, and we got to that simple preview. I'll do it again with a right click of the file name here. So let's go ahead and delete everything that's in the index file and to restore or to start a new, fresh, clean template that has some starter code in place type exclamation point tab, and they're the first sort of fundamental set of boxes that we have to play with. Let's go ahead and begin populating. So again, we were working with tags. We had the title tag here, if you'll remember from a past video, because in the title tag is what goes into the browser tab. And we'll. Call this MLA, 60970, so this is the one bit of visible content in the header. This right here is not the sort of meta language needed for the browser to be responsive and such, but it's not visible here. So this is what we're seeing. That's what our page is currently empty because there's nothing currently between the the body body tags. So again, the body tags are the visible content. So to reinforce that point, let's leave what's called a comment. So it's a note that will be we're leaving, basically to ourselves or to our collaborators that won't be visible in in this view here, but still the note to the back end designers to to know what a section of code is supposed to be doing, open, Curt, exclamation point, dash, dash, let me typing in the contents below in the body tag is the visible content on the page, and just turn the preview off as well. So notice the color coding going on to here. So the white text is the text that will be visible in the browser tab. The blue text is typically the color of the tags themselves, and the green with the with this formatting here, indicates it's it's a note that we've left to ourselves or to our collaborators. So but we'll notice that we've added some some content here, but if we preview this page, the content is not showing up.

Let's go ahead and reinforce that point with an h1 tag. So h1 stands for First level heading. So the title sort of level heading. So title formatting is usually larger than subheading subheading formatting. So the h1 is the largest of the heading formats. H2 is the next largest that etc. So going beyond h3 is pretty rare for most projects that you'll be doing right off the bat, H Tuesday sleeves are probably most common, but let's say, let's say something silly. You use the h1 tags. And again, the H is an abbreviation for heading. So first level heading, first level H is the first level heading. Is formatted by default. This way, we can change the formatting down the Rode. We will soon enough, but for now, we'll leave the default headings as they are, but notice how that differs from the paragraph heading. So we'll type in a set of p tag. So P is short for paragraph. So I hope you're already seeing the pattern. H is short for heading, P is short for paragraph. That won't change an HTML land, um, they'll be it'll be very familiar. So you very shortly, but you type in, you do? You do the Lorem text. So hello, l, O, R, E, M, where we did in the past tutorial, and you notice that we're tagging something differently so that it's in contrast to each other. So the different tags create contrast, which is meaningful, right? So we know that the header text has a certain, certain kind of meaning, certain kinds of meetings, certain quality of meaning that the paragraph text does not and paragraph text have a certain probably volume and quality of content that the that the headings, which are shorter and phrasing do not have. So the P's, the P content is, I

tags are, by default, formatted in a way that contrast contrasts other tags, but are the repeated formatting of similar, similar tags. So when we see the p tags recurring, the the the formatting. The default formatting recurs when we see the tags contrasting the cot, the formatting contrasts. So this to reinforce the crap principle of work here. So

okay, so notice that the sample paragraphs are coming out. They're they're kind of nonsense. They're not readability. There's the placeholders, but notice how they are coming out fairly short to get us in the habit of keeping our content short. So. We could extend these paragraphs as much as we want to, but the encouragement here, the VS code is giving us is, I'll give you some dummy text, but I'm going to remind you induce in doing so to keep the text that replaces it comparably short, because we want to have the short paragraphs to keep up with the good scan ability, right? Okay, do another example, and we've done h1 so let's do an h2

also bold text, like the heading, but notice it is a few points smaller font size, right? Because it's not quite as significant. It's because a title or a heading to a subsection, so called a subtitle, we'll do the same thing, then below or just above the last paragraph I'm

and just to kind of make the point a little bit clearer, as a couple more paragraphs just kind of space out the headings a little bit. So just add another long paragraph and notice again how this it's nice that we can have this visual confirmation that our changes are working with the live preview open. So notice what this is doing. You know at a glance. What if you wanted to go to the second example you know where to jump, jump in without having to slog through the very difficult to read W Latin, but, but this, you know, the outline is being being foregrounded by the formatting. So this is very compatible with and sort of helps to anticipate the layer cake, kind of scanning patterns that readers have, that the Nielsen group identified, right? So the icing, the thicker and thinner layers of icing are the headings and subheadings here, right? So I like this icing here, so I'll read, I'll read the I'll eat the cake here, or I prefer the icing here, so I'll eat the cake here. All pretty simple, right? But, but you, I hope you're seeing the connections already to the crap principle to visual design, that is the HTML isn't just making things pretty or making things sort of fun. They're making things accessible. I mean, it'll become prettier as we go and more emotionally engaging as we go. But accessibility and accommodating or accounting for the readers, the viewers. Reading patterns is vitally important from the very beginning. So before you get too thick into your design, you'll be building in strategies for scannability as you go, and that's what we're doing right now. So another principle of scan ability is bold text. So bold is as easy as headings and subheadings and paragraphs. So I'll take the second paragraph here and I'll go use the letter B. Notice how it gives me both of the opening and closing tag together, which is a nice reminder that I have to have the closing companion, but I have to copy, cut and paste the closing tag to the end of the phrase I want to put into bold. This, opens the box, puts content in the box, closes the box, turns on the formatting, turns off the formatting, h for h for heading, P for paragraph, B for bold. Another way of doing the same thing. I think this should have the same result. Is the word strong. I

so either way will get you there. You can't mix and match tags. So if you start with strong, close it out with strong. You start with B, close it out with B. Either method will work. Just be consistent with the one you choose. It doesn't matter to me. If you need to bold. You do need to use bold text appropriately. How you bold that text with HTML is up to you. Just be consistent in the method you use. The same thing applies then to italicized text. So I for italics will work when you properly tag the content you want italicized. I so it's harder to see, maybe, but you can still capture the I tell us that text here. What should also work is em for emphasis. So here's there's the. Em example here, here's the example here, here's a strong example, here, here's the B example here. So there's no theoretical limit to my knowledge of how many boxes can go inside other boxes, right? So you inside the body box, which is the visible content box, we have an h1 box, a P box, an h2 box, two more P boxes, another h2 box, two more P boxes. But those P boxes, the paragraph boxes, then have, oftentimes as many as two sub nested boxes for the formatting that takes place inside so.

Transcribed by https://otter.ai
