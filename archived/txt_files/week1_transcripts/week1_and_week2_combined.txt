# Week 1 and Week 2 Combined Transcripts

## week1_01_Artificiality_of_Academic_Writing_otter_ai.txt

Hey, y'all so thankfully for all concerned, this class is not a lecture based class, but there are few, so a few intro concepts we need to discuss to kind of lay the groundwork for what's to come.

One such concept is actually an unpacking of an assumption we make when we talk about school writing in school, right? Most of us have learned how to write through school. Writing in school helps us to learn how to write, which I do believe it takes place in a very positive and constructive way,

but it's happening under very artificial circumstances. And I need, and I think it's important, to foreground and unpack what that means and what's involved, to sort of understand, then what the next step is when it comes to web authoring, which is why we're here for this course. One thing to unpack or to foreground is the fact that I am paid as the teacher for this class, right? You knew that. I you knew that. Of course, it's obvious, but that affects my relationship to you, right? I love working at TCU. I love working with students and students in general. I appreciate and respect my salary could be more, but whatever,

but take away the salary part, and my love for teaching, or love for TCU would change, or at least my love for TCU, which would be true for all, or the majority of your teachers, I mean your your school teachers. If you went to a private school, primarily you went to a public school, primarily, you're being paid, but you're being trained, rather or educated by

paid professionals who

expect to be paid for each class they teach, each semester they teach. Take that away, and they're less inclined to give you feedback. Another dynamic to unpack is the relationship we have with our peers as we expect to get peer feedback.

So our peers may be our best friends, maybe our roommates, maybe someone we met in this class that we really enjoy and look forward to seeing, but they like in a way that's similar to your instructor. They are also compelled to give you feedback, and they may not choose to otherwise, right? They're compelled not by salary, not by financial compensation, but they're compelled by grade.

So I mentioned all this not to disrespect academic writing. Again, I've been a writing teacher the better part of my career, so I have great

affection for teaching writing and students learning writing, and the importance of the of that relationship, but we should be frank and be candid about the parameters and the artificiality that does come into play for this dynamic to take place in school. So what we're trying to do now is to move forward and think about, okay, well, that's how I've been taught to write. Let me think about ways of writing after my school year, my education is formally over.

So how do when I have audiences that are non academic, how do I communicate with them?

What strategies do I need to develop that will engage them because they're no longer captive to me or compelled to give me feedback?

What can I do to help give my ideas a lifespan that exceeds the moment of composition, right? So once it's graded, or once, once it's submitted, it actually has a lifespan and doesn't, isn't forgotten once it's turned in. And since I'm talking to strangers, people who don't know how smart I am or how good I am, or how important my ideas are,

how do I attract and sustain their attention? So how do we make our ideas literally appealing, and I mean that in the most literal sense. So to achieve this new goal of engaging with non academic audiences, let's broaden our concept of argument, right of persuasion, of working with and convincing others that our ideas are valuable and have application in their lives.

One thing that we need to also being candid and also thinking practically and strategically, one thing we have to admit is that we can't simply be a good writer, that that by itself, is fundamental, is essential, is difficult, right? So it's a skill that needs to be practiced. And practice, practice, practice and practiced as often as possible, but that skill, by itself, is not sufficient to engage audiences that don't already know us and are compelled to respond to us. The

text that we produce also need to be thoughtfully designed, and by design means visually organized, as a sense of visual hierarchy, as a sense of visual appeal,

a sense of credibility, and the impressions we start with begin in a visual way. Before we begin reading any sentences, any word by word phrases, we are already making assumptions about a text based on this.

Design, right? So the one to the left may be super brilliant and super well written, but it's because it's more formally presented, more informally presented. It seems less credible. Perhaps the one on the right might be nonsense, utter gibberish even. But because of the format, we have this impression coming into it that it's actually maybe more substantial than or more serious, or more important than the text on the left, right. So we're making visual judgments before we begin discerning the quality of the textual information.

Another case in point from non academic work, right?

The visual is clearly taking up the majority of the space, more than 50% more than 60% probably is purely visual information which can be seen from a greater distance. I begin, sort of making impressions and assumptions based on the visual cues before I begin the engagement with the actual text, right?

So to be able to engage an audience visually and textually, both, we need to understand where they're coming from.

So we do get us have practice with that in a very, very small scale with our teachers. We know the assignment problems. We know what they sort of emphasize in their and their lectures and instruction. So we write to that,

to give our audience what they want, in a very narrow sense,

when we're talking about people we don't know, but are hoping to target in a strategic way,

you know, keeping in mind, you know, sort of Who do I plan? You know, who am I trying to communicate? Specifically, who most needs to hear what I have to share, who would find most value in what I have to share?

Things like running with a gender in mind, or a race in mind or an economic class in mind is part of the process, part of understanding who you're speaking to right, sort of putting your audience, audiences, sort of realities first to sort of say, well, I want to speak to them so I'll understand where they're coming from, so I can better engage with their attending. Better engage their attention.

So thinking more deeply about the various human components of of your audience will help you engage them better.

No one can speak equally well to all audiences at the same time. So no matter how talented you are,

like Martin Luther King, Jr, the most talented orator in US history, had his detractors. Right? He wasn't able to persuade everybody. As powerful as His word was, as his message was, he couldn't speak to everyone equally well, right? Oh, he just couldn't do it, and it's not his fault. He did his damn level best, right? But it's impossible to speak equally well to all audiences based on cultural differences, based on geographic based on geographic differences, educational differences, etc, right? So knowing your audience well means you can speak more deeply to them, but it's more than just demographics. It's also psychographics, so understanding not just where they're from or their age or their racial or cultural backgrounds, but sort of knowing what comes with that, right? So I'm assuming I don't know you all yet, but I'm assuming that as people in your early, mid, late 20s or beyond, you're earlier in your career than I am, right, probably looking to get your first job, or get your first promotion and advancement, or look for a second job that's even more

high paying than what you have currently. So you put you relatively early in your careers, right? So you're anxious about the next steps in terms of your professional lives, which you should be you need to be understandable, and I respect the respect that's where you are. Of course, that's what you'd be. One of your many concerns,

those concerns, which I respect and acknowledge because I'm trying to think about and think about my audience in this video, are not my concerns, right? I have been teaching for 30 plus years. I plan to retire within the next 10 years.

My first job is not my first concern right now, I already got my first job. Already got my second job that's lasted for 20 plus years.

So as a communicator, I'm not foregrounding my my fears or desires or expectations. I'm trying to think through and anticipate yours. So your concerns are, I'm assuming, but hopefully I have, I'm on track, and to a large degree, I'm assuming that your fears are more your next economic step, your next sort of personal steps. Those are in terms of starting off a new family, starting off with a new career, starting off in a new community. Those are not my concern, not my immediate concerns.

Yeah, but my concerns in this moment are not the priority. Yours are because you're my audience, right?

So thinking about the psychology of the audience, not just the demographics of it, it's called psychographics,

okay, so this is the so what I've covered so far is what works, I think, very well for for print and web writing, right or web authoring, what becomes more more more and more consideration as we move towards digital text. So text produced and designed and written for the web, we need to take in mind, then not just the emotional dynamics or the regional cultural dynamics of our audience,

but also their physical bodies, and the capacities and limits of those bodies in terms of their hearing abilities, their ability with vision and dexterity.

Part of if I if I have a manual dexterity issue,

and your website is on my phone, but your website doesn't respond well to a touch navigation, I'm

going to leave that. I'm going to leave your site and go someplace else,

or if I if I'm vision impaired, and you have a lot of images in your site, but you don't have what's called alt tags, which we'll discuss, which describe the content of the image verbally, for screen readers, if your if your website doesn't include alt text to describe images,

and then there's good, there's going to be a reference to the image without information about that image in the speech in the screen reader, I will recognize you're not you're not fully accommodating my needs. I will go elsewhere, right? So writing, writing for your audience means writing for their also for their abilities, or potential limitations to their abilities, in terms of things like hearing, vision and next year. Further, another, another interesting sort of complexity to web authoring

is

fact that, you know, print is a static medium, so once it's produced, once it's edited, once it's approved by the editors, is put on ink on paper, and then put put out on magazine stands, right?

So you find that you pick up magazine, you know, the Rolling Stone issue in New York. You pick it up here, the same issue here in Fort Worth. You put them side by side, and the design, the layouts, the proportions of the elements in relationship to each other, will be the same because they're printed by the same machines at the same time for the same for the same issue. You look at your website on your phone in an airport in New York, you go home to Fort Worth and open up that same website on your desktop, so a much larger screen, it'll look different. The information may be the same, it should be the same, it probably will be the same, but the layout will be different, because the tech will be responding differently to the more the larger screen space. So that's called responsive design. So matter what, no matter what

kind of cup I'm pouring my content into, it will still lay out in a very clear, organized, sensible, readable way, right?

So that'll be done with what's called Media Queries, which will which we will also talk about, once we get the CSS in this class, right? But that's part of it, too. So we want our sites to look at look they won't look the same

on a mobile device as it will on a laptop or desktop,

but we want to look equally good and usability and accessibility, no matter what screen we're choosing to load our or share our content on so the point of all this is to sort of expand beyond our current understanding of audience when it comes to writing, right? Or for many of us, again, different disciplines treat this matter differently.

But if you hear the word audience and writing, and you think of teachers and grading and classmate to peer review, then you need to sort of relax that, or expand beyond that, to think about, well, okay, I've written well for that audience through my education. Now I will think about writing for an audience that's not captive to me by grades or by salary, but who need, perhaps could benefit from what I have to say.

So for our purposes, audience can't be defined as people who don't know you and who don't initially have time

for and or interest in what you have to say. So it's not driven by malice. It's just unfamiliarity. I don't you're a stranger to me.

I don't know that you're smart yet. I don't know that you're not here a good person yet. I'm awfully busy. Thank you.

So what do you so there's real reasons why they're resistant. So how do you get past that? How did you say, Well, hey, wait, there's something I have here. There's something there's something that's worth, worth your time here without being cheesy, without being listen, you know.

Phony salesperson kind of

kind of thing.

So assume then that your audience that you're reaching out to

initially will be resistant to your ideas or hearing you out. So there has to be a hook that gets them to pause so they can, you can get over that hump of the initial resistance, right? So a compelling image,

a novel font treatment, a clear indication, sort of graphically or visually, what the contents about, right?

Those things will say, Well, I don't know what this text is about. I don't know who wrote this, or how how insightful they are. But I see it's about Adele, or I see it's about nutrition, and I care about those topics, so I will read further. I will get past my resistance and take a deeper look into the text. So assume that they don't know you yet. They don't trust you yet. They don't know you're you're insightful yet, so you're that you're funny yet, that you're a good, caring person yet. So you have to get to find some ways to pause them, to arrest their attention, just for a moment, so that they will get so you can get them over that initial, initial hump, right? So that's our audience is, as there is the the mass of the population that we're sort of targeting

demographically, psychographically,

and engaging in some legitimate, honest, sincere, literal, visual ways to get them to hear us out. Because their initial the initial impulse will be they don't have time to hear us out. So web authoring is one way to really learn these skills. I think it's important for web authoring itself, but also probably not a bad thing to take back to your more traditional learning practices. Okay, we'll talk more. Thanks. Applause.

Transcribed by https://otter.ai

## week1_02_Reading_Gravity.txt

Hey, y'all some more intro concepts to build on what we've discussed so far.

So we've talked before about the need for non academic texts to be visually, literally, visually appealing, right? So the Adele and the nutrition example we looked at in the past presentation.

Got their initial attraction, their initial attention, based on their visual cues, more so than the text itself. The text was has to be sort of introduced through the visuals first before people dove in and start reading the actual textual content. So still, still talking about literal visual appeal, and how that sort of affects reading in a web environment, and how we can format and prepare our content for the for that kind of reading. And so we'll talk about both in this presentation.

So

images as we've seen in the magazine, examples from before, color, as we will have the ample opportunity to use in our websites, change, what's called Reading gravity,

so they have a different weight than text, if you Will. And I'll illustrate that with this.

So the concept here is that image is way, way more than text. And by that we mean they kind of pull the eye away from the text. So if you're if you're not, if you're just looking at the screen in general, or the slide in general, I

would imagine if you just kind of relax for a second and turned off your focus, your eyes would probably drift to the image illustrations on the left. I

mean, in this example, that's actually more interesting because there's more information being provided. So this is maybe not the best example in terms of apples to apples comparisons, but the images try draw our eye have more weight

to draw our eye, then the text to the right does.

So once we add color, then the gravity changes.

So I'm guessing in this example, I'm assuming in this example, that if you let your eyes go relaxed, if you relax your focus, rather,

your eyes will drift towards the photorealistic image to the left, right. In this case, the the illustration to the right provides more detail and more sort of information in general, visual, visual information in general. But that doesn't really matter in terms of our attention. Our initial attention will still go towards the more realistic looking colored illustration to the left, right. So

images themselves will always sort of draw the eye away from text.

And color will always drive and draw the eye away from black and white elements. So text and black and white images both right. So that affects the reading gravity. So if you put, if you have a magazine and you have or a website, that's just all text, and then there's the pathway through that text is pretty clear, right, pretty standard, left to right, top to bottom. In English,

if you start introducing color and images and embedded video and animations and

charts and whatever it may be, then the eye doesn't have the quite the clearest senses. Where I should go from point A to point point z, right,

the path isn't as obvious with with once we introduce color or or or or images.

So that affects then what we call reading gravity, right? So different layouts

pull the eye differently through the text. So there's certain patterns of reading that we're accustomed to in books. So like reading a novel, we know that we're going to encounter text that look about maybe it looks like this, and so our eye will do, we'll we'll do this. This is called the Z letter, Z pattern that just Z's down the page, left to right. So

there's the graphic above, but we kind of ignore that. Once we get past that, we just kind of fall into a natural Z path, which we're very accustomed to.

But once we get into

website specifically, we're skipping magazine layout strategies to talk about web design strategies instead. One of the original theories, or original sort of assertions about web reading was that the gravity does change, because there is going to be images, there are there will be text, there will be color, there will be

animations or video, there may be another, other multimedia elements, and so all that together does kind of changes, then changes the ground rules as to how the eye will be.

Pass, pass through or and make, make sense of what's on the screen.

So there is, then

that's reality one. Reality two is that web text is back lit, right? So you're reading off a paper. The light, you know, bounces gently from the light source off the paper to your eyes, so it's kind of refracted or deflected, right?

Or the proper physics term of optics is so the so the reading paper is easier on the eyes than reading off the screen.

Reading on the screen is more taxing on the eyes because the light is coming straight from the screen, so the light, so the light source is not bouncing off, gently off the surface. It's coming straight from the surface, out of the surface.

So that's more fatiguing. I mean, it's a literal phenomenon. It's more fatiguing. You could probably read for text that you're really deeply interested in. You could read Paper, paper text longer for a longer stretch than you could

a web based text. So what that does then is that that sort of Curt

forces. I don't know what the right word is, but the resulting behavior is that the eye doesn't read in a careful Z pattern. It reads in a more scanning F pattern, so kind of looking and scanning, glancing around for the most important, interesting information.

So this has been studied with eye scans, and this study is actually pretty old, and I'll show you a more recent example in a moment. But

notice something. There's a lot of information on the screen, but notice where the eye is going. And so it's not a perfect F, obviously, but the eye is kind of scanning, but not scanning like this, carefully top to bottom, scanning like the left margin and the top of the page, primarily leaving what's in the lower right hand corner

largely unattended. So the hot spots with the yellow and orange, the color spots are the the blue or the empty, empty sections of the page. So that that's we as web authors, we need to

anticipate and expect this kind of behavior from our user, right? We're sort of thinking about how the user will receive and consume and

and stay invested in our website, we have to sort of prepare for how they'll likely read it. And this is not a matter of intelligence. It's not a matter of interest or intention. It's a matter of saving your eyes sort of strength, or

trying to reduce the fatigue in your eyes with looking at web text, right? So we do it, I do it. You do it unconsciously. Anyway, assume the same of your audience. Okay,

so let me actually change screens for one second to show you a more, more recent illustration of that same principle.

So what's been called the F pattern is now, probably more usefully, is described as a layer cake pattern.

So we're still talking about scanning. We're still talking about

the eye,

the I not reading the careful Z pattern that we're talking about, but the F pattern has been sort of redefined to be more of a letter cake. So you're looking for the icing and you're skipping the cake part.

The icing, of course, is the best part, too. So I understand the metaphor.

So the blue dots are where the eye is going with the eye of the studies. Scans are are landing most often,

and notice that they the most attention like this. There's headings and subheadings here and images in the middle. Lot

of attention at the top of the page. For this pulled quote for one lot of attention on the subheadings, and notice that the eye is not spending a lot of time on the actual the written content,

maybe very helpful information, but, but the eye is scanning, at least scanning first to make sure. Well, is this worth reading? Okay, then I will. Maybe, if I'm invested, I'll go ahead and read the section that's most appropriate to my appropriate to my question,

another example of the layer caking.

So again, notice

the absence of attention in the text itself. So the text is important. Words are important to communicate ideas to people who speak the same language as you.

It's one of our best methods that is tested by millennia of use, right?

But when it comes to web components, and even in this case that we.

Have almost these two parallel channels, so the eye is going sort of frequently to the images, definitely hanging on the left margin, and again, spending the least amount of time where the text is, where the bulk of the text is. The text is smaller in this example, let's look at this. The font is smaller than the example with the body text,

so the headings and sometimes are easier to read, right, because you can see them more from a distance, right?

So they're easier to sort of interpret or process than the small text, which requires more careful attention. We're more more brain power,

a greater cognitive load, if you will. So we're trying to save our strength, to save our energy and reduce fatigue. So we kind of do the layer to layer F pattern or layer cake pattern instead.

So part of writing well for the web is anticipating how your content will be consumed.

So part of that is mobile design, which we'll talk about elsewhere or later. So designing for different different screen widths, different screen dimensions and orientations and such.

But also then knowing that formulating your content so that even if your reader is looking at the letter cake kind of way or an F kind of way,

they'll still be able to pull away

the key concepts have a strong gist of what the page is about,

enough perhaps to have them encourage them to read deeper. So it's a matter of it's a matter of usability, and so you user interface, user experience, UI, UX is part of what we're talking about. We're not going to go deep, deep, deep into it. And of course, the short project be, of course, by itself, but that's what we're talking about. How is the user user interface design so that it maximizes and engages the user experience, you know, makes it a pleasant user experience, and users have different needs, but when one need is to protect their eye stamina reading text in a different, different environment, you.

Transcribed by https://otter.ai

## week1_03_Writing_for_the_Web.txt

Okay, so this builds on the last presentation about the reading gravity and how the how we need to take into account the patterns that are that the reader's eyes will likely take as they as they work their way through our web content, the visual information on the web page. So I'll color and images affect then the pathway the eye takes. So this again, this way. This is based on the F pattern and also the layer cake pattern we talked about in last presentation, right? So it's designed to anticipate the user will use the content in this way, or consume the content in this way on a backlit screen. So it's actually fairly simple. The preparations that we can do with the web content is actually fairly straightforward, stuff you can probably do anyway, which we're doing it with a more conscious, more deliberate, more sort of user friendly interest in mind. So the F pattern and the letter kick pattern, we'll call that, you know, the eye is scanning the page, not reading carefully left to right. So that we're trying to improve scan ability. So scan ability is improved through some fairly simple but essential, and I can't say that enough essential formatting tricks, not tricks, but but techniques. So things you know how to do with Microsoft Word will also apply here, but you have to be more intentional and more thoughtful now than you have been previously, because for most of you, you're not used to writing in a web environment, so the shorter paragraphs that we're accustomed to headings and subheadings in a way that we're not always we always need to put into practice on paper, bold face and color to put the push key information and bulleted or and or numbered lists to sort of foreground and the the takeaway salient information, right or or the the fundamental steps that the paragraphs above are recommending.

As a writing teacher for 30 plus years, I've come to especially, and for some reason, maybe especially, with TCU students, or at least TCU undergraduates, they love their long paragraphs. So I'll have a paragraph from an essay that is like a whole, the whole short, short essay written as one paragraph. So three, three pages as one paragraph, a longer paper where we have the first paragraph is a page and a half, so knocking on 500 on 500 words, um, that is not respectful of the reader's attention, and on a paper environment, certainly a paragraph of that length will not simply not be read. If it's not if it's not chunked up in smaller steps visually, then the the the text will not be consumed. So the the practice is the recommendation is to keep your paragraphs 100 words or less for web content. So think about user behavior, user experience, what the user's options? Bureau site requires a lot of fatiguing labor to define the important information. If it looks like looks like work, it's very easy for the user to find other information elsewhere formatted more appropriately to engage their interest. Because we're in an interactive medium called the web, we really need to be sensitive to keeping the attention of our audience right? And that means, like keeping them in your site, if your site is laborious to get through, it's very easy to go to other sites that may be as interesting as relevant, but less laborious to get through.

Okay, headings and subheadings are helpful, and they really help to then visually foreground through the outline and logic of a page, and also makes it more scannable, because I can read the heading the subheadings to make sure, yeah, this makes sense to me. This is actually seems pretty logical and pretty clear and pretty smart. I'll go ahead and dig deeper into the text itself to begin to appreciate the the individual points the author is making bold facing. Color helps to distinguish things from each other, but bold faces especially draws attention to key concepts or keywords, right? So a whole paragraph is bold faced. Is basically not bold facing because nothing is being emphasized. So bold face text is used for emphasis. So certain key words, certain key statistics, certain key concepts, might be best formatted in bold face so that again, if I'm reading quickly, if I'm scanning your headings and subheadings and largely skipping over your. Body paragraphs. If I while I'm skipping your body paragraph, I might see a bowl or that you're building, and I might I'll have a greater sense of some more detail from the from that paragraph itself, so that there's an encouragement then, well, this is pretty, pretty thoughtfully laid out. I see my I see some key points being mentioned here or referred to here through my scan, I'll spend some more time and read further into the content. And lists are good because they sort of, they boil down the essential information of a page or of a section of a page. Bullet points just kind of like might be the most salient. You know, you have your bot, you have your heading and subheadings and body content. And then as part of your conclusion, you might have, for certain sections, anyway, a bulleted list to kind of say the key takeaways are. Key takeaways are one, two and three or bullet, bullet, bullet. So, just so we can sort of see, I'll read I'll read the I'll read the sub subheadings and headings. I'll come down and land on the bullet list, which is all very easy to read because it's very short, very condensed. Then I'll say, well, that's actually pretty interesting. How do they get there? I'll go back and read the paragraphs. Numbered lists are as easy to set up with HTML, and they kind of give a process, you know, action steps, procedures are best put into, but again, that's information that's boiled down to is essential that's put into, best put into number lists, but they are easier To scan than blocky paragraphs. Okay, so again, nothing difficult, technically, conceptually, things you already know how to do, I'm sure, with Microsoft Word, but it becomes fundamentally important, a matter of deep respect and a matter of accessibility for all users, not just those who may have certain limitations visually or auditorily, but all users will be scanning your site again. They don't know you yet. You want them to stick around. You need to prepare the content before they arrive, so that they will be encouraged to stick around. So you want your resumes to be read right. Resumes tending to be formatted in such a way to assist and encourage further reading. Same principle here, especially if you're building, as you might for this class, a portfolio of your work. You wanted the portfolio to augment and support and give a dramatic illustration of the work, the fine work you've done or are doing. I need to think about how the user is coming to the experience, so I'll stop talking for now, but we'll get back to things shortly. I.

Transcribed by https://otter.ai

## week1_04_CRAP_Principles.txt

Hey everybody, it's me once again, with a

hopefully fairly quick presentation on some basic design principles, visual design.

Since we're talking about making our web content literally visually appealing, design is an important consideration, but also, excuse me also, because we're designing with accessibility in mind for those who don't have the same

acuity, visually or otherwise, that

others may have, need to design content with them in mind as well. So this will address the needs of both parties all concerned you.

So let's talk a bit about visual design, some very basic but very useful concepts of visual design.

This is concepts that are are meant that have been assembled for non designers. So those of us who don't have a design background can still think and practice these principles. Think about and practice these principles in ways to improve our own designs. Be there on print documents, like

in photo you know that we make with Photoshop or Illustrator

or even Canva or other design tools, or the website, the websites will build for this class.

So this is a matter of visual appeal, the literal visual appeal that we talked about

being so important for the communication with non academic audiences. It's also a matter of accessibility, so making sure that

our content is designed in a way that will be

more readily available to those who don't have the same capacities that we may otherwise have. So same visual capacities, same

hearing capacities that other people may have, should still be welcome and still find meaning and value in your site, and that would be established in large part from the design.

So from 1994

or back in 94

a designer Robin Williams. So not the comedian who's passed away, but a

designer who's interested in sort of helping non designers learn how to design better. Wrote a book called The non designers design book,

where she boiled down a lot of sophisticated design theory into four principles, contrast, repetition, alignment and proximity.

So C, R, A, P, C, contrast, R, repetition, a, alignment, P, proximity. So we'll go through and illustrate each one with some examples, and then we'll wind up this.

Video with a critique of not critique, but a application of these principles to to a website or two. And then

then we'll begin thinking about how this may inform and benefit us as we work in our projects for this

course. So all the all the four principles, contrast, repetition, alignment, proximity, are different ways we make visual meaning. So contrast, like repetition and alignment, proximity is a matter of meaning making. So by that, in this case, I mean things that are different, that have different meaning, different value, different significance should be designed differently

to reinforce their difference in meaning and significance.

So things that are designed that have contrasting designs

are read visually to are perceived visually to have different meanings or different levels of significance.

So contrast of color, contrast the font size, contrast of texture, contrast of any number of things, but then you know the things that are so contrast. Here, for example, is the the very strong contrast between a black background and a annoyed text of the of the slide banner. That's one example, right off the bat of contrast. So black ink on white paper is so popular because the contrast is so accessible and so readable.

The.

Says the black, the black background of the white text is less conventional, but still very strong in contrast and still fairly fairly readable across a variety of circumstances. So we have, in this example, we have five,

five paper boats, all about the same size,

but we give more attention to one over the other four, because it's of its contrast to the others. So the design, the technique and folding, is the same for the boat,

but they use different paper. Apparently, they use red paper instead of white paper. So the red boat is in the foreground. So we may give it more attention because it's in the foreground, it's more in focus than the than the boat in the background, but also we give it that much more attention, that much more significance,

that much more of our focus because it's red and the others are white, so

it's distinguished, and so therefore, because because it's distinguished, we give it more we give them more meaning because of the color contrast, we give them given more significance, more meaning. So really simple to do, but really powerful technique, and notice how this affects the visual, the reading gravity, when our eyes go to the contrasting elements instead of dwelling on the ones that are most similar to each other.

Okay, so the sort of the flip side of contrast is repetition. So where things that would mean different things or elements that mean have different significance in the composition should be designed visually differently in in contrast from each other.

The same sort of works in reverse, things that are similar in meaning or have a similar significance should have the same design, should, so should. So once you establish a certain way of handling body text, so font choice, font size, font color, for example, every time that you use by text, watch your whole site. You should have the same font size. Find Bucha, font choice, font color for that text too. So once you see a representation of a design pattern, you say, Well, hey, this means this is serving the same kind of function that this text did earlier.

So it creates pattern, but also kind of helps us reinforce

quickly that this is has the same sort of tier of meaning that the other elements designed the same way would have, would also have

so repetitions available here or put into practice here through a couple of things,

you can pause to take a moment to reflect, which what you would notice over the other repetition.

What's probably most obvious is the color pink between the background of the artwork to the left and the background of the tour dates to the right.

The image of Bjork. I assume that's Bjork?

Yes, the image of Bjork

is abstract and artistic to the left as more,

yeah, obviously the photographic in the right, but still the pattern of seeing her face twice over. But also notice how the title is treated with the brushstroke the hand brush strokes that she hears only voices

that also kind of echoes the painterly, artistic quality of the image to the left, so in their eyebrows and the eye shadow and the hair treatment,

we sort of see what seems like maybe brush strokes there as well.

So

contrast is being established in a variety of ways.

If the tour dates beneath Bucha to the right were green, we may not feel the same sort of sense of consistency, although we may think we're working at two different articles, but because the pink repeats that we know are the same meaning space right.

Another,

another example of contrast, though, in this case, is so we have the body text being treated the same way, same color, same size throughout the whole

the whole

bulk of the of the right page, but it contrasts the styling of the title. It also contrast what's called the pull quotes. So that's this time. It's intuition, only, no brain, please. Probably a quote from the article itself that's being pulled out to be, to be kind of provided.

COVID, probably to get the reader to read it, to read further and more deeply.

And so it's treated differently too, right? So much larger and italicized gray punctuated

to kind of give it its own sort of design quality, because it doesn't mean quite the same thing, and probably a more significant passage or phrase or sentence from the article relative to others. So the contrast reinforces that, but the repetition is here as well. So good example of both

alignment is

aligning elements in relationship to each other, horizontally or vertical, vertically.

So,

everything that you lay out on the page should should either on the horizontal axis or the or the vertical axis

share that axis with another element so

so alignment, we mean nothing should be placed on the page. Arbitrarily, every element should have some visual connection with another element on the page, and that visual connection is some either vertical or horizontal alignment.

So left and right justification of a Word document is one simple example of that. To help we say we have a clean and sophisticated look established quickly by just having not rough margin left and right, but rough margins, at least on the left is not also on the right, but that, but if you start adding pictures and pull quotes and other kinds of elements, you'll have more alignment to play with to make sure you keep that clean fresh look.

So we have basically, you know, we have a skillet, we have food items if text

that is roughly the same for both the

content wise are roughly the same for both images. But notice how the one on the right is cleaner tighter,

because there's an alignment going on here. There's sort of a column that's established, maybe by the width of the of the pan, of the skillet,

and so all the on the run example, so all the food elements above are all inside that same column where they're being tossed on the floor, across the across the counter in the lot example, in a very sloppy way,

because there's, There's there's no real there's no clear alignment going on there. We see, you know, the left and right of the food is lined up with the left and right of the skillet, which then continues and extends down to the text below. So best recipes is put into one line and the left example, the sloppier example, best recipes is put into two lines

and with additional font, font sizing. So this becomes part of the column created by the skillet, and that's reinforced then further by the

by the food items straight above it, right? So there's a middle in the middle of the composition, there's a nice, clean column of of all the content,

so same elements, but they put put into a single column that's kind of roughly a fixed width, not not entirely fixed, but roughly a rough, roughly the same width helps to create some what was, what's the I clean, sophisticated, fresh look. So it's cleaner, it seems more artful.

I think a professional chef would be able to toss that the ingredients

sort of cleanly above the skillet, where a bad, bad chef like myself would toss things and they skillet along the kitchen and make a huge mess. So the right uses alignment very, very strongly to create that sense of sophistication.

And lastly, then we have proximity. So proximity basically means nearness or closeness. So things that mean the same have the same kind of meaning? Should be placed close together. Things that are further apart mean something are suggesting they mean something different. And that's nicely illustrated by this so a business card, so you can pause and sort of think about how the nearness of the information helps to communicate

differently, that the you know, the different function, different values that the that the groupings have right. So things that we see three groups of of information here,

so positive and reflect and see what, what each.

Group has has in common with each other, but in contrast to the other elements,

so the name and the person's title are in the upper left, right, so name and professional identity maybe in the upper left

to the right for all for half the card, almost we have

icons that sort of abstractly reinforce

what's

the the title, the the identity that

the icons to the right then sort of reinforce that identity more abstractly with computer based or internet based iconography, so emojis and Wi Fi signals and mouse mouse pointers and computer screens are all part of the domain and part of the world and daily experience of what designers that makes sense they be here

in a fairly playful way, not not too serious, not too heavy,

but still professional, because they're nicely aligned and grouped together. And then the lower left hand corner,

each line, each of the three lines, is some kind of contact information, right? So instead of putting these things more randomly across the card and grouping them shows that they have similar meanings together

by grouping, by spacing the groups apart, means the things that are separated mean something different, all part of the larger meaning of the composition, but they don't there's there's little subsets of meaning or different information being being grouped in the different regions of The design.

So let's go on to a web example.

Oh, I'm sorry.

So this is not in the CR AP order, but the we have

each

each principle illustrated here graphically, abstractly, but graphically. So we see repetition at work, we see proximity at work. We see alignment at work. We see contrast at work.

So let's go on to a web example. So

uh, okay, this is a pretty well known one, the one

that you're familiar with, when you can access easily yourself, and as a site, you probably go to frequently yourself. Tc.edu,

so not a lot going on. I was all very clean, very professional, very well done, very expensive to produce. So you know, professional grade web design going on here.

But as you scroll through the page, you can see there are a lot of elements here that are that need to be sensibly

put put in relationship to each other.

So I'll do some scrolling. Then we'll go back and sort of evaluate and critique and sort of see where we see the crap principle and action. So

and

one thing I want you to notice that we'll talk about more, maybe as we move forward,

notice how little we have some things that are centered, but very few things are centered.

Centering is a,

with all due respect, a sloppy sort of from my

point of view, it's one of my hobby horses, I guess, or one of my pet peeves, but it suggests that things are it's kind of a false sense of design. If you want to design something, to center it and you're done, it's not that simple. And also that's not, it's not that effective as a design principle. So

notice there are some standard elements here, but that there's not, there's not these over overarching

technique being used. It's much more

nuanced than that, in a way that I think is very is pretty slick and pretty cool. Okay, okay, so,

so we have two different elements. We have a contrast here with the the

promise. There's no place like TCU. So.

Um contrast of strong purple against the white background. So we're very, very legible, very readable and very branded, right? Which makes sense. No nothing around the purple

um contrast here to the text below. But notice how there's repetition here to the banner above, right? So that's the same value of purple, are almost the same value of purple, so contrast from the background to the text alignment rode

repetition from the text to the upper banner for this title text here,

so much larger than the paragraph below right, which is more body text or more contextualizing information here.

So very strong contrast in font size. This is all caps, very thick, sort of blocky font. This is more of a conventional non serif font.

But notice that these two elements right, which are are contrasting so strongly and so importantly, are still on the same left margin here. So left justified,

right? So even though they mean something different and are designed in a very strongly, strong, strongly contrasting way, there's still a strong sense of relationship established because of the alignment

that's further illustrated then by this very faint frogs

logo, right where we have this align this. It's, it's very different in terms of meaning. It's, it's very

different in terms of meaning, but it also lines up basically, is right justified with the other two elements in this part of the screen,

right? So, strong alignment here, strong contrast here, stronger position here,

right. Okay, okay,

let's see if we can find another example. Here we go.

Probably a typo, right here. Should that be the TCU difference?

Easy to miss, maybe. Let's

open the screen up a little

bit. There we go. No, no typos, just little bit, little bit collapsed. Okay, so background is different now, so different color, different section, different background, color, different

section. The change to purple here means the text that has to change as well to be equally contrasting. So white text on a purple background, sort of purple on white right, just reversing that relationship, but it distinguishes section one from, you know, section section one from Section two,

with contrast, still going on,

title, contextual information, button that links to someplace else in the large website, strong alignment between the

the four elements here.

But notice how the stats are designed in a similar fashion to each other, but they're also groups away from this information here. Alright? So here's proximity, here, here's this is more verbal to contextual, emotionally engaging,

kind of humble bragging, if you will, right? Which is totally fine for the for the purpose of the site.

But then that's, there's a strong separation between that. And then the

stats here, which are grouped together, designed the same, but grouped separately from the the information above. So good information there. This pattern then repeats, right? So the information changes, the color of the purple changes. I think does it change? Maybe not.

Well, we see two different shades of purple here,

but grouping of stats, alignment of the textual elements here in the navigation button, I

uh, even though there's this, this sort of inside picture that breaks the alignment in a in a consistent way, because that's also appears in this

feature here and here,

there's a strong alignment. All the images to the left here are size, the same, same width, same height, on the same in the same column, right?

So once that pattern is established, with stats being grouped here,

font and font differences and font color being established up here.

So this, this is creating a pattern that reinforces what's above, right? So it's very, very much perfect to deliberate, intentional organization of various kinds of information throughout the whole page.

Clean, right? Justification here, which lines up nicely with this also top alignment here, so it's not centered,

was roughly the top of the

top of the top of the

text. The top of the text roughly aligns the top of the images

as we scroll across, they're all the same height. They all line nicely top and bottom right. The bottom of

the the

student's name and then the year of graduation, are all bottom aligned,

right.

Okay, so we could

confirm other other uses of the crap principle throughout, in many places, right? Okay, so there's actually, then this site holds up pretty well to scrutiny. I think. I mean, the TCU is

the real deal. They have real money. They have a huge international audience. Their recruitment efforts are successful in large part because the website is so so

well. It's not always been this way. I've seen it in earlier versions where it's much more problematic, but they've really upped their game in terms of the websites are there, there they've been posting, and there's a way we can evaluate for accessibility to that. It does fairly well that way. So there's a site called or service called wave for

accessibility evaluation tool that will read the whole site on the code side of things, and then sort of tell you if it's going to be

accessible in a variety of ways or meeting web standards in a variety of ways.

So it does fairly well. There's only only two errors. It's not that bad. I think it passes a mustard. There's some things that should be reconsidered, possibly, but there's only two, two contrast areas. So contrast, contrast areas are really large, large, largely

concerned legibility. So Black and White will not get flagged. Will not be an error because the contrast is strong. Dark, purple and white will probably not be flagged because the contrast is still fairly strong,

but we can sort of see there, there is some contrast problem here somewhere, right? I mean, we not know whether it bothers us individually, but ways that technically violates web standards. So let's see what that is.

So we can, we can actually jump to places

where this is happening.

See, I

don't see the second one.

Well, the first one is

this gray, this kind of pale gray and white, a white background,

right? So technically, this should be darker or different color to be contrast the white background more more dramatically. So I think it's a cool sort of framing of this

larger text. So to my eyes, it's not a concern. But for someone with with different sort of visual needs than I have May, May hard, have a hard time reading this.

So there's ways. So this gray here, what's there? They get the value for here.

So you can sort of get a sense of what, what shared agreement would be better against the black, I'm sorry, against the white, and

he's sort of see as you move the slider, then when it gets to a pass under sample.

So it's a fair bit darker, right?

So

a lot of things are going on, a lot of design choices being made. A lot of things being evaluated here and TCU site on this page anyway, it may be different, deeper than the site, but on this page is doing pretty well.

And it's based on, you know, there's largely, you know, 98% success rate at working with textual contrast,

but there's one. Are a couple examples where they don't quite have it right? They didn't. They need to make some technical adjustment, adjustments.

So this food for thoughts help you sharpen your own eyes. Look at what.

Sites,

websites that you care for that that kind of strike you as being cool or interesting or inviting or appealing to your own taste. So you have a vocab as to why that's happening. You know, I can so you can better articulate why you find it so appealing or so cool or so interesting.

Oh, so successful. But also you can begin to sort of use it to sort of see where the designers of sites you visit may have dropped the ball. Even if you don't use the wave evaluation, you can sort of see, is there some weird alignment or lack of alignment going on? Are things groups inconsistently throughout the site, with poor proximity?

Is there, excuse me, are there

other moments where the light, where the repetition

isn't happening, like the color of the banner between pages is changing, or the navigation,

the font treatment for the for the links is different pages, page by page, so

there's no clear sense of pattern, so things like that.

So I hope this helps. I plan to speak to you soon.

Thanks. Applause.

Transcribed by https://otter.ai

## week1_05_File_Management_via_GitHub_otter_ai.txt

Steve, hey everybody. We have some important stuff to discuss, but it'll make the fun more fun as we move forward. We needed to talk about file management and the tools at our disposal that will help us with file management. Websites are wonderful. They're informative, they're entertaining, they're engaging, visually, emotionally, all kinds of all kinds of ways. But they become as they become more interesting and sophisticated, they become more complicated in terms of the number of files necessary for the for the website to display properly. Okay, so we need to kind of prepare ourselves now for the growing sort of coolness or sophistication of our sites, and that can be done through a sensible strategy of file management. So thankfully, the tools are free and available to us to both manage our files locally and remotely and discuss what those terms mean in a few minutes, but also then give us a way to actually launch and launch our website live and share it with anybody on the internet, if we so choose, right? So that's that's the end goal for the project. So the tools we'll use will give us the capacity to do that, and it'll all be for free for the short term anyway. So, so what we'll need to do, though, is use a tool called GitHub, right? So good at GitHub will be the lot the the hosting platform that will through, through which we'll launch our sites, but also be the tool that we use to manage our files, both on our desktops that are in development, but also the files that we launch for the live site itself, so the local files and the remote files for our site, but also help us track the changes that we've made. So web authoring is a kind of writing. Writing involves drafting and redrafting our ideas, our concepts, our designs. So GitHub gives us a way to the tool that we use called GitHub will give us a way to do all the above. So manage files, track the changes to our files and make our to manage our files, to make it, make changes to our files and to make our files public, so to share them, basically the publish or to share them, right? Okay, go to github.com, G, i, t, h, u, B, which is a industry standard, sort of a tool for collaborative work in coding spaces, right? So even though you're building your own website, we're collaborating because you'll get peer feedback, my feedback, so you'll have people who need to have access to your site or to your files, so we can sort of see the good work you're doing and help you troubleshoot along the way. So that's a good, a good platform for that, for that very, that very purpose. So click on the My icons in the way the sign up button. I'm going to create an account for my wife, since I already have an account for myself,

I would suggest you use your TCU address. There might be some benefits down the road if you do so, but your choice, as long as you'll remember it, also make sure you use a password that you'll remember.

The username should be professional, so you might have something clever or funny or cool or whatever for your Instagram or Facebook or whatever accounts you're using on social media. That's fine. No, no problem with that. But this is well, this project could potentially become part of a larger professional portfolio. So keeping the name, the username professional, will also be compatible with that ambition. Okay, this should be chosen for you, but if not, choose the proper region or territory, and then is your choice if you want to receive emails from GitHub or not, okay, go to continue prove through a visual puzzle that you're not a robot. So we're looking for the special law to be be in the clause of the of this game right here. So we see a camera here, so that's not it has a gnome, that is a hand, that's a game controller, that's a canoe, that's a spatula. Okay, so I'll hit Submit to prove another robot. They're convinced I'm not a robot. So then a email is being sent to this address for me. Your own address should appear here. That will then give you a launch code. If the launch code works, then you should be prompted to sign in directly, again, using those very credentials,

use the password I just created. I Okay, so if you see this, you're in, I would suggest spending some time with the GitHub tutorial here. It's not part of the requirements of the course, but certainly good for the learning curve getting hip to the GitHub environment. Okay, so once you have landed here, then you want to go, to go to the screen button and create a repository.

So the repository is, will be the version of your project that you're saving in GitHub servers, so that you're backing out basically and GitHub servers, right? So one clear benefit of GitHub is that you have a way of a cheap, cheap being free. So it gives you a way to back up your project, so that the only version that exists is not simply what's on your desktop, so your desktop craps out. You have then what's in the GitHub repository to pull back and reinstall the project. So for the repository name, I'd leave the owner as you that's the only option that you probably have. I would name it simply, 60970, the description, you can just say whatever you want.

I would leave this chosen selected as public. Part of the advantage of GitHub is the file sharing, collaborative features. So you'll want to share this work publicly with with your audience. Eventually, you'll want to share it with the classmates and with me, much, much more immediately, for feedback and praise, of course, but also for trouble troubleshooting. So keeping it public will make sure we all have access that we need. Okay, but with that in mind, make sure that you post here and save here in this repository only files you want to be public, so not personal information, not pictures you don't want to have online, all that sort of stuff. So it's not it's not a general sort of cloud storage is meant specifically for the files related to this project that you want to go live eventually, I had a readme file. We'll we'll add that. We'll talk about that. When the time comes, I had to get ignore you can ignore that. Ignore this, this, leave this as it is, and choose a license, choose MIT, and you can review what that means in a bit, but it's it's pretty low stakes, but important. So create the repository, and we have now a public folder those good host servers that you have the you have the ability to put content into. So that's one advantage, but another really nice feature that's related to all this is that the files that we store here will largely be shared through the website we put here, that we develop and publish here, right? So we can use this as the host for our live website, which will grow and grow and grow and grow and become more beautiful as the term goes along. So to get to that, get that sort of stuff set up. Let's go down to pages, link so that the tool, the feature, the function that we'll be using is called GitHub Pages, which is the service, the hosting service that we'll use to publish our websites live. We will deploy from a branch that's set by default. Change the branch from none to main, and leave the root, the root folder here. So what we've what we've done here, basically that this is the terminology straight we by creating this folder, this repository, we're creating a root directory, right? So the foundational directory for this project, okay, so let's test that that space out. So go back to our repository itself. We could review what's currently in place, which is not much, because we just, we just started it, but the license content is here.

But let's go to create a new file, so as add a file and let's name that file. Name. Your file index, I, N, D, E, x, so it's really important. And also make this point a lot to keep file names without any spaces at all. So no file space name, this file name all one word, so no spaces and file names and no capital capital letters, so spaces are critical, and so avoid that at all costs. Capitalizations are beneficial to avoid if you possibly can.

Okay, so we're gonna call this first follow. We're about to create index, and we'll then I'll pop some code in here, so give me one second, so I'll zoom in so you can sort of see it better. Hopefully that works. It does. So go ahead and pause the video. I'll keep it running as I talk, but sort of type out and take maybe a screenshot with your camera, with your phone camera, or just pause the video and type in the code here, go ahead and save or transcribe what you see on the screen here into your newly Created index file, and we will then test to make sure that the GitHub pages we just created and the light the launch, kind of launch of the our first website is working. I'm going to move on by assume that you've paused long enough to transcribe the content here. So not much hand coding in this class, but the be enough for you to get the hang and have you pay closer attention to the syntax. But once you've done, once you entered in the the lines of HTML here, and this is all HTML, it's not CSS. Yet, we'll hit commit changes to save updates to your GitHub repository is called committing. So it's a temporary commitment, so you are set, you are truly sending and making public, in this case, the the changes you've just made, but you can always update it. So it's not as if it's a permanent like once and for all your you can't change anything. It's a you are saying, yes, go ahead and put this live, but there's the assumption that you'll make make further changes live at a later date. Okay, so you click here to confirm that the say the changes were saved and then there. So okay, so the next phase will be then to test the GitHub Pages, sort of view of things on the live servers to make sure things are working there. And we'll get to that next. So after the steps you just followed, the next step would be to see if the HTML file that we just hand coded actually has made its way online. So we need to set up what's called GitHub pages. So GitHub Pages is the is the simple but very, very cost, effective and free version or hosting service that GitHub makes available to projects like ours, right? So to set up GitHub Pages, we need to go to our repository, go to the Settings tab here. Leave all this in the right column alone, but then go to pages I've already made. I've already I was testing this earlier, so things are already sort of chosen for me properly. So I'm not going to change anything at my end, but you'll need to make a few changes at your end. The sources should. I'll just also read deploy from a branch. So leave this alone. If it's already set to that branch, make sure you set that that branch to main, and then leave roots as roots. So the root directory is the is the repository we created. That's the root which will house all the content for the project itself eventually, and then hit Save. And then you can go back to the repository itself to get the web of the web address. So we go down to the repository itself. We go, here we go to deployments. We click, that, we can copy and paste or click this blue link, and we see some web content, not interesting, not pretty, but still it is. The page is working properly. If you see this, okay. So let's, let's look at the code itself that we just hand coded. So in the tab here, this is our, the page that's live says my content adaptation project, right? We find that code here, or the I'm sorry, that sentence, that phrase here, between what's called the title tag. So it goes, it goes between the title tag than a. Gmail page will appear as readable content in the tab of that page. We'll talk more about tagging as we move forward. We have a phrase, academic work adapted, etc, between 2h one tags. So first level tags, the largest sort of title, sort of subtitle tag, we'll see, and we see that text reflected here. So the largest text on the page so far, one last element is the site presents my research, etc. So this sentence here, we find that tagged here, right? Tagged by P is when p is short for paragraph. So we'll talk more about tagging again in the next set of videos. But just wanted to get the idea before you that this content here has been formatted to be distinguished from and cut to contrast, as we will discuss, importantly, the contrast this phrase here, which because they have somewhat different functions, different meanings in the page, I so we've, we've got our GitHub account. We've created a repository in our GitHub account. So now we need to build a bridge between our GitHub accounts and the folders there remote, the remote folders that are there currently that we just created, which is called this, that's our remote directory or remote repository, we need to make a bridge, build a bridge between this space here and our laptops or our desktops, our machines, our devices. So we do that with the magical Github desktop. So a little more software to install, but very simple to use. We can use the account we just created. So just get how I'm sorry, desktop.github.com, that should take you to the right place. Download for your operating system. I'm on a Mac, so I'll do that for the Mac. Should when you double click, this should appear in your folder. Make sure this purple cat icon is you move it properly to your application folder so now you can find it here. Should be alphabetical. Want to open it up from the internet, sure we trust the source is tried and true, and let the Curt purple cat dance for a second dance, Cat Dance. So what's showing up here may be different than yours, because I used this earlier today to set up the practice without my demonstration. So you'll probably see the see a prompt to sign into github.com do that if you're prompted, but through through the browser or through the software itself, log in to your GitHub account. You just created.

The menus that appeared before you will look different, but you want to sign in@github.com which we just did, and you'll eventually get to this screen, which will should be identical to what you'll see once you once you log in, would you want to authorize Github desktop to work with? Get with the service we just started a moment ago. Authorize the desktop. What's going on, there we go. Okay, okay, so then we'll see this. Let's Get Started screen if things are working properly. So just give me a moment to orientate yourself here. So we have this repository here, and notice that we have some options here, but notice what it says down here, which will which I think is helpful. It says you can drag and drop an existing repository folder here to add it to the desk, to desktop. Okay, so not over here to the desktop, but to this box here. I'm assuming. I'm assuming. So let's try that.

Okay, so what's happening here is it's taking the taking my GitHub repository that we made earlier in this video. That's the pathway to it. Is putting is creating a new folder called GitHub, GitHub inside my Documents folder, which is a folder that a lot of Mac users will have and be familiar with so we'll make a new folder inside that, call 6970, so we're going to clone what's there currently in the in the original repository and clone it to our clone it identically to our desktop. So if that works, then you should then see, you should see this, view here. So some things happened. I couldn't read because it happened so quickly, probably on my best interest. But I'm going to open up my Documents folder to see if it showed up there. So I'll do that. Do that again. So again, I'm a Mac user, so it'll be different for PC people, but it should, should be a similar procedure. So. So open up my Documents folder, and so I find that there is, in fact, a GitHub folder here. This is 6970 folder here. And then there's the there's the files that I have created so far. So now, at this moment, this is our local folder, the one that we have here is the local folder that parallels identically at the moment, the remote folder that's available through GitHub. So as we make changes here, we add files, add images at whatever here, well then we will then push them to to this. So we'll be looking at this a lot. So I'm going to cut things short here now, because we'll be using this a lot. You'll get more practice as we go. But now this is a bridge. This has built a bridge and created, actually, a local space for the GitHub repository. So let me try to illustrate some elements here. I so this

is part of the learning curve. So there's going to be, then the local version on your desktop, in this case, inside the Documents folder. This is saved only to my hard drive. Here I'm going to save these files are accessible through the hard drive. Here we got them from then let me go to here.

To the left in the browser window is the remote view of our GitHub folder where we first started. The site we use, then Github desktop to be a kind of a tool that we use, then to work back and forth between two folders. So this is, this is, this is the bridge. This is the link between this folder here that has these files here, and then this folder here, which has the local version here. So as we add, as we add files here, they will be added to and basically effectively backed up by by being saved here in the in the remote repository. So I'll become clear as we go. We'll have a lot of practice pushing content from from the right, in this case, to the left, and it'll be using desktop to manage that conversation between the two, between the remote and the local version of the folder. Okay, that's it for now. We will, of course, discuss much more you.

Transcribed by https://otter.ai

## week1_06_vs_code_otter_ai.txt

Hey, again, I thought this time we need to extend our journey into VS code, which is the tool that we'll use to edit the majority of our code for this course, so the HTML and CS and JavaScript, if we get into it. So this assumes that you already have your GitHub account created. It assumes that you have a repository created inside GitHub, and this assumes that you have a 60970 folder on your desktop that parallels what's on the repository and the GitHub servers, right? And we also assumes that you have installed Github desktop, which helps to be the bridge between the two folders, so the local one is the one that you have only you have access to, that you'll use to develop and cultivate your projects. So your development folder will be your local folder, the repository and GitHub will be the backup and OR, and NOT AND, OR, but, and eventually your host for the live website. So this assumes all that. So if you haven't go back to that video and do that one first, it'll make more sense and be a smoother ride through this video, which is should be fairly short and straightforward, but assume that you have the preparation from GitHub behind you, so to kind of visually review what we just covered.

So this is the github.com

version of our the folder we looked at before. This is the parallel version, the cloned version of the site that exists locally. So the three files here, you can see this three files named here, right? Things may add up here that will eventually push over here. And we do, we'll make that process where they will send files back and forth using GitHub Desktop, which you should already have set up. Github desktop will will be the tool that we're using to sort of choose which files we want to we want to send to back up and update our, our our existing repository files. But it also has a nice sort of gateway to open up quickly. Either your local view

saves locally to this version here, so if you click on this button,

that the local folder shows up,

click on this button, the browser based remote repository shows up. So, or what you can also do, which we haven't done yet. What we can do right now is open the repository in VS code, right? So let's see what happens if you, if you click this button,

it did just that. Okay, so this is so it happened for me, because I have VS code already installed, right? So for you, it's very simple.

Let's do a quick search of VS code.

So just download

the version you want and unzip it, go back to GitHub Desktop and click the Open VS Code button. And so now you have all three files again. Here, boys, nice about these files. So this version of the files is that they're editable,

right? So there this is, this is the code editor that you can use for HTML, for CSS, for JavaScript, for markdown VS code is well established. It seems to be a go to for a lot of Professional Coders, but a lot of new coders as well. Okay, so let's do this, and let's go ahead and kill the HTML you coded. You hand coded last video. Ignore that for now. Type in an exclamation point and then hit Tab.

It creates for us a scaled down version of what we had encoded earlier, right? So this is the basic format of all HTML pages we just created. So so let's go ahead and make our own version of this that's similar to what we did originally. So type in h1 close and notice that once you, once you type in the first tag. This is a Heading tag. Now,

when you type in a tag, oftentimes it will give you the closing tag to accompany it.

Okay, so to create all this, all the sort of template code, I just typed exclamation point in a tab.

And then I tabbed down between the two body tags.

I typed h1 this is my first header, slash, h1 both in site Curt brackets, and I created a pair of p tags, which stand for paragraphs. It's an abbreviation for paragraphs. I'll type in the word Lorem, l, O, R, E, M, and hit Tab, and we'll get some some dummy content which law is, which is all in one line, which is kind of hard to read, but we can actually adjust that pretty simply

if we go to our top.

The menu says View and then down, drop down to the word wrap. It'll wrap the code inside the available window space so it won't go off the off the right margin, the way it just a second ago. Okay,

so let me do that one more time.

So open, Curt, P, close, caret,

word, l, O, R, E, M, Lorem tab, and it's just, it's just some nonsense Latin, basically that

it's placeholder text. Okay,

so let's go ahead and close that. I'm sorry, save that.

So next go to File and go to auto save, and make sure that that is selected, it'll save you from I mean, you can do Command or Control S as often as you need to, which is a great habit, but to make sure that that's happening, if you forget, it's good to have auto save selected, so make sure you have that selected.

Further, we want to sort of see the changes that we've made. We will add what's called extension. So additional sort of features that are not part of the primary installation of this software, but you can add to it very simply and usually for free. So the extensions icon is little square. This is four squares here.

And so for the first one, search, live preview.

And you want the one that's made by Microsoft,

and you want to install it

to go back to see our files, then

we go back to these little document icons here, but we

want to see what this looks like

in a browser.

We can go to

here, so Right, right, click on the file name,

Show Preview.

And now this is a browser version of broadly red version of

what we've coded here,

but it should update in real time.

So you don't need to save the changes before you can preview them. You should, in most cases, it should update in real time. So if we added a third paragraph,

should also appear as so it's really nice. So this is called the simple preview. What we see in the side by side with the code is a simple preview. It's not super sophisticated. So as you as your site becomes cooler and has more features and has more color and has more dynamic content, it will have a harder time keeping up, keeping up with the changes. So if you're not seeing you've made a change here, you know, you know you made the change here, but you're not seeing it reflected here. What you can also do is open the full page in a browser, and that will give you a proper view of how it'll actually look at a proper browser. This is kind of a simulation of a browser right here. It'll open up a new tab, and it'll give you a proper browser review, which will be more accurate, more faithful, indication of how your pages gonna look. One's live, okay, we connected

GitHub to VS code, which is really important, so we can go that way. We can send files back and forth to GitHub very quickly. We've played we played with some HTML that we'll discuss much more deeply as we move forward. We installed the extensions Live Preview, which is going to allows us to do things like this right here. And then we've also set up auto save, life saving. Auto life saving. You.

Transcribed by https://otter.ai

## week1_07_HTML_otter_ai.txt

So today, as promised, we'll get into HTML, specifically what it is, what it does, and how approachable it ultimately is.

Okay, HTML is the language that builds the internet. That builds the interwebs, as they call it. It's a markup language. So by marking up, we mean formatting. It's the way of formatting content that we plan to deliver through a browser. So we mark it up and format it slash, mark it up so it displays with certain formatting features appropriately, as we intend on the browser. So that's the ML part. The HT is hypertext. Hypertext is digital text that is interactive, potentially interactive and dynamic, right? So text from a book, as I happen to have on here, is familiar, accessible, but static. Web content is changing more frequently, more rapidly, but also it can behave differently than print text. So it has a hyper text, hyper, hyper or dynamic quality to it. So the HT is hypertext, the ML is Markup Language. We've seen a version of this before. In the basic template we build the basic index file we built in our GitHub tutorial. So don't be daunted. But one thing I want you to begin to appreciate, it takes some practice, certainly, but you'll soon begin to appreciate how readable this is, right? You'll be able to read it fairly quickly. So what you can't read here for the first time, we're reading much better by the end of this tutorial, and you'll be reading much better by midterm, and then you'll be reading even better by the end of the semester, right? So, like any foreign language, you have to kind of immerse yourself in that language to become competent and proficient in that language. The same thing then for computer languages like like HTML.

So a really valuable sort of concept I've come across recently, but it really helps to explain a lot of what HTML does is that it's a collection and nesting of boxes. So a collection of boxes that are nested inside of each other. So we see, we see collection of boxes here, right? Each one here corresponds, then with the code we see here. So here's the HTML box, here's the head box, here's an embedded Title box inside the head box, here's a body box, here's a paragraph box, and nested inside the paragraph box is an anchor box or a link to, in this case, a website in Canada. So the boxes are created here. The boundaries of the boxes, or the boxes open and close or begin and end are created here by what's called tags. So and most, for the most part, you'll see the tags come in pairs. So HTML comes in a pair, body comes in a pair, P comes in a pair, a comes in a pair, title comes in a pair. So for the most so there's some context. Exceptions here, but for the most part, we're seeing the written content, in case, by tags which are putting it that content into a specific kind of box. So the tags come of two varieties there. There are what's called pair tags and what's called Empty Tags. Most of the tags that you'll be in, that you'll be using come from this category. There's more than just the four listed here. We've seen these four on the examples above, but there's a lot more until that will become conversant with. But most of the tags that we that we encounter and we'll put into practice will be with a paired variety. So you can so you can sort of see the boxes in place here, and the nesting of boxes inside of boxes also here. So the main box, the major box, which all web pages will have, will start with an HTML tag. Inside that box at the top will be the head, the head the head section. So the head section mostly contains content that's not necessary for the viewer to see, but it's important for the page to display properly. So the head, the content of the head is largely invisible to the reader, but it's functioning behind the scenes. Yeah. The body is what's visible to to the reader. So whatever you want your reader to see. So in terms of embedded video, in terms of pictures, in terms of text, terms of headings and subheadings, all the above will come to come in their appropriate tags, between the body tag here and then the last two tags, typically of a page or the body, the closing body tag in the East and the closing HTML tag. So notice the opening the opening tags and the closing tags. So the opening tag is open, carrot tag name close caret. The closing tag is open, Curt, forward, slash, closing tag, or tag name, closing carrot. Another way of conceptualizing this is the box. If the box concepting is not making sense to you, you also think of these as on switches and off switches. So this p here turns a pair turns a paragraph on terms of formatting for a paragraph on this, P here, turns the formatting for paragraph off. This, a here, turns a formatting for a link on the a here, the slash a here, turns the formatting for for a link off. Tag name on switch, slash tag name, I'll switch tag name, on switch. Tag Name, slash, slash tag name, off switch. Tag Name, open the box, slash tag name, close the box. So either concept will work, then the box, the box concept will carry us further, I think, in terms of other kinds of design concerns we'll get into when it comes to mobile mobile design, but for now, with the on switch, Off switch sort of metaphor makes friends for you, then then it certainly will get us fairly well into our journey. Okay, so let's actually then begin our journey into HTML, and we'll do so in a place you don't first anticipate. We'll begin with GitHub Desktop. We'll begin with that tool that bridges the online repository to our local files. If you already have things properly set up from past videos, then you should upon launching the purple cat, our friend, the purple cat. You'll should see your current repository listed here, the one that's currently open. You may have eventually have more to show here, but the 6970 zero repository should appear here. But the changes have happened. Go ahead and commit them or save them to the repository, the remote repository, that's fine. Otherwise, clean this up, because it's all current. So remember that what the buttons do to the rights. So the show and finder button opens up the local version, the local folder, the folder that's that's simply on your desktop or simply on your laptop, on your hard drive, the view on GitHub, then opens up the remote repository@github.com and Github desktop then is the bridge between the two. So things that we changed today that it will start appearing here in the local folder we will sort of push through and manage and then send, eventually here to the remote repository and they will they currently are identical to each other, but as we develop the project locally, I will need to push then using the desktop, the Github desktop, to push them here. But also was a nice one stop shop. Thing to do is that you can also then open up this folder inside the Visual Studio code on one click. So it doesn't just open up. It doesn't just simply open the software. It opens the software to our project, or opens up the project in our in the software directly, immediately, without us having to dig through menus to get there. Okay, though. So the way it's coming up for me right now, maybe for you too, because it's probably as I left it when I shut the session down last time. But we have the file view, the file view here, we have the code view here, and then we have, at the moment, we have then opened up the simple preview, and we got to that simple preview. I'll do it again with a right click of the file name here. So let's go ahead and delete everything that's in the index file and to restore or to start a new, fresh, clean template that has some starter code in place type exclamation point tab, and they're the first sort of fundamental set of boxes that we have to play with. Let's go ahead and begin populating. So again, we were working with tags. We had the title tag here, if you'll remember from a past video, because in the title tag is what goes into the browser tab. And we'll. Call this MLA, 60970, so this is the one bit of visible content in the header. This right here is not the sort of meta language needed for the browser to be responsive and such, but it's not visible here. So this is what we're seeing. That's what our page is currently empty because there's nothing currently between the the body body tags. So again, the body tags are the visible content. So to reinforce that point, let's leave what's called a comment. So it's a note that will be we're leaving, basically to ourselves or to our collaborators that won't be visible in in this view here, but still the note to the back end designers to to know what a section of code is supposed to be doing, open, Curt, exclamation point, dash, dash, let me typing in the contents below in the body tag is the visible content on the page, and just turn the preview off as well. So notice the color coding going on to here. So the white text is the text that will be visible in the browser tab. The blue text is typically the color of the tags themselves, and the green with the with this formatting here, indicates it's it's a note that we've left to ourselves or to our collaborators. So but we'll notice that we've added some some content here, but if we preview this page, the content is not showing up.

Let's go ahead and reinforce that point with an h1 tag. So h1 stands for First level heading. So the title sort of level heading. So title formatting is usually larger than subheading subheading formatting. So the h1 is the largest of the heading formats. H2 is the next largest that etc. So going beyond h3 is pretty rare for most projects that you'll be doing right off the bat, H Tuesday sleeves are probably most common, but let's say, let's say something silly. You use the h1 tags. And again, the H is an abbreviation for heading. So first level heading, first level H is the first level heading. Is formatted by default. This way, we can change the formatting down the Rode. We will soon enough, but for now, we'll leave the default headings as they are, but notice how that differs from the paragraph heading. So we'll type in a set of p tag. So P is short for paragraph. So I hope you're already seeing the pattern. H is short for heading, P is short for paragraph. That won't change an HTML land, um, they'll be it'll be very familiar. So you very shortly, but you type in, you do? You do the Lorem text. So hello, l, O, R, E, M, where we did in the past tutorial, and you notice that we're tagging something differently so that it's in contrast to each other. So the different tags create contrast, which is meaningful, right? So we know that the header text has a certain, certain kind of meaning, certain kinds of meetings, certain quality of meaning that the paragraph text does not and paragraph text have a certain probably volume and quality of content that the that the headings, which are shorter and phrasing do not have. So the P's, the P content is, I

tags are, by default, formatted in a way that contrast contrasts other tags, but are the repeated formatting of similar, similar tags. So when we see the p tags recurring, the the the formatting. The default formatting recurs when we see the tags contrasting the cot, the formatting contrasts. So this to reinforce the crap principle of work here. So

okay, so notice that the sample paragraphs are coming out. They're they're kind of nonsense. They're not readability. There's the placeholders, but notice how they are coming out fairly short to get us in the habit of keeping our content short. So. We could extend these paragraphs as much as we want to, but the encouragement here, the VS code is giving us is, I'll give you some dummy text, but I'm going to remind you induce in doing so to keep the text that replaces it comparably short, because we want to have the short paragraphs to keep up with the good scan ability, right? Okay, do another example, and we've done h1 so let's do an h2

also bold text, like the heading, but notice it is a few points smaller font size, right? Because it's not quite as significant. It's because a title or a heading to a subsection, so called a subtitle, we'll do the same thing, then below or just above the last paragraph I'm

and just to kind of make the point a little bit clearer, as a couple more paragraphs just kind of space out the headings a little bit. So just add another long paragraph and notice again how this it's nice that we can have this visual confirmation that our changes are working with the live preview open. So notice what this is doing. You know at a glance. What if you wanted to go to the second example you know where to jump, jump in without having to slog through the very difficult to read W Latin, but, but this, you know, the outline is being being foregrounded by the formatting. So this is very compatible with and sort of helps to anticipate the layer cake, kind of scanning patterns that readers have, that the Nielsen group identified, right? So the icing, the thicker and thinner layers of icing are the headings and subheadings here, right? So I like this icing here, so I'll read, I'll read the I'll eat the cake here, or I prefer the icing here, so I'll eat the cake here. All pretty simple, right? But, but you, I hope you're seeing the connections already to the crap principle to visual design, that is the HTML isn't just making things pretty or making things sort of fun. They're making things accessible. I mean, it'll become prettier as we go and more emotionally engaging as we go. But accessibility and accommodating or accounting for the readers, the viewers. Reading patterns is vitally important from the very beginning. So before you get too thick into your design, you'll be building in strategies for scannability as you go, and that's what we're doing right now. So another principle of scan ability is bold text. So bold is as easy as headings and subheadings and paragraphs. So I'll take the second paragraph here and I'll go use the letter B. Notice how it gives me both of the opening and closing tag together, which is a nice reminder that I have to have the closing companion, but I have to copy, cut and paste the closing tag to the end of the phrase I want to put into bold. This, opens the box, puts content in the box, closes the box, turns on the formatting, turns off the formatting, h for h for heading, P for paragraph, B for bold. Another way of doing the same thing. I think this should have the same result. Is the word strong. I

so either way will get you there. You can't mix and match tags. So if you start with strong, close it out with strong. You start with B, close it out with B. Either method will work. Just be consistent with the one you choose. It doesn't matter to me. If you need to bold. You do need to use bold text appropriately. How you bold that text with HTML is up to you. Just be consistent in the method you use. The same thing applies then to italicized text. So I for italics will work when you properly tag the content you want italicized. I so it's harder to see, maybe, but you can still capture the I tell us that text here. What should also work is em for emphasis. So here's there's the. Em example here, here's the example here, here's a strong example, here, here's the B example here. So there's no theoretical limit to my knowledge of how many boxes can go inside other boxes, right? So you inside the body box, which is the visible content box, we have an h1 box, a P box, an h2 box, two more P boxes, another h2 box, two more P boxes. But those P boxes, the paragraph boxes, then have, oftentimes as many as two sub nested boxes for the formatting that takes place inside so.

Transcribed by https://otter.ai

## week1_08_HTML_Links_otter_ai.txt

Okay, so let's add some links. Essential. It's our first moment of actually engaging with hypertext. So hypertext is text that is interactive and dynamic, as opposed to static print text, right? So hypertext is dynamic text, interactive text, so the syntax is a little bit different, little bit longer than we had with with the other kinds of tagging, but it's also pretty straightforward. I mean, once you get the hang of it, and very consistent. So once you see the pattern, you'll see the pattern again and again and again to reinforce it. It would be nice if the tag for the link started with the letter L. It does not. L is used for lists, so, o, l, u, l, ordered, unordered lists. So we need to use a different letter to create our links, and that letter is the letter A, so where it doesn't make as much initial sense as B for bold or I for italics or P for paragraph. It does make sense because A stands for anchor, and so by creating this anchor, a anchor, we're basically linking or connecting our document to another document sort of or tethering or anchoring two documents together. But let's make a link to TCU website. So a, open, Curt, a space, HR, E, F, H, R, E, F equals, quote, unquote, HTTPS. Colon, slash, slash. You. Slash, slash, www.tcu.edu, tcu.edu and quotes, close, Curt, and then between the opening tag and the closing tag I'll type in this will serve as a link to TCU websites. Okay, they came all typo, and you can see from the simple preview that the text is appearing as we typed it, but it's also blue, so formatted differently because it's kind of needs to contrast the non linkable text here, but blue means that it's probably working. So let's go ahead and test it. So I'll go ahead and click this link here. It does work. So pretty effective. Let me reopen my preview something unexpected happened, but the link itself is working. Let me go ahead and open the browser review, just to have that handy. I Yeah.

So here's the link again, and here's the resulting action of these use website opening up. So pretty cool, pretty easy. So let me explain the syntax a little bit to kind of seal that down a bit more. So a stand for anchor. You're anchoring two documents together, two sites to paid, two web pages together, HR, EF, stand for hypertext reference. By asking the viewer to click on a link, you're referring them to someone else's source. I refer you through this link to TCU web page. I refer you through hyper text to this web page. Okay, just to practice the syntax, let's do another, another example. So it's also a href equals. In this case, I'll do the HTTPS, which we'll need to include, so the full web address, and I'll try guitar center.com Okay, so, so the link is here, but notice what's happening here. They're not even though they're in separate lines here, they're not in separate lines here, right? Because they haven't been distinguished. The texts have been distinguished as being separate from each other. They're both linked, but then I tag to be also separate from each other. So all we need to do is then to put them, each sentence into its own paragraph. And even though it's working already, we can do to go ahead and do the same thing here. So copy, cut and paste the closing tag outside the closing a tag. Okay, and we'll test that out. And there's a new deals added at Guitar Center, which. Was good to know about.

So there's a usability consideration we need to sort of talk about for a second. So the goal here is to make your content accessible and attractive, so people want to hang out with your content as long as possible, to sustain the viewers attention and interest in your content, so they leave your site for a moment through a link that you've given them. You want them to come back to your site. Okay, so here's your site. So notice what happens here in this tab here, when we click on one of our links, we go, we go to the tab. Content is replaced by new site content, which makes sense. But if I want to go back to your site, and I force of habit, click on and close the tab instead of, instead of back spacing here, I leave your site entirely. So I did sort of returning to your site by by click closing the tab, I'm leaving your site entirely because the new site replaced your, your your site in the same tab. So if we do this again, but we add inside the closing carrier bracket, target equals, quote, unquote, underscore, blank. So if you do that and preview the page,

notice what happens here now. So T's use page still opens up as we desire. But if I say, Okay, thanks, I got the point I need from this page. I want to go back to your site. I close, close the new tab that the page opened into to go back to the original so let's go ahead and add the target equals blank to both links. So if you were if this were referring to a page in your own site, you wouldn't add this. But for since we're going to external resources, it makes sense to add it to external links refresh the page to make sure that changes are taking place. Test Guitar Center close out of this tab, and then I'm back back to where you want me to return, which is your site. So this is part of the ambition to keep, to get to the reader's attention, but to sustain their attention. So you want to make it easier for them to get back to your content. If they're they're curious about finding out more of what you have there. Okay, so I'm going to pause here, and I'm going to end the session, and then I will come back and do images and such. I'm.

Transcribed by https://otter.ai

## week1_09_HTML_images_otter_ai.txt

So let's go ahead and add some images. So while, while I was setting things up for this section, I went ahead and created an images folder and put some images into it. So what I want you to do right now, you can pause the video to do so yourself is create a new folder. So there's in the file explorer, you'll see little folder icon on the plus sign, just type in the word images, all lowercase, no spaces. So create a folder called images. Was like, like, what I have here, and then put into the folder some random pictures you don't mind using some playing with. So JPEGs, gifts, PNGs are all fine Web. PS don't work well, won't work in the bigger picture. PSDs will be too big. Tips will be too big. So then the nice, universal file types of GIFs, PNGs or JPEGs would be great. You can get there from easily, quickly, from GitHub, desktop I go to Show in Finder to create a folder here, put some images inside the folder there, and then come back. Ready to go. So go ahead and pause the video if you needed it, some time to do so and make sure it's stuff you're comfortable playing with, so no nothing that you wouldn't otherwise want to post online. Okay, so I'm assuming you have paused long enough to populate your images folder with a couple images, so I'm tabbing down between two paragraphs. So we want to insert what's called an empty tag, because we're inserting information rather than tagging information. In this case, we can't use i by itself, because I is reserved for italics, which we've already seen in a previous section of the video, but we can use IMG, which is short for image. It's a pretty extensible abbreviation for the word image. So open, Curt, IMG, space, src, which is short for source, source. So we need to let the browser know where the images to be found was, was a source of information. So I go, go inside the images folder which we have the option to include. Then you choose the picture you want to you want to insert at this point. Then you close the carrot, so open carrot img space img for image, space SRC for source. So typos make a difference. So if you have SCR it won't work. So it has to be SRC for source. Equals quote, unquote images, slash file name, and again, make sure it's a PNG, JPEG or GIF. Okay, so let's see how that looks. So the results will be wildly different based on the images we're using. So my results here will resemble but be still different than your results, because the sizing of the image and the content of the image will be different. But it's working. So two bass players very important to me, Paul McCartney and Getty Lee. I hope you know their work. So this isn't so bad. It's inserted between two paragraphs as I wanted it to. It's bringing some color, some joy, some contrast to the page. But I'd like it to take out the whole space here. So that's my result here. Give the image that I have to play with. Your result might might also be working, but the image might be so big as pushing out the other content off the page. So mine's a little bit smaller, smaller than I want, so yours might be much bigger than you want. So either way, do the same things as I'm about to do. So inside the the image tag, type in the word width equals 100% and then see what happens there. That's better. So understand what the 100% stands for. So it's not saying size it to 100% of the original width of the file. So if it's 3000 pixels, make sure it stays at a 3000 pixels. It's not saying that. It's saying make sure the image fills 100% of the width of the available browser space, right? So it goes the full width of the page. But notice, and this is important, and this is helpful and a good thing. If we resize, resize the browser, the image resizes too. So look looks good on a laptop. Look good, look fairly good still on a mobile device. So setting the width to a percentage, in this case, 100% you. Will help to ensure that your site will will be equally appealing on multiple devices. So again, we're anticipating some that we'll get into mobile design, so responsive design, fluid design, so the content kind of molds itself to the container that it finds itself in. So to make the point about responsiveness and why working with percentages is better than working with fixed pixels. Say, I Say I want it to be 1000 pixels. Or no, let's say 2000 pixels.

Well, first of all, it's too big, right for my space. But also notice it doesn't respond because there's a fixed pixel width, but if we have it more like 100%

what counts for 100% is changing because the width of the browser is changing. So responsive design is part of user experience, or helps to enhance user experience. So we're we're building things with that in mind. So we're building towards something here. I'm.

Transcribed by https://otter.ai

## week1_10_HTML_Lists_otter_ai.txt

Okay, so we in past sections of this video, this larger tutorial, we've covered the relationship between tagging and scannability, and then we've gone beyond that a little bit too. So let's now talk about the last concern of scan ability, which is listing. So they're they're fairly simple, and they have their own sort of tags to make them visually work. But let's go ahead and create our first list. So I'm tabbing down. I created a couple of additional paragraphs real quick just by copying pasting the above, and I'm tabbing down between the last two paragraphs. I'm creating one small paragraph with the text that says, This is my first list. Then I'll type in my list item, like the content of my list I'm okay, so let's sort of see what happens here. So here's my let's go zoom in a little bit. Here's my image, here's my links. Here's what I just typed. So this is in his own paragraph, which makes sense. Here's my list content was not showing up as a list yet, even though they've been broken up into individual lines here. So we need to create that. We need to tag this appropriately. So it does so the browser knows this is actually content that needs to be listed properly. Let's make a bullet list first. So a bullet list tag is UL, pl, central list. The bullet stands for unordered. And I'll put that down here. There's a closing tag after the list. We need to tag the individual list items with an LI list item li to separate the items from each other, to distinguish them from each Other.

So I used the UL to create the larger bulleted list formats. Then I distinguish each list item at least bullet points, rather with the li tags, opening and closing tags. So let's look at that. So there we go. That's much more listed. List, list worthy. List, list appropriate, so the UL is on ordered list. So these, it doesn't matter what order these appear in, so they're all important, but they're not essential in any sort of specific order. But if you want to make it a numbered list, you want to call it an O L for ordered list. So all you have to do is change the use to o's and the opening closing tags here,

and then the bullet points become numbers here. So this is the last concern of scalability that we'll talk about in these videos. We'll come back to scalability in different contexts later on. But notice by if it's getting the page, it's easy to sort of see this information being offset, being bowed down to the essential phrasing is the essential takeaways, the essential action steps. But also notice that it does break things up in a nice way. It does create some white space, which then allows us that, as this is empty, so I don't need to spend much time here. I'll focus then on this area over here, where the listing information is. So this is breathing room. This is information I don't have to process, which is a relaxing space that allows me then to focus on some easily ingestible information here. So we will move on to other matters, but this is the end of the HTML discussion. We'll get into more advanced stuff as we go. I.

Transcribed by https://otter.ai

## week1_11_Pushing_Updated_Content_otter_ai.txt

So before we get into more advanced matters concerning HTML or CSS, we need to make sure we're backing up our work to GitHub, right? So that's one step that we haven't taken in a while. So let's do so now, since we've made so many nice updates to our index page using HTML. Okay, so if you go to get to Github desktop, the purple cat or purple cat friend,

you'll notice that there's some files. The file here called index, which you've just been editing in the HTML sequence, has a bunch of changes to include,

so you want to make sure you're updating that to commit those those changes. So includes the images, includes the links, includes the bullet the in this case, the numbered list. So we want all those, all those recent changes to be

updated to the GitHub servers, to the remote repository on GitHub. So this was just one file we've we've committed so far, or maybe more. If you haven't updated since you've created your images folder, it'll include that too,

but make sure you go ahead and commit that,

push to origin.

And then so we can look at our local folder. My timestamp here is today, at 857,

go on GitHub.

This has been updated just now

that includes images,

includes links

and includes a numbered list. So this is the current version. Okay, so when you finish a session of editing, it's always a good idea to go to GitHub

Desktop

and commit the changes you've made in that session just to periodically be and frequently backing up your work.

Okay, that's it. Applause.

Transcribed by https://otter.ai

## week1_12_Sharing_the_Right_Version_otter_ai.txt

Hey, a couple more quick things as we wrap up our HTML training. We in the last video, we backed up our local folder to our GitHub repository, our remote repository. Important step, it's gonna review one part though that we did in the original GitHub tutorial that is relevant. Now, since we're out, we are updating our files online. So I'm gonna go to github.com our repository view there, I want to remind you about the settings you need to have so you can actually see it properly posted online, so not off your local machine, but actually properly off the GitHub servers. So if you go to settings and go to pages, so this, again, this should be review of the original GitHub video. So want to make sure that you have you're deploying from a branch under source, that your branches, the main branch, and the root folder in that branch. And so your address should look like this, right here, where I have tsu, hyphen, C, Dex, you'll have your username. So this is the username for my GitHub account that I'm using currently, right so this right here as your username, which is different than mine, should go right here before the period. So we all should have username.github.io/ 60970, so the second half is the same for all of us. The only difference should be the username placed here. Okay, so you click on that, and that is then the live sites. So it's not being viewed locally. It's being served to us through the GitHub servers, online at this web address. Learning Curve alert. So we when you're reviewing your work, you're trying to make updates between your local files and your remote files, and you're in front of what you're seeing, where you want to make sure you understand which version you're looking at in the browser, because this version here in the browser view looks like this version here in The browser view, which looks like this version here, and they are all identical content, but they're being shown to us through different locations. So this first version is being shown to us directly from our local folder. So if you have file, colon, slash, slash, slash, users, your username, documents, etc, it begins with file or the letter C, colon. If you're a PC, PC user, then that's the pathway to the files on your local machine. So you'll see them directly out of this folder. So that's version one, version one of three that we need to distinguish. Version two. When it begins like this, the number may be different, but it'll be begin numerically. That's the version being viewed through VS code through live server. So the full browser review of VS code live server of your project, right? So if we were to make changes in VS code, then those changes would show up here in real time. So then version three, right again. This all looks the same because everything is up to date. But this is the web address that is a live web address. So if you sent this to send this one to me, or your version of this to me, I'd be able to see it because you've met, you've you've committed and pushed it remotely, so the files are current on the remote server. Remote Server is set to public so that anyone with this address can get to those files without any special permissions beyond what you've already set up. If you give me, if you send me this version here, I will not have access to that because that's only being served up through VS code locally. If you send me this version here, same thing, I will not have access to this because it's being served up only to you locally, right? So the only version that I'll have access to to enjoy what you've been developing, it'll be the version that that begins with your username here. Okay, so this is what's shared with with employers, with classmates, with instructors, with friends, with grandparents. This is, again, this is just for your eyes only. Basically your preview during your development in VS code. And then this version here, again, is a node. The way of seeing your local files. Okay? So visually here, the difference is not necessarily going to be in the content here, the difference will be the which version you're looking at will be all distinguished by what you're seeing in the address box in the browser you.

Transcribed by https://otter.ai

## week2_020_CSS_with_without_otter_ai.txt

Hey, welcome back before we get into the substance of our next round of considerations with web development, namely CSS cascading style sheets, I want to show you something real quick. So I have started updating my creative portfolio. So not professional, but the portfolio that highlights some of my creative activity over the last several years. So it's been overdue for for an upgrade. And this is the content. This is the this is the view of the HTML side of things. So this is what you're seeing here. Is built entirely on HTML, and so it's got poetry to link to, it's got interactive literary work to link to, has music to link to, so it's got some really great sort of linked links content. But I hope you'll agree the visual presentation is atrocious or insufficient, I mean, to kind of get and keep the viewers attention, as we've been trying to do for somebody who doesn't know me, they wouldn't take me seriously with this, with the site, okay? So HTML has structured the content, it's arranged. The content has embedded images, has provided links. So all they got all that important stuff, but in terms of making it personal and unique and warm and inviting and actually even more visually organized, we need something else. So let me show you one difference then. So this is the view of my site based solely on, entirely on HTML. And this I do one quick change here, add this CSS back. Here's the site with CSS, so you can sort of see the difference. You can see the power of CSS. So there's a sense of style. So the this the first s of CSS, Cascading Style Sheet, the style that you're seeing, the unique sort of appearance, the use of color, the arrangement of elements in the boxes, side by side boxes instead of stacking on top of each other. All that is happening through CSS. HTML is wonderful, is essential, but we can't do this kind of work or better work than this. And this is, this is fine without the assistance. And so understanding of what CSS does. So that's what this week is we'll be focusing on, is getting you is really advancing your skills considerably by delving into the wonderful world of cascading style sheets, and we'll define that as we move into our next videos. You.

Transcribed by https://otter.ai

## week2_021_IntrotoCSS_otter_ai.txt

Okay, now that you've seen a world with and a world without CSS, in terms of the example I showed of my creative portfolio, you see how HTML

gets the content organized and basically arranged in links, but really by itself, as I hope that example that last video shows, it's

visually insufficient. So in terms of personality, in terms of a warm, inviting sort of feel, a visual, a visual encouragement to keep on, to stay in the site and dig deeper into the site. HTML, by itself doesn't provide that. It can't provide that by itself. But that's okay, because we have a compatible language called Cascading Style Sheets CSS,

that augments what HTML does design wise. So HTML is good for structuring the house, like roughing out framing the house so defining the spaces and where what content goes, where in the house.

But the CSS is the design side of things, the style, the what the interior designer does for a house to make it more warm and inviting, so comfortable furniture, artwork,

painting on the walls that is comforting and suits the mood of each room and the identity of the family, all the personality and branding that goes on as a matter of CSS.

Okay, so CSS is not new. It's it's been around since, like this slide says, since 1999 so to pick up on the metaphor I used a second ago, where the HTML is kind of roughing out the frame and framing a house. HTML is structural. So building the underlying structure, the building of the building of the site,

with CSS, as this slide suggests, is presentational. So for the appeal to give the presentation itself, there has to be an attractive sort of appearance is being controlled and developed and enhanced by

the CSS. So the colors, the font choices.

Okay, so there are three ways that we can possibly potentially manage CSS at our sites, but generally speaking, CSS is managed by a separate file, a dot css file. So it's usually a style dot CSS file that will contain the style for the whole site that will then modify and make more attractive the specific elements we identify with the CSS.

Okay, so the best way that I know how to introduce CSS conceptually is that when the browser is calling up your current site, so that your current HTML based site, there are choices being made for you by default, by browsers default. So the choosing they're choosing for you a white background, they're choosing for you a black text, choosing for you a certain size of heading and subheading text when you tag it, h1 h2

is deciding for you by default a certain font choice, in my case, is a serif font, which is fine, you have to get started somewhere, right? But what CSS does then it gives us the chance to override and redefine those defaults. If you don't like the color of the h1 and h2

tags, for example, or although the content is tagged by h1 and h2

we can override those defaults and choose our own colors for h1 h2 tags or tag content. Okay, so powerful sort of capacity of CSS is, then it gives us the ability to redefine the look and and default settings for

how things are, how things appear once they're tagged.

But selector is a tag you want to modify, so P or h1 or h2 or i, m, G, or whatever tags we've already started using, we want to modify this tag,

and not just this tag with this particular property of this tag, so not just the p tag, but the font size of the of what gets tagged as p as paragraphs.

And then you assign a new value if the browser has the font size as 12 on 12 pixels, we can override that by saying P font, hyphen, size, colon, 18 p, x for 18 pixels, right? So we can choose to say, Well, thanks, browser. We don't like your choices, so we're going to we want the font size to always be 18 for P, for P, tag, content, the

example here is.

Is four paragraphs text

for all things that everything is tagged P tagged as a paragraph.

Change the background behind it to blue. And so notice how, even though this is not HTML, this is a language, it still has the same sort of virtue

of being readable in English, right? So P we know is abbreviation for paragraph.

Background. Here is a shortened version of background, color, background, hyphen color,

and we could have a hex on RGB value for the color. We could also use primary names like or familiar English names like blue or purple or Aqua. Okay, so selector is a tag that you want to modify.

Property is the quality that you want, the feature of that of the tag that you want to specify in your changes. So I want to, I want to change start by addressing what goes on with the paragraph tags

specifically. Let's, let's modify the background color behind the paragraph text

and change that color that the value of that color to blue.

Okay, so again, this is modifying the default settings of the browser for specific tags.

Anything that's tagged a certain way will have a variety of qualities that we can modify. So background, color, font family, how the text aligns left and right, a border around that about that around that container, that box,

the amount of space between the box, the boxes border, and the content itself, all that sort of stuff. So we could have then a chain of things within a single sort of CSS command

that we modify, not just background. We want to modify a whole bunch of the default settings.

Okay, so we have a list of things to change, to

potentially modify,

okay, so CSS sort of honors and picks up on and gives us control over the appearance of the boxes we make with our tagging in HTML, every tag pair creates a box, a conceptual box. So by putting content between 2p tags, we're putting that content into a paragraph box, right? So that box has invisible qualities that we can then play with and make, make visible and make make our own through through CSS styling,

right? So there's going to be the height and width that we have to play with. We have padding, which is the space between the content, which is blue and the border which is black. So padding is like the bubble wrap that you'll use to pack your content to kind of space things out and kind of give a cushion between elements on your page. So the border is this black line here that can be set to different colors, different textures, different widths, and then the margin is the space between this element, they say, this paragraph and this image. So the margin is the space between.

So padding is the space inside.

A box.

The margin is a space between boxes. So, I mean, we don't think of paragraphs as being boxes, per se, but for the design way, in a visual way, they can be conceived of and designed as if they are proper boxes. They're in their own separate containers that can be styled to our specifications. So given that the body box is the visible box, the stuff that we want our viewer to see, and all that content appears within the body tag, the CSS that will develop for the site will then will be modifying things primarily in the body box, almost exclusively in the body box. So the tags of paragraphs, 822, images, iframes, for video, all that stuff we want that our viewer to at some point see. That's the sort of stuff that gets modified by CSS, and that's the stuff that is contained exclusively in the body box, right?

Okay, a quick point about color to kind of nail down the point I referred to earlier. So the example of the paragraph

background that we wanted to redefine as blue. These are the kinds of options we have, right? So not just the primary colors of red, green and blue, but we have aqua, we have Fauci, we have lime, we have maroon, we have teal, we have olive Navy, which is a is different than blue. So we can use a fairly, a fair range of colors, just by their primary names, by.

Their by their sort of English names.

But if we are hip to or seek out or want to learn about more nuanced colors than than those primary names, we can use RGB, so red, green, blue, or just a or we can use a hexadecimal, which is another way of creating color.

So, like, if you want to use TCS purple, so that'll show up. Like TCS website you'd use in 4d, 1979,

that's that stands for, they'll they'll render then TCU is web purple. So the word purple that you that you can type in will be purple and the purple family, but the branded sort of the one purple that we're fond of as TCU, for the TCU family would be for 4d, 1979, but I

think that's good enough for now. We'll reinforce the principles we just covered once we get back to redesigning our our files from last week,

and we'll take things further, because CSS opens up a brand new

region for us to further explore in our so.

Transcribed by https://otter.ai

## week2_022_CSS_EnchancingHTML_otter_ai.txt

So at this point, we have seen both

a world with and a role without. CSS.

Got an overview, a sense of what it can do to complement and enhance and really extend considerably HTML, where HTML structures the website,

CSS prepares it for presentation. It's

not just the organization of good content, but also the appealing presentation through CSS. And so that's what we will get hands on practice with in this video.

So to go back into VS code, I find it's oftentimes simplest to go to GitHub Desktop first, or purple cat friend, where we had the option to, again, view the files locally, or we could go into the editing of the code itself locally

in Visual Studio. So let's go ahead and choose that option, and we can sort of see where we left things.

So let's do this. So it has a layer cake structure in place as a short paragraph in bold text place. It's got an image that might be a little bit too big, but still, it's in place. So it's set up for basic structure and scan ability, but that's considered an essential, but still inadequate. In terms of the big the big picture, it has to be much more inviting than this. It still seems pretty cold. It's organized thoughtfully. It's prepared for web reading, but it's not ready for the interview, not dressed for the interview, if you will. So let's, let's add some styles, some choices make this even more legible than it is through font size, through font color. And then we'll begin beautifying our sites.

As we touched on in the last video, there are three ways of managing CSS, so let's kind of, let's prepare for the CSS before we begin coding CSS. The most practical, the primary way that you'll want to sort of think about organizing your CSS is through a separate CSS file

that we can create here real quick. So in the File Explorer, click on the new file icon and then call a file style, dot CSS. So it's really important you add the extension dot CSS for the browser and VS code both know the difference between what you want in these files, you need to you need to include the proper extension. So the HTML has to be here, PNG, JPEG has to be here, and CSS has to be here. So I've inadvertently put the file here in the images folder. I can simply drag it out. So I should be able to drag it out and into the main folder. So this should be outside the images folder.

Okay, let's make one more bit of preparation before we can sort of see the magic that CSS will make possible. So we need to sort of say, hey index file or hey HTML file. We have some CSS ready for you. It can be found here, right? So we need to create a link to this from to the from this file here to this file here. So let's

this tab inside the head, because the head is the is the is the sort of the meta content for the page to display. Well, okay, so to link this file here to this file here,

we need to add a bit of information to the head of the page, so not the body. This is not visible content for your viewer. This is for the page to display properly, which is suitable for the head region. So open Curt link, because we're creating a link,

R, E, L, for, excuse me, for relative. It's linking to a style sheet.

The style sheet, the style sheet we're trying to reference, is called

dot css,

and so make sure that the file name here is identically spelled here. So if it's styles plural here, it needs to be styles plural here, if it's style singular, here, needs to be style singular here, make sure you close it with a curt bracket. So

let me just show you one quick side note, so say I forgot to type in the closing bracket. So then the line itself, line seven of the of the of the head region. It looks okay, but notice there's the head. The closing head tag is red,

so that indicates someplace above there's an there's an issue. It doesn't say exactly what what it is. But in the case something hasn't been tagged properly or punctuated properly or whatever. So if you see red, go back, go back to that area of your code just above to sort of see what, what typos you may have introduced, which is a natural part of the process, but this helps us to

not pinpoint, but generally locate. I.

Know what the problems might exist. So when I put the Curt, the closing Curt bracket in

the head tag turned properly blue again.

So we have this, this file here, linked to the HTML file here, through this, through the what I have in line seven. So line numbers don't, don't matter in terms of if you're if you're a link here is in line, line 10, as long as it's between the head tags, you should be fine. Shouldn't affect the functioning of your of your CSS. It's more for reference, for conversation sake. I might say something like, make sure you have

coded into your page. What I have in line seven, right? So it doesn't have to be line seven in your in your code, but it has to be the same general location.

Okay, alright. So let's test this.

The pages as we left it functional, but certainly not pretty.

But let me add some more purple, because I'm TCU loyal, I'll add some purple to make my my heading purple, and sort of see how that works. And then I'll change the font, the font type too. Okay, so I'm gonna click, click this right here to turn off the assistance. We may get back into AI as we go for not going to turn it off. So right now, I want to change the, maybe the font choice and the font color of the of just the h1 tag. So that's another way of putting it. I want to change the I want to select this tag. It's called the selector results of the tag that we want to we want to modify.

And I want to change the defaults in the following ways. Oh, I want to change the color to TCU purple for the 1979,

you may choose your own color, but I'm choosing TCU purple. And before I go further, I'm going to check to see if that's working. Okay, that has been changed. It's maybe kind of hard to see, but this is purple, not black. So we want to change the font as well, so it's font family, and there's a good number. We can't go as crazy with fonts and on the web that we can on print and print, but we can make some personalized choices that are different than the default choice. So I will choose, I have a long relationship with Gill Sans. Let's try that one, and so check that out and see if that works. Okay, quite different. Okay, so they've become a little more unique. So I'm making my choices. I'm choosing Gill Sans. You can choose whatever font you want, and you will have even more options than than what we have here

through font family,

but let's just use the available fonts from, from, VS code at the moment. Okay. So one thing that I need to do, I thought I had done before, but need to do make sure, is I want to make sure that my code is wrap, is wrapping, so I can sort of see it in the full window, and it doesn't have I don't need to go off screen to view it.

So view word wrap.

Okay, so the h1 tag is a tag that we're selecting to change, to modify from its defaults. So it's the h1 here is the selector

inside curly braces. So

that's part of the punctuation for this CSS statement.

Then the next is the property we want to change from the default specifically. So the select this has a lot of qualities, a lot of properties. We're choosing this one property here to modify. So selector, property, and we're changing the property to this value.

I wanted to contrast still nicely the white background, so I'm going to choose a darker color. The TC purple fits that description.

So selector, property, value,

selector, still a still different property, in this case, different set of values. Here, selector, curly brace,

property, colon,

value, semicolon,

so the semicolon indicates I'm done with it. I'm done with with the changes for this property. But there may be more. So I'll add additional ones here. Say you want to make sure, for repetition, that the h1 and h2 share both the same color and the same font. Two ways of doing that, one

simpler than the other. I just copy and pasted the h1 and duplicated it by changing the selector h2

which works, right? So that's an obvious way to do it. It adds more line to code than there are other method, but it'll be a way of doing it.

What.

You could also do is,

and then in the selector region,

in line one, for me, have line one comma,

h1, comma, h2, and see if that does the same thing it does.

So you can modify, so if you want to modify some defaults, and then there's some elements share default that you want to modify across. Modify across the site. You can have a collective selector here, so you can select, in a sense, or put in the selected space more than one tag. So whichever makes more sense to you. It might make sense to separate, it might make more sense to combine either way, obviously gets the job done.

Okay, so let's change the paragraph in a variety of ways. It's awfully small. There's not much space between lines. It's maybe not the most original font. So let's try that. So we'll start a new CSS statement. We want to modify and select the p tag,

curly braces,

and let's try. I can choose the same font family if I want to, if

you want to, recommendations, probably not an absolute rule. I would probably make the more

decorative font, the fancier font, the larger text, and make a plainer font, the simpler font, the body text to make sure you're not compromising legibility.

So that sort of updates and has some repetition of the font choice, the font family. But let's play the font size and then spacing between the lines. This is very tightly single spaced.

Let's see if we can sort of air things out a little bit. So font size is font hyphen size. We'll explain this number of this value later, but let's go ahead and put in like 1.3

em,

and that makes it more legible. And so this is really important. And so you're not designing for if you're 25 years old and have decent eyesight,

you're not designing for your vision. You're designing for a stranger's vision. But larger font size benefits everybody. So if you if you need, if you can refine print, fine print or not.

Larger font size is still easier to read, but you'll lose audience. You'll lose potential audience if you have the tiny font size like, like the original default, right? So it's not just if it looks good to you, if it looks good to you, and those who have different ability than you do, vision is different, the

sense of color is different, right? So you want to make sure you're accommodating those differences, not just looks good, simply

narrowly to you.

Okay? So that helps, I think, makes the text more, little more inviting. The font is more fun, and then the the font size is more accessible to more readers. So let me modify the paragraphs default settings for the line spacing, double spacing, single spacing is not, is not part of the vocabulary of HTML. It's called line height.

So basically, the space between lines, the height between lines,

and we'll work with the same values here, like so maybe 1.2

that's more double spaced looking, but it gives much more granular control. This way, two

is probably too much.

1.6 is looking pretty good. Maybe try to try 1.5

that's even better.

Again. So white spaces creates a friendlier vibe. So things that are compacted, especially if it's textual data that's compacted, that's not friendly, it's not it's not easily read. It's it looks like a lot of work if it's aired out through spaces, you know, through the layer caking of headings and subheadings, but also aired out and the paragraph itself,

it's going to be we'll have more patients going through, more of that content aired out. We'll have more patience with the con or the content.

Okay. So interesting thing is, has occurred, which I didn't anticipate, but it makes complete sense, if once you start thinking about the boxes that HTML creates. So notice, and this may be happening for you too. Was an easy fix that our list hasn't, has not been updated in terms of the font font or font size or font spacing.

So there's a couple ways we can address that. But because this is a different this is being formatted by a different tag.

Tag. It won't yet have the same formatting features that we just added to the paragraph tag.

So the links are are tagged as paragraphs, so they look they look like the body text, but the list is back tagged as something, as a, as a, in this case, a, an OL, an ordered list. So it's going to have different formatting at the moment, we can change that, of course, because we have control over that with CSS.

So let's try a couple different methods. Let's try simply see what happens when we type in UL,

didn't do anything. Okay,

so let's do what we did. Let's try. Let's try.

Li. There we go. So

we're not changing what's tagged. The larger, the larger box of the list we're charging. We're changing the LI tag.

We're reformatting not this, but this, these boxes.

So we reformatting the LI tag, which then is more aired out, but also is of a compatible font with the body, the paragraph text, and shares the same sort of enhanced legibility.

So we've, we've set up our first bit of CSS.

We've actually through even though we have basically two statements here, we've modified four tags, which is pretty efficient, and these, each of these tags are subject to additional modifications if we want to. So say we want to make a change just to the h2 tag that will differ from the h1 tag. So say we want whenever we use these h2 tags throughout the whole site, so we want only the h2 tags to be italicized. So we could italicize each h2 as we go in to the HTML, line by line, enter in one statement that will change all the ages H twos at once. So it helps you kind of get a sense of the efficiency of CSS. So fonts

style italic. So we'll go back and preview.

So if this worked properly, all the h2 tags will share the same color and font choices the h1 but it unlike the h1 should also be italicized.

There we go. So contrast and repetition both between the h1 h2 tags. So every time we tag anything h2 throughout the whole site, it will be italicized. So if you don't want that, we don't include this here. But if we do want that, we can save ourselves a lot of additional tagging, line by line, by having the one statement here. So this is only a small taste, but hopefully it's a helpful taste of what CSS can do to modify and override the default settings that browsers use to render specific tags.

The one one critique that I have still is that the text is pretty cramped against the left and right margin right, so there's not much breathing room here. So there's white space between and above, but not much white space left and right. So if you have a real wide browser,

that's also going to make it harder to read,

because the eye has to keep a 30 line across more than natural span of text. So this is harder to read

than this would be,

because the eye doesn't have to jump back so far to go to the next line.

But this is much will be much harder to read to keep your high eye on the proper pathway. So you want to accommodate different browser widths so it looks it looks decent in both environments. So we can do that with an existing tag, but we have to use some some new CSS to create that. So let's go ahead and add a box inside the body box called main. It's like Main Street.

So this would be the main sub box in the body box.

So open carrot, the word main, M, A, M, a, I, N, close, caret, then open. Caret, slash main and the closing care the closing tag, the off switch, the closing of the box, the main box, put that just above

the closing body tag. So the closing main tag should be right above the closing body tag. The opening main tag should be just inside, just

beneath the.

Opening body tag.

Okay, so let's use this tag for a constructive purpose, and the purpose that I that I have in mind in this case, is to add some margin to the

pace reading pathways is manageable no matter how wide the browser is. Okay? So we go back to our friendly CSS, and we want to modify the main tag.

We want to use main tag as a selector, and then we want to change we want to change the margin.

So say, we want to add maybe a 10% buffer on both sides, so 10% of the available screen width, leaving the text to be the body content to be 80% of the available screen space. So let's try that. So 10%

margin, left and right.

So the word margin, then the colon, and then the space, 10%

colon. So

the margin, colon, 10% semicolon,

so make sure the punctuation is there. So this is happening between the mains, curly brackets.

And so outside the P and the Li is curly brackets. So spacing things out a little bit more between might be actually be helpful. Okay, so that actually helps pretty well. That's kind of what I'm shooting for. So I'm shooting 10%

you can choose a larger or smaller number, but I think having some cushion again is it makes the text more inviting look like less work. And that would that will work, apply even as we change the browser with and that looks pretty good. I'm actually fairly pleased with that.

So let me show you a quick way to sort of test the how things are working are not working.

So I gotta highlight the the

main statement here, I'm going to hit control, or maybe on a PC control, Mac command, command, forward slash. And

what that does is, was called, commenting out the code, right? So you're basically, it's still there you want. You just want to see how it's, how it's working. So we're going to comment it out. So we're, we'll, we'll basically turn it off. Believe the text in place where they have just have this punctuation around it. So this is the, this is the the content with the main css, the margin CSS commented out or turned off temporarily. If you want to undo, if you want to turn the main content back on, just anything commands

slash, forward, slash, and you can, and you can see, this is nice. This is, this is this is working. Content is meaningless. Picture maybe only is meaningful to me personally. Maybe not see all, but in

terms of something that's a little more inviting, a little more appealing, a little more encouraging, to say, Okay, it's, let's see, let's, let's spend a little more time scanning so we can sort of see if this is of interest to our personal needs. So one, one point to make, though, small point, but also important

that I added the space I wanted left and right, right. So that's a nice, nice cushion on both sides, the margin on both sides. But I also added cushion up here on top that I don't I don't necessarily need right? Having the having the title, the content, begin at the top of the page, is not a problem.

So I can be a little more specific as to where I want the margin to go, right? So right now, adding the 10, 10% margin, as I have here,

as it doesn't distinguish which sides it goes to. It goes to all four sides of that box, so left, right, and also top and bottom. So I can specify if I want to, where do I want the margin to go? So if I type in Mar, use the word margin, hyphen, left, I

and then

margin hyphen rights also 10%

that'll specify in target which borders I want to

I Want to

apply margin too.

So that way I'm at the top of the page and not a problematic way

with so there's no margin up here. Besides, it's a small cushion above the h1 text, but I still have the margin left and right, and the bottom of the page should be fine too.

Yeah, there's no margin there. We could add margin if you wanted to. If you want to add some margin to the bottom or the top, we could maybe use a smaller, smaller value. So, margin, hyphen, top,

save, say, 5% i.

So that returns some margin to the top, which is not a problem. Return some margin to the bottom, which it helps it seem a little less cramped in the bottom. So if

a lot of creative control, a lot of creative control. A lot of creative control. Part of, I think, the learning curve is sort of coming to terms with how much control you actually have. Once you get a CSS and begin playing with it, you have such crazy control over the design of your of your project, right? We're working in academic writing. You're just cool or fun, you know? Basically, you go ahead and accept generally the formatting of the Microsoft Word documentation that you're using here. You have much more creative room to mess around, while the creative choices that you could make you don't need to make, because you also want to keep the viewers reading habits, reading needs, abilities in mind, so you don't lose your audience. So again, you're right. You're designing not to achieve your own sort of unique artistic vision. You're designing to

make your content attractive, interesting, available to a stranger. It's user centered design, user focused design, as opposed to

sort of the kind of classic sort of definition of creativity, which focuses on the creative spirit, the creative soul,

that has room to get involved here. But it's not about that, and most most most websites, it's about the user, what they and what they can

what they can find of value and find engaging in your in your site.

Okay, so this is a good place to pause. We will get into more things very quickly.

We'll want to add a banner. So I have images, but we also sites are often the times distinguished by the banners that they have,

at least on the landing page and the homepage. They have a large sort of visual statement being made before we get into the before we start getting into the content below.

So we will design that space and then design a navigation space so we can sort of build towards a a

larger, more robust site with more content, more organized, more organized content

that will allow us to go further into our CSS, but also reinforce our skills with HTML.

Transcribed by https://otter.ai

## week2_023_CSS_SiteNavigation_otter_ai.txt

So we got a good taste in the last video of what CSS can do in terms of making content more attractive, make it seem like less work to get through, make it more appealing, more inviting.

Let's think ahead to a larger site then our next steps, instead of a navigation system that won't function quite yet because the pages that it will link to don't exist quite yet, but we'll have a placeholder for it that will make sense visually.

So let's create we want to create a navigation system so a top navigation, a top box of links that will take us to away from our homepage, in this case, to sub pages of the site. So what we can do is go, go inside the body tag. I want my navigation to appear the very top of the page. So I want my navigation to appear right here above. Welcome to my site be a bar that spans the width of the browser. So we can use an HTML tag called nav. So I'm in the index page here. Just make sure you're in the HTML page

and call it simply nav. So I've put it outside the main box, and I'll explain why in a second.

I put the the nav pair of tags side by side, in between, both in between the body and the main opening tags. So line 15 will have both tags. So I don't want to capture a lot of content. I want to capture just some new content, just for the navigation of the very top and above the main primary content of the page inside the body. So we

save that preview that,

and nothing's happened yet, because there's no content between the tags,

and there's no style yet given to those tags. So there's just kind of they're they're ready to get, they're ready to serve. They're ready to be put to use, but they anything. Need a little more information, content wise and style wise to display appropriately. So let's work on the style, the styling setup at first.

So in this case, I want to create

some space in my CSS file, so make sure you were installed on CSS.

And we'll start by typing in NAV, nav with the curly brackets. And let's

make a width of 100%

right? So unlike the body content itself inside the main box. I want the banner to go the full width of the browser window, right? So be kind of a frame. The banner and the footer both will be kind of a frame for the site,

and then inset from that beneath that will be the body content with the margins left and right. That'll be in the main section. But that's why I put the

nav. Bar outside the main tag, because I don't want the nav bar to be affected by the name the main tag. CSS,

I want that to have have independent styling.

Okay, okay, so I want to be 100% going back to style dot CSS. Want to be 100% wide, and I want to use TC purple again, because I'm fond of it and it's part of a growing pattern for my site.

So I wanted the background color to be the TCU purple. So background hyphen color. So background hyphen color is the full proper name of that which will be different than the text color itself, which will be the foreground color. So let's

go ahead and do that too.

So if you see background

hyphen color, that's the background color, obviously, if you see color by itself, that's the foreground color. That's usually the more often than not, the text color on top of the background color of whatever that may be.

Okay, so let's go ahead and save this and preview our HTML page and sort of see if that see that's showing up.

Oh, interesting. Okay, okay.

Because the box itself has no content. There's

nothing to see yet, but if we add some content to it, we should be able to see something.

There we go. Okay, so interesting point that I had forgotten. So the styles are there, but just because there's no content yet, inside that box, the box was collapsed, but you put some content into the box, open the box up, expand the box rather and then you can sort of see the broader styling. So the background was purple, the background purple and stuff. Okay,

let's do a full, full.

Browser view. So the space is defined. It does span the full width as a kind of frame for the page. We'll have a we'll have a footer. Eventually they'll, they'll kind of complete the frame.

Oh, they have some content here that is white. The color is white on top of a purple background. So things are happening there. Let me go

ahead and define the space a little bit further

back in my CSS,

I'll give it a more more specific heights,

some more defined rather height.

So the height of the box now is called 10 VA VH, which is 10 viewer heights. So this is 10% of the larger height of the page, or this is 10% of the largest height of the page.

So the next line,

please include so display colon, flex semi colon.

We'll explain this in more detail next week, but it's good to have a have it in place now. So as we move into responsive design, this is a good thing to have already sort of as part of the larger build.

But don't worry about it right now. It's not, not really important to what we accomplished today, but it will be important to what we accomplish later down in the course.

But right now, that's the text is a little bit cramped. We're cramping adverse when it comes to the content, so I want the text to be

maybe hovering more in the middle, between the top and bottom of the navigation bar. So we'll add this line here,

so that centers it vertically, not horizontally, but vertically. And so that looks nice, but it also is. It is slammed against the left margin here, left edge of the navigation box. So I would like to do in the to

apply the the a of the crap principle, the CR, AP principle, I like this text to line up with the left margin of the text here. So I'll add what's called padding

and make the padding value match

the margin left value here

for the main, main content.

So this is all consistent with with the a of crap alignment to other elements in the page, for a sense of unity and and

consistency and pattern, we're

going to take probably a kind of a turn that you wouldn't expect. I mean, I could, I could just type in additional text here

for additional placeholder links.

I can do that. I used to do it this way, and we

can eventually make those proper links to proper pages when those pages exist. So

we can do it that way, that will communicate. This is probably a navigation system, but we wanted to, again, sort of anticipate responsive design eventually. But we wanted to kind of again have things built so that when we get to that point, it'll be ready to go. So let's not do it this way. So go ahead and type in when I typed in, and we'll, we'll make use of that content.

So then that have your nav tags, have it defined in the CSS as having these, these properties.

Then go your HTML page and then have the nav tags with this content in between. I'll take out the line the punctuation between others. Have the tags itself, but instead of having it as of just a block of text, which it is currently, let's make it an unordered list.

Okay, so let's, let's make a UL box inside the nav box,

which apply some styling, because the padding is not different, but

again, padding is like wrapping of a vase to be shipped. So margin is the space between elements. So the space between the body by the left margin, the left edge of the body box, left edge of the main box, padding is space between the content of a box and the

edges of that box. So this is padding here. This would being being applied. So this is subtle, but they do sort of they.

Are separate and control differently.

Okay, so I'm going to put each each link name as online,

which is just for my purposes here. It doesn't affect how things are displaying here currently,

but inside the UL box, the unordered list box that is

inside now the nav box, let's add then the Li and list item boxes here too.

So each link name will have its own Li, and the Li is not for link, it's for list item and

notice what's happening in the preview.

So it's showing up as a link. I'm sorry, showing up as a list, so showing up as a list, but the list is now, because it's

vertical, it's going outside the box, right? Because the content is,

it was format. So we can, we can override that to make it display instead

of being a column, text would be a real text instead. Okay, so let's work on that. First, we have to restore the default of the list, not here. We want this to basically to appear as it's appearing.

We want to be styled uniquely appears nicely inside this space here. So let's go to our style sheet

and play with the cell here. I'm

okay, so we want then to use the UL tagging of the UL box to help build our navigation that will be responsive eventually, eventually,

but we wanted to be styled differently than a regular, numbered or ordered list that appears in this in the page. So we want this text to stay black and to

be on a white background. We want this text to be white but being a purple background. So we need to style them separately.

So you can have selectors that are in that are inside selectors. So the for the for the unordered lists that appear inside the navigation Right? So there's no, there's no punctuation in between, so that for the navigations,

UL or the UL that's inside a navigation box. So it's different than this, because this is separated by a comma. So this, these are still distinct boxes. This is a box within a box.

So the UL is inside the nav. So for every time the UL is put inside of a nav box,

take away

its bullet point, the text decoration or the style of a list, the selling of the list with a bullet point or a number, take that away. Remove that sort of, that kind of styling, that type of styling.

So, list, hyphen, style, hyphen, type, colon, space, none.

So, to make it vertical, I'm sorry, make it horizontal.

Type in display colon flex, and we're making our content flexible. Another way of putting is fluid. So depending on the container is showing up and it'll rearrange itself to accommodate the sizing and available space in the responsive box. Okay? So we want to then turn off the the the well,

we want to turn off the padding of the default unordered list and turn off the margin as well.

And then we want spacing in between each each list item. So we want to put what's called a gap in 20 between each list item.

So I'll pause for a second. Let's make sure you get all that down for both business styling,

for nav

and for nav UL, again, there's no punctuation here. This is different than this.

This style is two separate tags.

This style is a tag inside another tag.

So I like a unique instance of this tag when it appears in this in this instance inside a nav tag. In this case,

then it will be, it'll

be styled in this way. Okay, okay, so that's looking more functional.

But notice also how we didn't change the fonts and we didn't change the

size. So if we wanted to have a smallest.

Has a smaller font size. So let's try nesting in NAV,

Li

fonts.

There we go.

So originally, when we see it set up this way

that's sharing the styling of this. So this refers to all the Allies throughout the whole site

to override this restyling. And to make specific, the selling we want for this, for this section, for this small sub part of the larger page, we need to resell it again to be more aligned with what we hope for.

So this is like this. So the UL, the unordered list, is restyled accordingly inside the navigation, and its list items are also restyled accordingly to inside the navigation. The punctuation makes a huge difference.

So each list item will become a link to that a sub page for the site. Each list item will be an internal link to

the sub pages of the site. So these are external links here going to go into outside websites, we can use the same basic syntax to create internal links too. So it's really very similar.

So inside the first LI tag, put it inside of that in a box, ref equals,

and I have quote unquote pound sign just as a reminder to put a reference there eventually. So

something weird is happening that we'll need to talk about. But let's go ahead and finish off the linking first. This is this is all happening properly. It's just obviously not going to work once we launch the site.

But inside the list item box, then we type in a space ref equals

a quote, unquote pound sign. And that's the pound sign is a placeholder for a link Reference link page that will get in place later. The link text then is followed that by closing a tag which is then followed by the closing null type, so you can use that tagging identically for the remaining three links. In this case, things are looking strange to the right, but they will

be better in a second.

So make sure that each each link here before the closing LI tag includes the closing a tag. Okay, so this is all properly linked. So a ref equals pound sign here, closing tag there. Same thing here, same thing here. So check your word make sure the a tags are all inside the list item tags, link text is all in white here, then this all should be identical. Li, hey, her refugals, pound, close, carat, the first four lines, okay, okay, so that's working if you've put if you mouse over your example, you can sort of see the pointer turning to a hand. But we're working with the default style still.

So the default styling for Link is blue and blue text that's underlined, so that's that lets us know very quickly that this is links

text. So because we've not styled anything differently, that's the default, and it works just fine here. We could change if we want to, but we don't need to out of necessity, right?

We have to here, because I like the purple. The purple fits my vibe with the blue on top of the purple does not work at all, right? So we need to change how link text, how the a tag text appears inside the navigation bar here, specific. So same technique that we use here, we'll use here, not the same code exactly, but the same technique.

So for the net, for the links that appear inside the navigation.

So nav space,

a colon link. And I think you have to have,

you need to have this all, one string of characters. There's no space between a colon link.

Well, the the color of link text, in this case, listed being able to make it white, and that's my day difference that that will the small little change. So although the length linking text that appears inside the navigation

should be a color that contrasts the background. So in this case, white, if you want to be different than white, you could say maybe a lot light

gray. See how that looks. So a little bit toned down, but still legible. So right now, we have probably two indications that these are links a they're in.

Bar that's conventional space for navigations, but also is reinforcing that is the underlining takes place with a tag content. Well, it kind of adds to the visual flutter a little bit so you can take it off. Okay, so we'll still know it's a link by its placement. We'll still know it's a link also by the if we notice the cursor changing from an arrow to a little hand icon, and

there's one way, another way we could do too is to make some little more confirmation.

If you copy and paste the same CSS from here down to here and change the word link to hover.

So hover, it means what happens when you put your mouse over the over the linked content.

So hover is, is, is when. So the the the

pointer change to change it to a hand when you hover the mouse over the link content. So when you hover that you can change the color so,

so that will show its link tag, linkable text. But also we could have text decoration returned to just for a second.

So that'll care for the yellow. I'll actually, I'll put this back to white, the link itself back to white,

and change this to light gray.

Hopefully that's not too subtle,

and try dark gray.

So that's why we have again, we have visual confirmation that. So

before everyone clicks, they'll know that this is going to take us someplace,

uh, eventually, for this site, it'll take us to other pages that we've built for the larger project. So there's nesting going on even in CSS, right? So there's navigation styling that goes on, but then things that we nest inside that. So for UL is nested inside navigations, we need to restyle that for the different design strategies we're using for the navigation bar,

for boxes inside boxes, still for navigate for Link items inside navigations, we made further changes and for Link behavior and link appearance. Rather,

we have nesting of commands here that override the defaults that are setting up the

stylings here, right?

So I think as a default in terms of good practice. So the default here in terms of having links underlined to confirm that they are, in fact, links, that is the best practice, right? So again, it's not about your your own creative vision. It's about usability for your audience. There's no question, if I want you to website before they'll know this is probably going to be a link, even if the text doesn't say it is.

So by having by removing it initially here, that is kind of going against the best the best of best practices, so you need to compensate for that to a certain extent, but have a change, at least when you hover over it.

Okay, so I'll leave this. This is all, let's see almost all the CSS for this. For this video, I'll go ahead and tighten things up a little bit so you can sort of see everything in one everything in one one screen.

So this is the collective CSS for one of this demonstration.

Then I'll, in a moment, go to and you can pause your pause your playback to look at the new HTML,

which is

specifically this section here. So lines 15 through 22 you

Yeah.

So I'm going to go ahead, while I'm thinking about it, and it's all it's part of the larger framing of the site, with the with the navigation bar we just created. Let's go ahead and make a foot or two while we're here. Much simpler process we can add to it on content that'll suit our purpose down the road.

But let's do this, and this is actually pretty, pretty simple and efficient. Let's go back to our CSS page.

Let's copy all

of our nav CSS. That's all that we've done this session. So my lines, one.

One through 29

I'll copy all of it space down beneath the closing brace of

nav a hover, paste all this. I'm pasting it just right below that and then changing, sorry, with my line 31

changing the word nav to not banner, the word nav to footer,

so the bottom bar of the page that we'll create in a second.

So we've just duplicated all the CSS from this session, all the nav CSS, CSS from this session.

Duplicate all that, pasted it below, and then changed all the the

references to NAV to footer, right? So they'll be designed the same for repetition of design, because they are serving this similar framing framing function, and the

links will need to be if there's any links in that content, they'll have to be redesigned as well. So

we may not use the the navigation list in quite the same way, but we'll sort of leave that in place. Should we need it down the Rode but

now we notice that there's still an there's still nothing that has happened here, because see this even if we refresh the page.

So we've created all those fancy, beautiful, new sets of CSS for the footer, but there's no footer showing out.

That's because nothing's been tagged as the footer region yet. So it is a, not a CSS problems than HTML HTML problem till we've restyled the footer tag, but we haven't applied the footer tag yet in the HTML file yet. So that's pretty easily done. So down below, just outside the main box of the main the closing main tag, and just out just before the closing body tag. So between.

So I'll put in footer.

Now, if we put down there, we have a parallel purple box, little band that expands the whole width of the page.

How about we type in contact me

and then give an email address that you want to

share on the internet, so searchable to all who care to search for. But

we want to make this an actual link to your actual email address. So let's do that. So I'll make just the my email address itself

the link.

So a

ref equals mail to all one word, colon, your web, your email address.

So close, quote, close, Curt, close, the closing. A tag needs to be moved then to just before the closing footer tag.

So now, if we click on that, it should open up your your email client. So I'll, I'll give you a view of that that's maybe kind of hard to see here.

So all I did was add it, add in the content of line 64 i So punctuation is vitally important. And I mean, you could have the whole contact me phrase also included in the link, but I wanted to specify just this. It does then share the same features as the linking text above,

but, but I think it needs also share. One thing it's not doing yet, it needs to share the the font choice and maybe font size of other content.

So we want to tag,

tag the textual contents of the footer as p so we'll share that styling.

And that way should it be a little more? There we go, a

little more part of the master design, the main design.

Okay, so some really important work, mostly achieved through CSS.

And the more we use CSS, the more we build our page out and our sign out, the multiple pages, we'll sort of see how efficient This is.

We'll get on to banners and more in future videos you.

Transcribed by https://otter.ai

## week2_024_CSS_Banner_Pt1_otter_ai.txt

Hey, this time we're going to get into building a banner. So we spent some time in the last set of videos building a navigation area. We it doesn't fully function yet because the pages that will be linked there don't exist yet,

but we will be moving that way shortly. But first, let's build an attractive sort of initial visual impression that'll be our banner. So have navigation bar up top as we left it left last time. Then we'll have a banner image as a large, dramatic banner image beneath it, right? And then we'll go into our web content. So remember that we're, you know, part of the success of a website, or most written communication, is its visual appeal. And if you remember, back to the to the magazine examples from the early lectures, that visual information is is part of the hook, right? So we can't text by itself does not hook. So it makes sense that most landing pages that you go to, most homepage that you go to you'll see you'll see images before you see text, or you'll see images far more than you see text that on first impression.

So first a little prep work on your part. Add to your

project folder, your local folder, an image you want to use for your banner. So this is for practice today, so it doesn't have to be it could be pretty much anything

today, but my suggestion is that you find an image that is

a landscape instead of portrait, so it'll spread nicely across the the width of the of the browser. The proportion that I have here is 91920,

so 1920, by 1080, if it's larger, we can shrink it down. If it's smaller, we can, we can boop it up, bump it up.

But also make sure if you can, or try to find some image that has some sort of empty space on one side. So we will have this background image here that will that I'll use for my demonstration, but I'll be laying text over it as the page, as a site's title, so

I want to have some more neutral space that's flatter and less visually busy to put some text on top of

so I'm assuming you've put a image folder inside an image file, rather inside your image folder for your local, any local folder for the project.

So here is my 60970, folder. Here is my images folder, and here are my images, with this one added today to be, to be my better image. We're going to

do something a little bit different, this time, a little more organized, even than the past videos,

where I have an outline that I'll be working with. I'll be grabbing some code from that I will eventually share with you as well. So I still want you guys to kind of go through this video to

understand the steps and why we're doing what when to walk through and talk through what we're doing at each step. But if you want to reference the code, make sure you got things typed in properly. You'll have access to this resource soon. So let's go in to our purple cat friend. If you have any files that you haven't committed recently, go ahead and create a description of what you've done. So I've updated my images.

That's what I've done. Yours might be more comprehensive than that,

but one reason it's good to kind of relaunch your session from GitHub folder is that you'll you'll be reminded that you have files to perhaps commit from the last session that you haven't haven't committed yet. So before I move on to the next stage, I'm going to go ahead and commit these changes to to my remote repository. So commit to main, push to origin. So let's go straight to the project inside VS code. So let me give you an idea of what we're shooting towards. So the code that we that I'll share with you through this tutorial, will lead us to this kind of result. It'll look quite different, because your image will probably be quite different from mine. So this is what we're shooting towards. It kind of sets a vibe for the site, the tone for the site, and creates, hopefully, a visual hook. So I'll leave that open to refer to it as we go. Keep this open too. So what we did

last time with the navigation, let's take a similar strategy for the banner area, and we'll put the code in place in the HTML first, and then we'll develop the parallel CSS that will then give it its body, its size, its color, its image, all that good stuff. So I'm going to grab this here,

and I'm going to go to my index file. So to use this as a reference, the banner area, which is the image plus text here will be beneath the.

Navigation area that we've already already defined.

So the banner area will go beneath the navigation area that we've already defined.

So I'll copy a copy the code from the tutorial

that I'll share with you at some points, and let's space things out so you can sort of see what's what's going on here. So it's going to separate the boxes a little bit.

So when I grabbed the content from here,

I copied not one box, one set of code, certainly, but actually four boxes.

The banner box itself, the larger container for all the all the banner content. So images and text both a Banner text box that is will contain all the text in the page, but notice that the text itself is class has different tags, so they're put into separate boxes. There's banner name and better title. So while we're here, we might as well go ahead and put something personal, your name, perhaps here, and maybe your title for your sites here. So go ahead and just have something as meaningful to you, descriptive, but still temporary properly for the larger project. So let's sort of see what that's doing. So we'll preview this page here.

First way to preview is to do what we've done before, is to right click on the file name and go to Show Preview. Another way to preview two is to go up here and then look for the two column icon with the

magnifying glass. They'll show preview as well. So you get a sense of how it's looking. It's not horrible, I guess maybe at this point, but it could be much better. Yeah. I mean, the text is there. The text is what we want Texas, proper font and proper color. It's formatted the way the h1 and h2 are elsewhere on the site, so the space is opening up. But obviously it's not the same thing is what we get. We'll have eventually here, but we're moving in that direction,

so let's keep on moving.

Refer back to the tutorial.

Okay, let's take a larger block, and then let's work on the banner box first. So the first big box. Let's work on that first which will make a pretty, pretty big impression.

And if I'm going too fast in my description, I'm trying to keep these videos short. You always have permission to, obviously, and the opportunity to pause and pause the screen so you could get the full code before you before you continue the next steps. So if I brush through this, make sure you pause so you can grab the grab this content here that's new to today's tutorial.

Okay, and again, make sure this this new content, the banner div class equals banner box and the sub boxes are going inside your index file.

So if you have Curt brackets, odds are you dealing with HTML and so it should be entered into an HTML file. Okay, so let's then go back to our step two and get the initial CSS styling for the basic banner. It looks like a lot. It is a fair bit. But also this is commented and notated pretty thoroughly too. So there's a lot. There's more lines here than there are actually functioning lines of code. So we'll copy that again. Just make sure we grabbed it. We'll make sure that we move over to our style dot CSS file, and I'm going to put this after the footer, but before the h1 h2 because, because the banner is higher in the page, want the CSS higher in the CSS style sheet. So I was copying what I just pasted,

and what's green is notes to us, notes to people who are reading the sort of the Code view of the project.

The functioning code is the red and green text here.

Okay, so there's a lot of code here to study, but let's break it down into smaller chunks. So like the Martin, the the nav bar itself and the footer both, I'm setting the width to 100%

so this is out. This is not, does not have the margins that the main section has. This extends outside the margins of the main section, so it's full the full width of the browser window. So I said shared shares that feature. So I'll go ahead and duplicate that code here, so we've already seen this.

So we're doing what we're doing here is defining the initial height. So we made the navigation 10 VH for viewer heights. So 10% of the available

space, of the height of the window,

resetting then the banner to 70 VH,

so 70% of the viewer height. So.

Uh, and then we're setting as a follows, called the fallback color. So the if the image that we're about to put in fails to load, it'll default to this color. So

just take a moment to grab just what I've uh, what I've opened up here in the in these three lines. So my line, 6466

and 68 so pause and grab those lines if you haven't gotten them yet, and

make sure it's inside of a dot banner.

So let's go to our preview and see how it's looking. So it is working. Again, not rates, but the space has been defined. The fallback green color is showing up because the image place, the image file is not available yet. It's not encoded yet. So let's go ahead and add in the image itself and see how that's looking.

And so your path will be different than mine. So this is the path to intercept subdirectory where the image is being saved.

Let's see if that works. It does work, your

address will be something more like this. If it doesn't work, send me a quick email and we'll straighten it out. But

you should be able to insert a background image the way you did. Inserted a an image here. Let me show you back in the index file,

so it should be more like this.

This is different because this is not, this is not a background image we're working with here, but the pathway, the code for the URL source is should be more like this. So the full images folder and then the file inside that,

so that my syntax will not work perfectly well for you, probably okay. So go back, going back to the CSS.

So let's notice what's going on? The image actually has more contrast. There's more going on. The images have been cut off quite a bit. The

text is not showing up well. On top of that, and there's a space navigation and then the banner image that I don't care for. So we got some refinement still, but we're certainly making progress. So let me unleash a little more code.

Bracket on size cover

so notice what that does.

So that pulls in the whole image to be contained inside the box. It's covering the box.

And I'll turn this off again. I'll just post them, put them side by side. I'm

so background size, cover

on, background size cover off, right? So you might, you'll see more of the image if you have the background cover, background size, cover

turned on. Okay,

and I like that, because this gives, this gives this is a little darker, so it's probably easier to put light text above than this brighter area of the image here. So let's see what happens when we do this.

So that's a matter of responsive design. So as we

so notice how with with the before we go on and unleash the next line of code, notice how when we resize the browser, the image gets cropped,

which may not be a problem with certain images, but I like having the blue with the yellows

and oranges and reds here. So I like having both as part of the image, as a banner image all the time, but resizing the browser means the image is not or shows that the image is not responsive, or not entirely responsive.

So I wanted to resize basically, and keep the center point where the center of the image in the center of the screen, even as you reduce the width of the browser window.

So let's do that. So background position is what we're playing with. So that way the middle point stays the middle point,

no matter how big the browser is the what's the middle stays the middle. So it does get crops, but if it's cropping, it's cropping on both sides, not just on one side. So that's accomplished again, with

background position center. Okay, this, this don't really change much for me. But if you have a small an image that's too small for the browser space, it may sort of like fill it in several like, almost tile the same image in several times over.

Oh, this doesn't change much for me. I don't think, but

if your image was square, kind of ensure that the image stays the size of the browser window and not not repeat itself, not tile itself into a repeating pattern. Okay. This one will become clear as we go forward, so nothing will change visibly here.

I don't think, yeah, not yet.

So just to kind of lay some groundwork, further groundwork, for responsive design, because this larger box called banner has both it now, both images and text. Inside of it, there are a couple different boxes that have to be managed flexibly and as the as we move towards responsive design. So we're making, we're kind of laying the that foundation here, so we'll, we'll make more use of that as we move forward. You

one

thing I wanted to draw to your attention that I'm noticing in my front in my project, which may be happening with yours or will happen at some point with yours, there's some color coding going on here. So there's kind of a brown text here, which is all it simply indicates that it's been modified since we started this session. This is however, red, right? So that indicates that there's some issues with the code somewhere, some typos, some moments where the code is broken, something that we have to fix real quick. So one way to kind of troubleshoot that is to open up this lower bottom panel here that you can switch on and off here,

which gives us a number of views that will be helpful to us at various stages. But probably most helpful here is it gives us the problem tab. Problems. Tab has identified two which is what matches the number here. There's two issues it's finding in the style sheet, which is consistent with what we're seeing here. And it gives us an idea where there's you know what, what is wanting to find that it's not quite seeing yet.

So expected CSS curly. Expected in line 87

and line 130 so the instructions here are not precise enough but, but they give us an idea of where to look for the problem. So what had happened? So notice what's going on here. So this is, this is CSS that's probably color coded. This is a comment that's probably properly color coded, but this is, this is a CSS that should be red and blue, like this is red and blue, but it's not, for some reason, good screen, and that's happening because this comments not been fully turned off yet, so my toggling back and forth

this way

has left has broken up, broken things up a little bit. So if I close this comments so this turns back on.

But then also notice we have kind of a stray ending comment here, and that

took care of actually both problems.

So it does its best to give you instructions as to what's wrong. It's not always precise or it doesn't describe it in the way that makes sense to us, but it does indicate, hey, there's a problem here. Look into it and try to see if you can find the typo that you're looking for. So it might be missed punctuation,

it might be typo,

unknown. Property justifies intent, right?

So it sometimes pinpoints the problem. Sometimes it says, Hey, look here, look in this roughest entity. Either way, it's helpful, right? So there's some something that's displaying weirdly in your in your CS, in your browser view or your preview. Go to this tab here, open up the little Problems tab in the problems window, and sort of see at least where to look. And actually doing that for me, took care of a display issue that I was having, but there was some white space here initially that I didn't want. Didn't know what was happening, and the text hadn't relocated yet.

But now that I have found the typo and corrected that typo, this space has been taken away,

and this is moved to the right, which is where we wanted. Eventually we want the style differently. Still, this is moving in the right direction, right? So some other things fell back into place once I got rid of that typo situation, which is helpful. Okay, okay, so

let's see if we can clean up this text a little bit because this is the text. Is there is not the font is proper,

but it's not showing up at all against this blue blue background, purple on blue is not very poor contrast. The contrast is not strong enough. Contrast needs to be different. White on black,

white on purple,

purple on white, right? So those these contrast well.

This contrast poorly. So he was, let's improve this contrast here, and was positioned a bit better to get things more attractive and more more functional, to help them do their job better.

So going back to the tutorial, I'm.

And why not go ahead and just while we're thinking about it, let's go ahead and do a quick Github desktop refresh of the of the repository.

So doing that, as you move between steps, I mean, as you'll be reminded by this tutorial, is always a good practice. So let's do some text container styling. So I'll grab this here. I will insert it and explain it in a moment,

I'm going to back to my CSS. I'm going just below the most recent batch of CSS pertinent to the banner. So

so this goes this refers to what happens in and the index file.

This box here, so all the content gear will begin to have the styling that we give, that we're about to define with that last copy and paste. It kind of sets the stage for the stylings of Banner name and Banner title. So

just pasting that and let's see what's happened.

Nothing at the moment.

Let's do a fresh preview. This is, this is the

example we're shooting towards. So this is not it yet.

Oh, okay, I have a typo, right? So I didn't copy and paste all the content. Okay? So one thing that is this gives me occasion to talk about as a ties to a point I made briefly in past videos, is that CSS, as we've already talked about, helps to sort of override the default, modify the defaults of the browser with our own stylings for paragraphs with headings with images with links, right? So it modifies the default settings for those various elements, those various tags. What you can also do is basically extend, not just, not just enhance, but also extend HTML

by creating tags of your own. In effect, what we're doing here,

and we'll show it, we'll see a better looking at the tip, we're creating a div class.

So basically, the div class is one kind of sort of pseudo tag that we complete ourselves,

that's sort of purpose unique to our to our needs. So if an HTML tag doesn't exist for something that we want to format in a certain way, we can create a div and a class, class of div. And div is short for divider or division, like a subset of the larger thing. So this division of the larger

browser window will have these classifications. It will have these have this unique styling. So it's not a tag, precisely is maybe a pseudo tag. Might be another name for it, another word for it, but it's kind of a one off thing that you're making for yourself that will serve, then

the purpose of restyling something, that you restyling content on your page. Then the way that the HTML by itself doesn't currently do right? So it's really powerful and really extends considerably what you can do with CSS. So we have actually three, three classes or four classes being defined here. So so you can actually have a class for h1 and h2

Okay, so there's to set up a div class,

as we already have done successfully, is

with a dot banner. So the banner tag itself doesn't exist,

but dot banner says we're making, this is a this is a

a diver we're creating for ourselves that we're going to style in our in our specified way, that will then use them to insert and format content in our HTML page.

Dot

tag name is a way to create a div class. Okay, so we've already done use one div class by

creating the banner space and putting the banner content into it so far with the image background, the background image and the text that we've used so far. So I had you all copy and paste this, which is what the next step involves. But I was a little bit hasty in my copy and pasting, and so I forgot to copy the opening. I Okay,

this is how the page looks now with the typo in place.

So put the typo, put the period back where it belongs, to make to define this as a proper div class, and that moves the text over.

Right? So moves the text over 8% give some spacing between so turn it off for a second, turn

it back on, and it kind of airs things out a little bit. Sorry, but what's not probably most noticeable is the right justification going on, which makes sense and should line up with the content below fairly well. It does.

So there's alignment here with the with the other elements in the page. So again, part of the crap principle that's being set up by by this here. So make sure, again, this is a mistake that that's easily made. I just made it myself right in front of you by copying pasting. Make sure you copy and paste the whole thing.

So even a period which is easy to miss, which I obviously, I just did it, I just missed that period, uh, makes a huge difference in terms of things working properly. Okay, so we open the full browser views, I get the more more dramatic look. So position better, still not legible color wise.

So going

no close that out to open more space,

let's add a bit more CSS

to modify first the banner name. So I'm going to capture the curly bracket at the end through the period at the beginning.

So dot, Banner, name. Banner, hyphen name, down to the closing curly bracket.

Make sure that's outside the banner, text, curly brackets.

Turn some of this off, and hopefully you'll I won't cause problems down the road.

So the banner name, which is the name for Yeah, which is my proper name in this example,

needs to be legible against the sort of dark, dark blue background, the purple that we had originally from the age one tag was not going to cut it in this case. So whatever goes into a banner, name, div, or better, Name box will now be styled white. So that is

that's showing up as white now to refer back to the code.

So what gets poured into

Banner, name

here. Class is better name here.

Better name here is what we grab. There

will be

whites and

the font family is the same as the font family

that we're using that I'm using elsewhere, right? So you're, you probably don't want to copy this. You want to choose the fonts that you're that you're working with

for the larger site.

Okay, so the but the white is making a nice difference, but I think the size is kind of small, right? Given how much space they have to fill and the room we have to play with, the size is kind of small.

So let's play with that a little bit. So we'll turn off this comment here.

So we made a font size 3.5 m, when m we used before with body,

with body context, the paragraph text. So

that's a fair bit larger. We can make it larger still, even, even more so. So I'll change mine to maybe even four, see how. If that's too big, it might be too obnoxious, but let's try

4.0

I zero.

Yeah, I like seeing my name in print, of course, but that actually uses the space better. So that's been addressed. Let's put let's see if there's ways we can enhance this further. And again, the changes I'm making are ones that are based on my image, and my image is relationship to the text on top of it. So the image of the choices that I make in the next few steps may or may not apply to you. I'm giving you an idea the kinds of things to talk to think about as you're trying to make sure your text is legible against the hopefully a cool, dramatic, but sort of properly laid out banner image. So the

sizing will make a difference. The color will make a difference in contrast, right? That helps, certainly, but there's additional refinements we could make.

I'll see that makes much of a difference.

Doesn't make that much of a difference, but, if you're if your font is not thick, if it's not in bold, yet, put it in bold will give it more dimension, more body,

so that might make a little more more visible.

Margin is the impact.

Adding between this and other other elements, so maybe there's a little more spacing involved, so things don't get cluttered together, jammed together too

much. One that thing that definitely will will work, probably not necessarily in my case, because the white is reading pretty good, pretty well against the background, but adding a text shadow

can help as well.

And so you can, I think you can sort of see it here.

If you look closely, I'm zooming in, you can

sort of see this kind of a little bit of a lift between the text and the background. So me, let me turn off the so you can

probably see it more dramatically. Over here, there's a little sort of, you can see, there's a slight, slight hint of a shed of a gray shadow here gives the impression that the text is hovering just a little bit above the background image, instead of being so if you know Photoshop and what drop shadows do for text and Photoshop, same principle here.

So let me turn that on and off and sort of see if we can

appreciate the difference.

So I think, yeah, I mean, I can tell the difference. I hope you can too. I'm hoping zooming in it will help. Um,

this is not bad because it contrasts all the colors that are behind it, but if we add the shadow as a backup, it gives a little more dimension, and especially the text is kind of fluid and will reposition itself. It's good to have that separation, because the colors will change as the browser resizes. Okay, okay, so I'm gonna pause right now and then we'll resume. You.

Transcribed by https://otter.ai

## week2_025_CSS_Banner_Pt2_otter_ai.txt

So the suggestions that I'm making again are ones that are helping mine may also help yours. There's kind of general strategies to keep in mind, because the importance is that the text is always legible, so the contrast between the text and the background needs to be established and firm and adjustable depending on the circumstances, right? So White works well against all these colors here. But if they didn't, we have a drop shadow that you can sort of see against the latter colors. So if this were a wider background is still you can still have some good definition to the text here. So we made some nice changes through this CSS, repeating a font family choice, making a nice large font size for the banner name. The Bold will help if the text needs further definition, and the text shadow is what's helping the most here, right? Okay, so that's banner name. So that's my proper name. Here has been a style, but the the kind of title or roles that I play, the hats that I wear are not, is not defined or contrasting sufficiently. So let's grab the next bit of CSS under individual text elements, grabbing the closing curly bracket down through up through the period before banner. So dot banner title, copy that, paste it outside the banner. Names closing curly bracket, and it's the same instead of consideration. So color, font family, font size, font weight, style, etc, but the choices are different, so they have to be defined separately, right? So the font size is different, the font weight is different, the font style is different. And that's pretty nice. That's working pretty well. So I'll zoom out, put more into context. So and that's working pretty well. That's pretty satisfying, right? I might even go larger on both, because we have this is a big space. Might as well if you're going to have something big, go big, go big, or go home. So they have this quite a bit larger still. So let's do let's see what happens if we bump both up, just for giggles. So I will change the our font name to five, which is bigger, but not even that much bigger, and say, we'll have the font title be 3.5 that's louder and prouder. I think that's, that's, that's not, that's not so bad for this desktop view. I think that's, that's more, more confident. Maybe, you know, size is more Bold. Bold is more confident. Confidence is what we want to communicate in our websites, so in our design, but also in our content. So maybe this is one way of starting off on a confident note, is to have big, proud text in the in the banner area. Okay, so let's see what happens next in our tutorial. While we're thinking about it, let's go ahead and let's go ahead and go to GitHub Desktop and commit our changes. And things are duplicated in both places. So let's create this is called Creating a fade effect. I've included this in the tutorial, not because it necessarily make a big difference with mine, so we'll see it in practice with mine. I'll go ahead and code this with y'all, but this may not, it may not be as essential for me as it may be for you, given the picture that you're using, right? Because, again, you want the the image to be strong, to be powerful, to communicate something vividly. But also you wanted, at the same time to have space, to have room and large in the larger region of the picture, to have some have the space be more neutral, more flattened. That creates a kind of negative space the text can go on on top of nicely, right? So that, because I have a it's flatter here, it's less texture, because the colors are a little more uniform through here, this lays in well here, so I don't, I don't need to flatten this so much. I could, and I will, but it's not essential for my picture. It might be more essential for your picture, given how busy the background is. If the background is busy, then you want to, somehow, you want to flatten, subdue, rather. Maybe it's a better way of putting it a certain portion of the of the of the image, so that the text will read more, even more sharply on top of it. So what we're doing now is we're going to, we're not going to, so don't copy and paste all of this. Right? So don't, don't go from the. Read it down to curly brackets here, because we're modifying the bat what already exists for the banner div. So we want to get what we have additional content we want to include. So let's grab this much, and I'll pause for a second. So I'm leaving the the braces alone. I'm leaving the first two lines alone and copying just from multiple backgrounds down through PNG. End, quote, brother C, semicolon. So I'm going to go in back inside my banner CSS, so it's not a separate a separate section now it's but it's part of the what already exists for the banner and I will.

So that does make a difference, right? So it is. It's become more because of the settings of the gradient that's been set that's been put into place. It is becoming darkening and becoming more more opaque black. As we move from left to right, it darkens more rapidly. So the blues and the purples kind of happen in the small moment here. But then also it goes to the original black. It's looking more solar now maybe, which is kind of cool. But in terms of there being more definition for the text. There's no question about that, if you want to, if you want to, sort of compare the contrasted difference here. Let me just turn off. Turn on, turn off this section here.

So that's the version we start off with originally. This is the version we have to work with, with the linear gradient in place, and I will sit on it. I know, I know what, where I can come. I know where I can return if I want to get rid of it, if I want to go back to the more colorful, more blue background in the right side of the image. But because it is so strong and the gradient is working pretty clearly, I'll go ahead and keep it for the time being, right. But this definitely works. So even as as we as we reset the browser, it gets cropped on both sides. The text is moving into the more, more yellow side of the of the image. But the drop shadow still keeps it nice and legible, even as the background lightens. But this is almost planetary and solar, so I kind of, I'm actually the more I look at the more that I kind of like it. So one thing, once you get these new instructions in place, play with these values and sort of see what you see, what you like or don't like. So these are not prescribed rules. This is part of the creative freedom. And then, as we said before, the creative freedom we have is considerable and impossible to fully utilize, which is part of can be maddening at times because there's so much creative room, but use it judiciously in the interest of legibility, in the interest of visual interest in the visual, visual appeal. So let's go on to the next concern. So this is more review. So the things that we've already put into place for responsiveness, without getting into the full sort of world of responsive design. So if you were height 70% certainly 70 VHS, 70% of the current screen height. Setting the margins, as we have in a couple places by percentages, is also kind of prepares for responsive design. Flexbox helps to position things flexibly in relationship to other elements, as things resize. And then images we have had the image sort of centered, so that you change the browser size and get cropped from both sides, not just from one side or the other. So it's we're keeping that pinpoint in the middle. So that's all part of responsive design too. So it's not, it doesn't include media queries, which we'll get to next, next week, which are really cool, a little bit of a learning curve attached to them, but very cool and very helpful, and ultimately, coding wise, very simple. It's not a matter of coding something new. It's a matter of modifying code further. So we'll see that. So it sounds kind of computer sciencey and scary with those with those that phrase media query sounds daunting, but coding wise is actually pretty straightforward. It's just a matter of understanding what, what's happening, when and why we put them into place. Okay, okay, so we're getting close to the end, one last step to consider that's happening for me. It may not be happening for you, but let's just assume it is for because I need to take care of it for myself. So I have my navigation in place. I have my my footer in place. I have my banner in place. Yes, but notice that there's for some reason now, with these additional elements in place, the width of my navigation bar, which was set to 100% is wider than the width with my banner, which is also set to 100% so something odd is happening here. Rolling vertically is fine. We expect to do that, but to do that and also be expected to do this is bad design. People are patient to scroll this way. That's part of the convention, but scrolling this way is frustrating and will discourage further interaction. So let's take care of that with Step Six of the tutorial. So as a matter of adding one line so that we have to the navigation and footer, we need to add a box sizing command called border box, which will prevent elements from exceeding 100% 100% width. Because we have nav and footer set up separately. We'll go ahead and put that in separately for both. So inside the nav styling, I'm adding box, hyphen sizing. Inside the footer styling, I add the same line, box, hyphen style, styling, box, hyphen sizing, and let's see if that makes a difference and problem solve. So there's no need for or distracting horizontal scrolling. It's just all vertical as it should be, right? So all I did was to my nav and footer boxes or CSS, I added this one. What I have in line 40 line 41 here, in both places, both, both in footer, and my line 41 and so it's both places. Line now, what's my line nine here? So just inside the nav styling, between the Curt braces for nav and between the braces for footer, and it probably shouldn't matter where it falls. I'm adding it to the end because it's the most recent update to that CSS. But if you if it came up higher it shouldn't, it should still probably work. Okay, so let's go ahead and break here. There's more coming soon, which will be adding multiple pages to our site. So we've made a homepage for this next next project, this next assignment, and so we'll add then pages that will link to it, so sub pages for this larger site that will have separate related content. We'll move on to other things and make further progress. So.

Transcribed by https://otter.ai

## week2_026_CSS_Mulitpage_Pt1_otter_ai.txt

Hey, crew, it's Curt Rode again where we are plugging ahead into the final Videos of the Week Two instruction. We've made things pretty with CSS. We'll maintain that prettiness as we begin to build out a larger sites. So we'll have a multi page site by the end of this video.

Okay, so without further ado, I'll show you one problem I was having, and then one quick solution for that problem. So first, the example of what's gone temporarily wrong with my site. So may have noticed this last time, but as we were developing this, which is looking better and better. I seem to have lost and in the process of what I did in previous videos, I seem to have lost my links in my navigation bar. So, but that's not the case. They're still here. They're just they're just hiding.

They shouldn't be hiding, but they are because I haven't fully set things up this way. So let me show you some CSS to correct that as an easy fix, and copy and paste mostly of what we have previously. So it's super, super simple, but it'll make a nice difference. So to go to my VS code.

So what we did previously was we had to restyle the links that appeared inside the nav bar. Because the nav bar is purple, we need to have this text contrast that. So we made the navbar link text white.

So we set this up previously you should have that you should also have. Then this in place. That's the hover. So when your mouse goes over the link, it changes its appearance. Is what we had before. But what's happened is that I've clicked on those links, right so you know, the links don't go anywhere yet, it's still the appearance that I've gone to those pages previously, because I have clicked those links previously.

So what I need to add is this right here? Okay, so that changes the behavior or the appearance with that page has been visited. So notice what I've done is I have really, I basically just copy and pasted my my original a colon link CSS, and it said, personally, I don't feel as much need in this for the small of a site to distinguish between visited and unvisited links, so I'm gonna basically have them styled the same. So I go back to my page, the links are here again, and then they will change states,

or they behave differently when I hover over them. So

we're working towards a multi page site. So say, for project two, you'll want a four page site. We have placeholders for that, and you do want four pages, and we'll make space for those four pages as we move through this video, so the pages don't exist yet, besides the homepage and style sheet, but we've also been adding to a lot this week and making a lot more attractive. So let's go ahead and prepare the navigation first before we make the pages they link to. So we have here in the index file, we have here in the index file the nav box, which is the top purple box

here, was sitting in the stage for this functional piece of the site here.

And right now we have the placeholder hashtags where the link destination should, should reside. So a simple change, what needs to happen is this change has to be applied to every single page, which is we'll do simply in a second. So to the first hashtag for home. So leave home as it is, but for the first hashtag, type in index, dot, HTML, this page

doesn't exist yet, but for the second hashtag,

type in about that HTML

and then change the link, one text, the word about to

the third link. We'll call this one crap analysis. You may have already seen that it basically what the product is, is applying the CSS we've learned this week to the site you started last week in HTML. So this was a part of the content of the site. Will be the

reformatting, a restyling of the analysis you did last week for for homework one. So type in

the black text here

is the link text, the text that will become linked.

The blue text here is the file that will be linking to. So then the last link can be maybe contact me.

Change the last pound sign here or hashtag here to the just to contact that HTML.

So again, none of these pages, besides the first one, is this, but let's go ahead and sort of see that there's enough visual change in our navigation we can, sort of, if you look in the lower, lower left hand corner of your browser, you.

If you hover to simply hover over

the link text, you'll see the lower left, left hand corner. For me, it's in a green box that will be linking to. So

now let's build the pages that we want to

link to, because I'll leave this page alone, but I will duplicate it.

The easiest way is to simply copy and then paste back in. So you should have an index dot HTML and then file called index copy. So do that again. So basically, you can probably just do a command C and A command V, yeah, there we go. So Command C for copy, Command V, for paste. Well, then call the new copy. Call us one crap analysis.

So very important,

the way you spell things here in the new file name needs to be spell identical to how it's spelled here, if there's any sort of mismatch, punctuation wise, spacing wise, file extension wise, whatever. This doesn't spell identically to this and vice versa, then the link won't work.

And to make sure we were able to distinguish quickly between the pages we're on, let's on the prep Analysis page.

Let's take out the banner

so the banner is there on the first page to make a strong first impression, but to have that same banner on all the subsequent pages is kind of redundant and unnecessary beyond the first impression, because they will have the same style navigation bar to show that we're still in the same site. We'll have then the content begin higher on the page for the subject, for the body patients. So we can do that, but we can raise the content above the bottom of the screen

by just simply getting rid of the the banner.

And then, for my age one here,

I'll type in maybe week one

crap analysis you have, probably is more meaningful text anyway, because this is going to be probably filled with your crap analysis.

So I still have the placeholder text here, but you probably have, you probably have your text, your HTML from last week, where you could simply just have that as your crap Analysis page. And that's fine. You want to make sure it's styled then the way we've developed this week, but the content itself could be the same. Okay? So to make mine a little more more like yours,

I'll go ahead and add some relevant subheadings.

I'll take out my links, because that's not what we what we're here about right now. So

let's go ahead and review our sites.

So the home page takes us to the home page. Crown just takes to a new page. There we go. So home page, crap page, crap. Page, home page.

Okay, so you're starting the project with the content of one, one of four pages basically already taken care of. If

there's things you want to add, things you want to clarify, things you want to refine images you want to swap out, you're welcome to do so. If you want to improve your analysis. You're welcome, of course, to do so.

I would encourage you to do so if you have those insights. So let's go ahead and make the other pages, but I'll make the other pages based on the now the crap Analysis page, right? So I will click on that

control, Ctrl C to copy, Ctrl V to

paste.

Or name this file to about

for the h1 here my line 25

and because this is COVID that I want to get rid of, I will.

I'll go ahead and kill the contents

inside the main tag, except for the h1

so go ahead and test that. It's always good to take baby steps before you move too far forward. So home. Titans here. Nice, strong visual impression about me is empty for now, graph analysis is for you probably going to be in better, better shape than mine. Contact me doesn't exist yet, so you should have access to the other other pages from

each of the sub pages. Okay,

so do contact me, since about a little more cleaned up.

Control C, the about file, Control V, the about copy. Rename about copy

simply the word contact. So try to keep your file names as simple as possible, as simple.

Yet as descriptive as possible.

So contact hyphen page or contact me when

you want to dot HTML, that's not necessary. It's the word contact. We'll get the word we'll get the point across. And index is always the name for the homepage, index is always the name for the homepage, index is always the homepage index is always the name for the homepage. So let's go ahead and then go to our contact page. We've created that

everything here is otherwise fine, but instead of about me, I'll put into contact. Me

test this out, and then we'll make one other couple small changes, and then we'll be pretty much there, so going back here,

home, works about, works, crap, works contact me. Works from, contact me about works

from, contact me, crap, works from, contact me home, works so it all seems consistent.

So one thing to keep in mind, any changes you make to one navigation bar you'll have to make to all navigation bars

if you, for example, add a link

to your

homepage. You called resume.

You're editing successfully this page

so that will now show up on your home page,

not properly displayed, but if you go to the other pages, it doesn't show up there, right? So adding something to this page here doesn't automatically update the entire navigation. So this has to go to the navigation bar of each of the other three pages. But that's not required of the second project the week. Weeks to projects. I'll go ahead and take that out, but I just wanted to make that point. Okay, to make that point. Another small point to make, though,

is for each page here we have

60970,

in the in the tab text here.

So that's not bad, but it's also not really very descriptive as to what page or what files actually open.

So we could probably distinguish each page with also with the proper title and the title tags in the head region, which is above the body box. So rode portfolio home is what I'm putting for the index.

So here I have on the index page, I have that text now showing up as my tab.

So do the same thing. Then for the other pages,

I'll copy that.

So your choice for these tabs, for these titles, page by page, is up to you, based on the content of your page, right and your and your voice, and what you think is going to be most helpful to your user, more, most importantly, but you know, then say, we're in this page here, and

you want to go back to your site, you know which page you're returning to us immediately from this.

So we know that the page we're returning to now is a different page because the tab, the title is different here. Okay, so again, usability eliminate the user's guesswork, so we know we're on the same page because the notification is static in a good way is it doesn't change. It shouldn't it shouldn't change page by page.

We can get to that that newer content faster if we don't have to scroll over content we've seen before. Okay, all right. So there is a resource page in detail, since we're looking at detail

for week two.

So there's a multi page tutorial here that gives some broader reminders about backing up with with GitHub, but also gives, I wouldn't grab, all the, all the, all the content, but what exists for the About Me page and then between the main tags?

So I'll go to the About Me page here.

I'll scratch what's not currently in my h1 because I'm about to replace that anyway, just to give a little bit of a template to fill out. So now about should have its own content.

And the subtitles here can be different for you. You can rearrange them, you can add or subtract whatever you want. Or we can do the same thing for the contact me page, gray.

Thing between the main tags again,

copy that go to contact.

Kill the h1 here, because I'm about to replace it.

So let's see here going back to the home page.

So again, this will be redesigned to give a general overview of the site itself, what the site contains. So welcome statements, but also should give the reader incentive to go further. So reason why they be they benefit from clicking further into the site, like with a welcome broad view of what the site contains, broad view of what you want your audience to see specifically once they get into the content of each page, and then encouragement then to dig further to find out even more about about what the site has to offer them. I'm not asking you to pause, to copy in my code the way I have in past videos. I am giving you access to the code that I'm copying

through this resource here in pizza well, which is in the week two section of the table of contents.

Okay, so just to follow my own advice, my own recommendation, my own purported wisdom. Oh, I think it's important to commit changes we've made so we don't lose our work. So go back to our purple cat.

Go to the right repository

and leave a note to yourself, update nav and build

sub pages. I'm

Yeah.

Okay, so a couple more concerns, but we're making great progress. I mean, then you can and you have a template now for your next assignment. So once you have HTML that you've developed and tested and used and like at your disposal, which I hope you you're seeing that you have now. You can repurpose it. You can build on it for the same product, to refine it, or you can you can copy it as you have from week one to week two to build a new project. You.

Transcribed by https://otter.ai

## week2_027_CSS_Multipapge_Pt2_otter_ai.txt

We still have a few steps left to take, from this week to multi page development tutorial,

a few more code snippets to borrow, a few more refinements to make to our site.

So we've covered steps one through four. We've backed up our work in the repository,

created a sub pages. So now go ahead enhance the image styling.

So I already copied this to

my style dot CSS file. So go to this resource page and copy the same content, and we can play with it accordingly.

This will make a nice little difference, subtle but still nice difference. But you are welcome to play with it to fit your sense of usability and your sense of brand identity or site site identity.

So going to my VS code.

I'm adding this image styling CSS to the styles that

CSS file. I

won't make a difference yet because these these classes have not been applied yet, but we can do those pretty quickly.

But let me show you one mistake that I've made that I need to address

myself and then also have you address so there's one. There was one step we missed earlier on, so on the homepage, just for reference, I've inserted this image here, right? And it's working well. It's sizing properly.

It's colorful with the way of I've been incomplete in terms of how I have tagged this content. So I need to add to the image tag. I need to add what's called an alt tag, a, l, T, so they all alt tags are good for a couple different things. So I'm going to have

so just every simple but clear description of the content of the image which will show up as an alternative to the image if the image doesn't display properly. Say, I mistyped. So

I mistyped the file name knows what happens to the display of the image itself.

So we get the broken image icon, but then we have a description of what should be showing up there, right? So this is the alt tag context. So this text is showing up as an alternative to the image because the image doesn't properly named in the tag itself. So that's benefit one of two, the other one is harder to demonstrate, but equally, if not more important. So we're used to going to a website and scrolling and clicking and interacting and reading, because we have the capacities to do so. Some viewers will be consuming your web content through screen readers. The computer would would read the read the slide by line, and read that back to you. For people who don't have the capacities to read text on a screen.

So what happens when they hit this image on the home page? They can't see that?

What the screen reader will do then, is read the alt tag.

So if a screen reader is encountering this image on your on your site or in your site, it won't be able to obviously communicate the visual detail to the

viewer, but it has the alt tag to refer to read this text here

as a sort of a bridge between the paragraphs, right? So we know that in between the paragraphs, they'll know that an image has been inserted and it contains

briefly this content, right? So it serves two purpose here. So all images should have have this, have an alt tag there. It doesn't have to be long. This probably, probably shouldn't be long, but it should be concise and descriptive of what the content is.

So for your projects, if you haven't already inserted them,

this, having the alt tag say an image to to reinforce the crap, the crap principle would be pretty good. Would be, would be, would be sufficient for for an alt tag. Then adjust that phrasing accordingly for each additional image you have. But

there's ways we can actually make this, the image itself, a little more styled, a little more

little less sharp on the edges, a little more dimensional in some ways. So let's go ahead and look at the CSS for this page. So say you want to style the your screenshots of your of your crap examples in a unique way. So we're how we have image classification, called analysis image so every image.

That you are using to illustrate your analysis, you can tag this way, which will set the width 100%

and make sure it's not to exceed 800 pixels. In this case, add some margin and a border has some border radius, which we'll show in a second, and then a small channel behind the image to give a little bit more depth, a little more dimension. So I'll go back to my HTML for this page, and I'll between the image and the source tags. I'll type in the word class equals quote, unquote analysis image.

So this doesn't replace anything that just just I inserted this between the image, the IMG and the SRC text. So the so the difference will be subtle, but it'll be nice. So the edges around it, there's a slight little shadow behind it.

But notice also that the picture still responds well, but doesn't get too big. So this goes super large. It doesn't doesn't become it's over too overwhelming. So it kind of caps out at 800 pixels. But then it does, it go smaller? Should the browser go smaller? But

there's a little bit of, little bit of rounding going on. So the edges, the corners, have been rounded through the border radius,

through the border radius. So we want that to be greater. Let's make it 18 instead. Let's see what that does.

Let's say, let's make it even bigger, just to kind of make the point.

Yeah, well, that's even, that's even, yeah, so you can see the point. So we're adjusting,

we're softening the Curt, the corners of the image with the border radius CSS.

We're adding a very gentle box shadow with

with this here. So this off. This offsets the shadow a little bit from the image on the X, Y and Z axes. This the color. This is the transparency I'm uh,

so if you want the the border to be a different color, we could make that,

make that maybe pink, just to kind of sort of show that in action.

Yeah, it's there. It's not it's not great, but it's there. If you

want to see it more dramatically,

make the borders color, what it is, but then make the

border thickness. Here,

there we go. So there's ways to get, again, stylized, personalized, and also make more more unique, but also more accessible your content through through these fairly limited number of additional lines. So I'll, I'll tone this down a bit.

So there's one thing that we can add still too. So this is not the alt tag

itself, but it's also additional text as a caption. So even those who don't know the people in the image, they'll still know what's being described, right? So for example, you may not have known about Paul McCartney or Getty Lee. Sorry for you if that's the case, but if you'll know who these people are, then I can add a quick image that

will help to correct that. So going back to my index file, and I will

add in the div class

equals

image caption.

So a little more description that does that will reinforce, but not necessarily duplicate, what's in the what's in the alt tag, but let's see how that looks then what that adds to the image, so in close proximity to the image itself. So this helps just to kind of contextualize the content here, so it's a caption for an image.

So that's steps Step five, the

first half of step five, we could also then add some CSS to enhance the way the

headings and links appear. So again, this is for you to copy and paste into your own project.

What I would do, because we already have h1 h2 tags in place, or CSS in place, I would just put beneath that so I see. I'll go here.

I'll go to my CSS file.

I'll look for my h1 and h2 tags, and I.

Paste in my content here.

Okay, so this, this is a little bit redundant to what I have already have,

but I'll go ahead and keep what I have here.

My h1, h2, were previously set, so this color. So I'll leave that there, but I'll take that out of here, because it's not, it's not going to hurt anything, but also not going to help anything. So I'll just to avoid confusion, I'll remove this here. This is also, then probably increasing

the font size, but also the cushioning around the image, the headings and subheadings too. So let's go ahead and take a peek at that. So this cut, this doesn't contradict or replace this. It enhances or adds to that in a way that we can combine if we want to, right? But because the font sizes are different and the bottom margin is different, so because some of these elements are different. There's it's good to keep the tags separately styled.

So the little bit larger.

There's this line beneath this, the h2 tags, which kind of helps create a divider between the sections.

So real simple stuff, but the line that we're seeing beneath h2 is being

created by this

and spaced by this and this.

So we can make it closer further away by playing with these values. Here,

we can change the thickness

of the borders here,

we can have a darker by

playing with the values here or

different color.

I don't want to so I'll keep it as pale gray, so subtle

enhancements. But also, things are looking more a little more a little more organized, a little more sectioned out.

Probably the lines help to reinforce the scan ability. So if I somehow miss this, which I probably won't, but as if I somehow do but I catch this, the line beneath it, I'll know I'm in a new section when I hit the line below and so on.

So let's restyle then that the link text. So right now, the default is a standard underlying blue text when linked, purple when visited, right? So this would turn purple when we come back to this. So

this is purple when visited, blue and freshly linked. But say we want to be purple all along, because blue is not part of the the branding we're using. We could turn the

tagging on, and

this overrides the defaults for the linking in the hover.

So now these are more TCU purple to begin with, but also then don't underline until they're hovered over. So no tech, no text decoration here, until we hover. I Yeah,

okay. Since we're talking about accessibility with the alt tags, let's talk about accessibility with our links as well. So if you're

if you're screen reading, or if you're tapping or you're navigating the site with the Tab key instead of a mouse. Some mice

require a certain degree of dexterity that people, all people will share. We could also then set up what's called the focus for each link, so that when we get to a link, it'll be outlined. So I'm going to the top of the page,

I'm hitting the Tab thing a few times, and so notice,

so this gives further. This is called, this is called a colon focus,

which then gives a little more definition for additional accessibility, right? So it's one more consideration we're building in from the ground up. So it's ready to go in a variety of ways for a variety of audiences and their needs. So.

I'll leave you to review the remaining tests on your own.

Put a reminder of what's required for the assignments, and

while we're thinking about it, while we're here, while we're wrapping up the session, let's go ahead and update our

remote repository.

Push that good stuff to origin. I'm

and we have some template to complete for project two.

So the colors can change, the font choices can change, the images certainly will change. The links will change.

A lot of things can change, but you have something that's played with and tinker with right? So it's better to probably make some revisions to these elements than to start from scratch. So you'll know kind of you get a sense in the playing with these elements, how CSS works, how HTML works with CSS, all that good stuff.

Okay, so.

Transcribed by https://otter.ai
