0:06  
Okay, let's jump right into week three and the coding experience that comes with it three. We'll jump even more specifically to the Resources page of the Week Three module, and even more specifically to the responsive design tutorial. So it's like the one from last week, but with this week's project, we're starting from scratch in terms of new files. So I will be pulling code, and you may pull code from this to modify for your third week project to go back to VS code. I've already archived, as I asked you to do before we started these videos. I've already archived week two. So I week one, week two archives here. I have an empty index file here for a new homepage for this the third week project, and a new style sheet that's also empty. We'll copy and paste and build code together with this tutorial. So I'm assuming that you've been through the responsive design, mobile friendly design and user friendly design video, which gives a context for why we should think in these terms, why responsive is not just a good strategy, but it's also an act of empathy in terms of reaching the your user, your site visitor, where they likely consume their content, which is not both online, obviously, but also on a mobile device more often than not. So

1:34  
let's go ahead and jump into first seeing a new site that's promising but also not responsive. See what's going on that's keeping it from being responsive, and then we'll look at a version that will then become more more responsive, to really demonstrate what CSS can do to further enhance and further expand what HTML can do by itself. So go into the to the tutorial page itself. Let's go to part one, step one, HTML setup and grab the code here. Okay, so from Doc, type HTML down through the closing HTML tag, so all of it in this first box. So paste that here. Some garbage that I collected I didn't mean to capture. I'll go ahead and get rid of that here. Okay, so the heads should be pretty familiar to you. The body section is the usable content. The navigation is different than ours from last week, but set up in this similar fashion with an unordered list and list items for each link. So one thing that's different, that's different here from last week's setup, is that we have a section tag. So assuming the main will have several sections of content that'll be divided, probably topically. So you can use the section tag to define those, those sub topics. In addition to headings and subheadings, you can, you can actually put them into sub containers as well. Okay, so one thing I'll need to do is update what I have for line 27 with an image from my image images folder. What wish this fresh for this, for this exercise, so type in I for images, and then choose a file that you want to insert here. So go ahead and make the changes here. So this, the images folder should be the same for you, probably, but the file name will be different. Obviously, all tag will be different once the project is done very HTML, very htmlly, even from this simple preview, image is too big. Content is dwarfed by the image, and also image is not responsive, or the site is not responsive, the image is not resizing. So we this is we've encountered this before, right? So let's keep on pressing along then with our tutorial on the CSS that it contains. So the additional code of contains it will make some further, further refinements.

4:29  
That's sad. Step two, see if that enhances anything in any sort of meaningful way. So we'll add that to the CSS file. Should it make us It should make some difference. So actually it does some good. So here's the page at various widths, but the image is still not responsive, so the CSS is making it more attractive, but the image is still not all that well sized. That. Not as huge as it was, but still not responsive. It's just been scaled back a little bit. This is arranged a little more a little more thoughtfully, like with our navigation for exercise two, homework, two, project two, then there's a unordered list and the navigation that's set to flex that on Sol. This is pretty distributed, pretty familiar code, so CSS is working, but the responsiveness is not really super great. So one thing that this tutorial asked us to do is to use the inspection tool, which you can get to in Chrome. So here was the there's the practice page in Chrome. I'm right clicking and going down to inspect, and that opens up a panel here. And so what you can do is play with different resolutions or different screen sizes to sort of see how responsive or poorly responsive it is. So for for iPhone 14, which is not, not that old of a phone, I have a 15. So this is one generation before my phone. It looks pretty crappy. Let's look at a Samsung. Yeah. So it's not responding. It's responding to a point, but it's not responding especially well. It's a nice feature to have if you are doing mobile or user first design.

6:55  
So what we need to do is have it be a little more adaptive to the container that it finds itself in, right? So the content we're talking about the box model box, we don't think of boxes as liquid, but boxes can be stacked and restacked to fit for the available space better, right? So they can that are, so they can be rearranged and RE and RE positioned so that they fill the space better. So like liquid in that regard, so that so the box is better, better accommodate the space that they have available to them. So let's start talking about the magical, mysterious media query. So if you have, if you've had any experience with Python or JavaScript or other computer languages, you probably know something about conditional statements, which is a pretty fundamental component of a lot of computer languages, where media query basically says, once a certain condition is met, redefine these CSS rules, or change these CSS rules in this way. So when a condition is met means for our purposes, so the screen goes from, say, 1200 pixels wide to 768 pixels wide. Half this elements from the CSS change to accommodate that smaller space. So the statement begins at media. What follows is the condition, which is usually phrased in this way, so you Max with 600 pixels, for example. So when, when this condition is mess, when the screen goes down to after goes down to 600 and below the h1 font size will be, will be set to 24 pixels, which is smaller than, I guess, smaller than we have here. Before we get into the stuff down here, let's just try this one example. So the under Basic structure, there's the first real example for each one. Let's try that and put that into place and see how that affects the presentation. So going to the very bottom the style sheet and pasting in the code. So let me do a proper preview on a proper browser, so certainly larger than 600 pixels. Let's see, did I refresh it? There we go. Okay, and refresh my browser. So larger than 600 pixels, we have a large, larger font. Less than 600 pixels, we have a smaller font, right? So that's a media query in action. It's a media query that's affected the H once. So the condition is not met with a wide browser or a wide screen, the condition is being met with a smaller screen, not being met, being met. So that's a media query in action. So notice, if we can so this is the original statement for how each one is defined. So both the font size, but also the spacing around the font. So you don't need to repeat the whole thing. You just copy and paste the one value that's the one property and value combination that's changed. So let's add to that and see if we can make some more interesting magic happen. You so this is a more more complete, more robust, more real world example of CSS in action. So I'm copying the whole block here. I'm getting rid of the media query from from before, and then paste again. Will I just copy it again? So here, this is a more standard width, but now we was, we set it up in a more predictable way, or more sort of uniform, universal ways. So again, the font size will go from 36 to 24 well, in addition to that, the navigation list, so we'll go from a column will be turned into a column, and otherwise it'll be A row, right? So let's, look at that.

11:30  
So, so the navigation also is changing now, so the font size of the h1 changing, but also the orientation of the navigation list, because, if we have this is a relatively short navigation systems of just four links, but if we had 567, you can sort of see how they'd be clipped off and cropped out pretty quickly if they didn't reposition right. So that's a matter of leaving everything pretty much alone. So the flux is being defined here. This is a flux box because of this display property here. But now we're setting the flux direction. So when the navigation list gets down to below 607 68, then the direction of that flux box should be in a column. So notice, we hear what we have here too. This is a pretty universal statement too. So the width is set to 200% and as is the max width. So let's see that in action. So it goes only so big, so it doesn't go beyond its maximum size. But also it once it gets down to 768, or stays with the the width of the of the browser resizes to the width of the browser. So three things are happening here so far that we're seeing the each one's changing. The orientation of the navigation is changing, and the sizing of the the image is changing too, right? And so we do the the preview of this, of the various mobile devices

13:38  
that's much better than we saw before, much better than what we saw before. So the XR looks as good as iPhone 14, which looks probably as good as the Samsung Galaxy, right? So we just, we just increase considerably exponentially the number of users who can access our site and where they can access our site so they have to be tethered to a desktop or have the money for an expensive laptop, they can have an expensive iPhone instead, or a more quote, unquote affordable smartphone, and still have access to our site in a way that's not not initially off putting. This could be improved, but it's certainly better than the original version we first saw. Let's see what else is being changed by the CSS. So padding has changed from 40 to 20, so you need less padding as the as the section gets smaller and paragraph size went from 12, went from the defaults has not been fined, went from the default setting to 18. So let's see if we can see that action. So.

15:05  
So the paragraph settings is the bottom of the screen, so it's the default here, and it gets actually a little bit larger, like I said, true, or does that content? Okay? Because the smaller phone would would make this a small font, hard to read. So let's let's try this. Let's try this. We're going to change the paragraph sizing, font sizing, to 20. I'm

15:45  
so not too hard to read there, but even learn from here. So it can go in both directions. It doesn't have to get smaller as the screen gets smaller. You can set it up however you need to. That's that's sensible and user friendly. Okay, back to the to the tutorial.

16:15  
So we did our manual testing. We should probably go ahead and do our GitHub backup. So we made some changes, early responsive testing, commit those related files, push that to origin, to back up that work in our GitHub repository, and so the tutorial also includes the uncommon mistakes, so things that you might forget to include. So we don't typically start a CSF statement with a with a at symbol, but you do in CS with a media query. So it's at not just the word media, but at media followed by parentheses, usually with a value like Max, hyphen with colon, 768, pixels. This is pretty standard. And then what follows is the is the tag or the selector property and value that we're familiar with from CS CSS last week. So one mistake is to leave off the and sign here. Another mistake is to leave off the parentheses here,

17:39  
also where where you place the media queries in the larger style sheet matters. So what I did was I paste so this is from line 44 up is what I copied from the original tutorial. So the original CSS we started playing with was what I have from 46 down. Is the entire media query, re revaluing these tags or applying responsive values to these tags. So we want to have our defaults defined first before we change them again once the certain condition is met after the after the browser resizes. So order does matter, so it's usually media queries are say, let's say for the bottom of the of the CSS style sheet.

Transcribed by https://otter.ai
