# Lab 11 ‚Äì GitHub Pages Deployment

> Delivery Mode: In-Class Tutorial ‚ûú Individual Deployment (Guided Practice)

Goal: Deploy your personal website to GitHub Pages and establish a professional web presence with proper domain setup and deployment workflow.

## Learning Outcomes
- Deploy static websites to GitHub Pages
- Configure custom domains and DNS settings
- Understand Git workflow for continuous deployment
- Implement proper repository structure for web hosting
- Set up professional web presence for portfolio use

## Prerequisites
- Completed Lab 02 (Git & GitHub Workflow)
- Personal website with HTML/CSS ready for deployment
- GitHub account with repository already created
- GitHub Desktop installed and connected to your GitHub account

## Tasks

### 1. Repository Preparation
1. **Clean Up Repository Structure:**
   ```
   your-repo/
   ‚îú‚îÄ‚îÄ index.html          (main page)
   ‚îú‚îÄ‚îÄ css/
   ‚îÇ   ‚îî‚îÄ‚îÄ styles.css      (stylesheet)
   ‚îú‚îÄ‚îÄ images/             (if applicable)
   ‚îú‚îÄ‚îÄ README.md           (project documentation)
   ‚îî‚îÄ‚îÄ .gitignore          (ignore unnecessary files)
   ```

2. **Verify File Organization:**
   - Ensure `index.html` is in root directory
   - Check all file paths and links are relative
   - Test local website functionality
   - Remove any development-only files

### 2. Sync Changes with GitHub Desktop
1. **Pre-Deployment Using GitHub Desktop:**
   - Open GitHub Desktop
   - Select your repository from the left sidebar
   - Review all changed files in the "Changes" tab
   - Write a meaningful commit message: "Prepare site for GitHub Pages deployment"
   - Click **"Commit to main"**
   - Click **"Push origin"** to upload changes to GitHub

2. **Repository Hygiene:**
   - Review commit history in GitHub Desktop (History tab)
   - Ensure no sensitive information is committed
   - Verify .gitignore is working properly (files should not appear in Changes)
   - Clean up any unnecessary files using your file manager

### 3. GitHub Pages Configuration
1. **Enable GitHub Pages:**
   - Navigate to repository on GitHub.com
   - Go to Settings tab
   - Scroll to "Pages" section in left sidebar
   - Configure source: Deploy from main branch
   - Select root folder (/) as source

2. **Verify Deployment:**
   - Note the GitHub Pages URL (username.github.io/repository-name)
   - Wait for initial deployment (can take several minutes)
   - Test deployed site in browser
   - Check all links and resources load correctly

### 4. Custom Domain Setup (Optional but Recommended)
1. **Custom Domain Configuration:**
   - Purchase domain from registrar (if desired)
   - In GitHub Pages settings, add custom domain
   - Create CNAME file in repository root with domain name
   - Configure DNS settings with your registrar

2. **DNS Configuration Example:**
   ```
   # For apex domain (example.com):
   A Record: @ ‚Üí 185.199.108.153
   A Record: @ ‚Üí 185.199.109.153
   A Record: @ ‚Üí 185.199.110.153
   A Record: @ ‚Üí 185.199.111.153
   
   # For www subdomain:
   CNAME Record: www ‚Üí username.github.io
   ```

### 5. Professional Documentation
1. **Enhanced README.md:**
   ```markdown
   # Personal Website
   
   A responsive personal website built with semantic HTML5 and modern CSS.
   
   ## Live Site
   üåê [View Live Site](https://username.github.io/repository-name)
   
   ## Features
   - Responsive design
   - Semantic HTML5
   - Modern CSS with Flexbox/Grid
   - Accessibility compliant
   - Performance optimized
   
   ## Technologies Used
   - HTML5
   - CSS3
   - GitHub Pages
   
   ## Local Development
   1. Clone repository (or open in GitHub Desktop)
   2. Open `index.html` in browser or use Live Server in VS Code
   3. Edit files as needed
   4. Use GitHub Desktop to commit and push changes for automatic deployment
   
   ## Contact
   [Your contact information]
   ```

2. **Project Documentation:**
   - Document design decisions
   - List accessibility features implemented
   - Note browser compatibility
   - Include development workflow

### 6. Continuous Deployment Workflow
1. **Establish Development Workflow Using GitHub Desktop:**
   - Open GitHub Desktop and select your repository
   - **Sync latest changes:** Click "Fetch origin" (or "Pull origin" if changes exist)
   - Make your changes locally in VS Code or your preferred editor
   - **Review changes:** Check the "Changes" tab in GitHub Desktop
   - **Stage and commit:** Write descriptive commit message and click "Commit to main"
   - **Deploy:** Click "Push origin" to automatically deploy to GitHub Pages

2. **Testing Workflow:**
   - Test locally before committing (use VS Code Live Server)
   - Check mobile responsiveness in browser dev tools
   - Validate HTML/CSS using online validators
   - Test all links and functionality
   - Use GitHub Desktop to track your testing commits

## Deployment Checklist

### Pre-Deployment
- [ ] All files properly organized in repository
- [ ] index.html exists in root directory
- [ ] All internal links use relative paths
- [ ] Images and assets load correctly locally
- [ ] HTML validates without errors
- [ ] CSS validates without errors
- [ ] Site works across different browsers

### GitHub Pages Setup
- [ ] Repository is public (required for free GitHub Pages)
- [ ] GitHub Pages enabled in repository settings
- [ ] Source set to main branch, root folder
- [ ] Deployment successful (check Actions tab)
- [ ] Live site accessible at GitHub Pages URL

### Post-Deployment Testing
- [ ] All pages load correctly on live site
- [ ] All internal navigation works
- [ ] External links open properly
- [ ] Images and CSS assets load
- [ ] Mobile responsiveness maintained
- [ ] Site loads quickly (under 3 seconds)

### Documentation & Professionalism
- [ ] README.md updated with live site link
- [ ] Repository description added on GitHub.com
- [ ] Professional commit messages used (visible in GitHub Desktop history)
- [ ] Contact information current and professional

## Troubleshooting Common Issues

### Deployment Problems
- **Site not loading:** Check that index.html is in root directory
- **404 errors:** Verify all file paths are relative and case-sensitive
- **CSS not loading:** Check CSS file path in HTML link tag
- **Changes not appearing:** Allow up to 10 minutes for deployment

### Performance Issues
- **Slow loading:** Optimize images and minimize CSS
- **Large repository:** Use .gitignore to exclude unnecessary files (GitHub Desktop will show ignored files as grayed out)
- **Too many commits:** Consider the commit history in GitHub Desktop for cleaner organization

### Domain Issues
- **Custom domain not working:** Check DNS propagation (can take 24-48 hours)
- **HTTPS errors:** Ensure "Enforce HTTPS" is checked in GitHub Pages settings
- **CNAME conflicts:** Verify CNAME file contains only domain name

## Professional Presentation Tips

### Portfolio Quality
- Ensure site represents your best work
- Include contact information
- Add professional bio and photo
- Showcase technical skills learned
- Keep design clean and professional

### SEO and Discoverability
- Use descriptive page titles
- Add meta descriptions
- Include semantic HTML structure
- Use proper heading hierarchy
- Add alt text for images

## Success Criteria
- [ ] Website successfully deployed to GitHub Pages
- [ ] Live site accessible and fully functional
- [ ] All content displays correctly online
- [ ] Mobile responsive design works on live site
- [ ] Professional README.md with live site link
- [ ] Clean commit history with meaningful commit messages (review in GitHub Desktop)
- [ ] Site loads quickly and performs well
- [ ] Contact information is current and professional

## Testing Your Live Site
1. **Functionality Testing:**
   - Test all navigation links
   - Verify responsive behavior on different devices
   - Check loading speed and performance
   - Test in multiple browsers

2. **Professional Review:**
   - Review content for professionalism
   - Check spelling and grammar
   - Verify contact information accuracy
   - Ensure design is polished and complete

## Next Steps
Your website is now live and accessible to the world! You can share this URL on:
- Resume and LinkedIn profile
- Professional networking
- Academic applications
- Social media profiles

This deployment workflow will be used for all future projects, so master these steps for efficient development and deployment cycles.
